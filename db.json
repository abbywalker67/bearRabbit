{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/last_html.png.crdownload","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1658915970757},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/last_pdf.png.crdownload","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1658915981441},{"_id":"source/_posts/2021-02-01-量化投资4.md","hash":"51da8ac9372ea8fe60153ba7b98a46044000fcd3","modified":1612665683068},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建.md","hash":"2715f5929031b2ae4d6c7b4e5c86e33b2befe080","modified":1612690926619},{"_id":"source/_posts/2021-03-04-个人进化论01.md","hash":"0a91cdf0d234835dbd358513f5ec612b7f3d97ab","modified":1614913346396},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）.md","hash":"8270ef00f2b94b684942a26bbfc257d6c01c6655","modified":1659194668877},{"_id":"source/_posts/2021-02-03-量化投资5.md","hash":"c568176a0c19684069db60d216d52a683e80e9ce","modified":1612665683111},{"_id":"source/tags/index.md","hash":"28bfe7ba928d6991ec25d7d408cd08b27cafea36","modified":1612665683117},{"_id":"source/categories/index.md","hash":"a087c332ef87ddf8661a2717182bb47af5fc3c17","modified":1612665683116},{"_id":"source/_posts/2021-02-17-preparation.md","hash":"b32ac2ce3b7d23a59b5ff8ca8c7598ef6debe17c","modified":1613568692704},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）.md.bak","hash":"0640ce6eddcb19251f35c68fbb3f2827b1fa373a","modified":1659194657309},{"_id":"source/_posts/2021-02-07-kxq/ssh_suc.png","hash":"16bad37a61647396080cd2129b377ca4965c6244","modified":1613568692704},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/git_ssh.png","hash":"84aee6f8ead70d9f45845a01c960b1b62e8ff9fb","modified":1612684361544},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_new.png","hash":"366e48a6e4af743b2c3e518ea13a70e6c4c2eca3","modified":1612681162253},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_pub_page.png","hash":"2c26ababd4df19a331331c625dd7dda114571dbd","modified":1612683229104},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_setting.png","hash":"645d3c2b35234f71fa2a8f6c695cf21ceb0d27b7","modified":1612683065188},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/ssh_suc.png","hash":"16bad37a61647396080cd2129b377ca4965c6244","modified":1612685322717},{"_id":"source/_posts/2022-07-07-工程清单（持续更新）.md","hash":"f7e949495265b6c5bddfb746704dcbab1920c56a","modified":1657244625006},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_raw_3.png","hash":"f3794e8ef8cf7aed2d020facd0e664941d25b6ab","modified":1658914284493},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_setup_1.png","hash":"e74437fa757d823f12d551b29dc34ae05376ca24","modified":1658913726225},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_raw_2.png","hash":"aac56b26c517af1baca0e4b1ecea865f1fb47259","modified":1658914270564},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_raw_4.png","hash":"2fa766c905912c16c14acb58dca9b289ebcd3230","modified":1658914301404},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/without_img.png","hash":"05acbc40069aa2a737cbb9bd22ad7a15d4193862","modified":1658915077734},{"_id":"source/_posts/2021-02-03-量化投资5/ts_stock_basics.png","hash":"af9b03418693277c296be3691891a8beabe2dcd6","modified":1612665683114},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_new_config.png","hash":"39b1d740a001bd1383ba8d31221b6bfdb08693d8","modified":1612681307861},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_new_pub.png","hash":"4a1c0837303ce10f4def6a1d4aaead457e060660","modified":1612682853634},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_ssh_new.png","hash":"ac07ef80703c81532bd9a149305cb14cf275309d","modified":1612684967556},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_ssh_newdetail.png","hash":"b26217df8cf6b860d24f759c873a4ef6c772e2a3","modified":1612685153742},{"_id":"source/_posts/2021-02-01-量化投资4/sl_real_url_req.png","hash":"2f4130dc7f5c527316f727aec2ff2cb8a5870912","modified":1612665683076},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/analyse_pkg_3.png","hash":"e8cb8a79f2d16b5b016644afad67163bfd65b9d1","modified":1658913921534},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_filters.png","hash":"261dd8e8f08d9408bf371ed014aa57e200a2d17e","modified":1658914058260},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_info_1.png","hash":"bf22a3dbe07f82e29cd7680dd4a6121865b0b78f","modified":1658914171457},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_raw_1.png","hash":"f1bdddc04d1fc1f68b08f65ddc23dfa0022394c6","modified":1658914251975},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_info_2.png","hash":"e71ea2789ddd3c797e6864f112a9e115d518a6da","modified":1658914187170},{"_id":"themes/butterfly/README_CN.md","hash":"acbbd54c8163eec4952cd5451da2d2c343859836","modified":1612169781759},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1612169781755},{"_id":"themes/butterfly/package.json","hash":"ae166059bb4182ccb1aeaa2b629e88e91be7b256","modified":1612169781974},{"_id":"themes/butterfly/.github/stale.yml","hash":"7a131b8aa4936fbcedea3517299e1cdc1bcbcaab","modified":1612169781747},{"_id":"themes/butterfly/languages/default.yml","hash":"b9dbdb20bd1f1c7ca8a8f38635bdc4ed8bb1d44c","modified":1612169781766},{"_id":"themes/butterfly/languages/en.yml","hash":"fd1c1211c8f166d089a7697872185a81182d92e1","modified":1612169781768},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"736bec8eeb3a29d0d43669d81f1fa686e02be18e","modified":1612169781772},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"46685048a05b419ed9c72cf31bd6e5efef7524f2","modified":1612169781771},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1612169781777},{"_id":"themes/butterfly/layout/404.pug","hash":"def6b20a33b69f1be87a750a15a34c305d331a67","modified":1612169781775},{"_id":"themes/butterfly/layout/category.pug","hash":"5ac3cd8172088843cec03175c612a9c85f49cf2e","modified":1612169781779},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1612169781966},{"_id":"themes/butterfly/layout/page.pug","hash":"05ad3560b9300b4ad77c76f75e1801bc5fa99de3","modified":1612169781968},{"_id":"themes/butterfly/layout/post.pug","hash":"8f2f13c9ae099dd83827ce3dbac5abc8d7d5bde3","modified":1612169781970},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1612169781971},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1612169781752},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0b7979a908ebe8c350d73b6731f0be3e29d401c2","modified":1612169781740},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"b41123ce5f0ccfa9e06a68b9f3cb59ba040a049a","modified":1612169781743},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1612169781745},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"1e2ac4d26df7cd18a92f1404329f8eb1c388dc18","modified":1612169781983},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"dbce193ba170e004790550fe4694de8e29b299b9","modified":1612169781985},{"_id":"themes/butterfly/scripts/events/404.js","hash":"5f6127ede7d139891208340b5cf5bf9314e4be7d","modified":1612169781976},{"_id":"themes/butterfly/scripts/events/init.js","hash":"f7ab55363d05c945569d9ac4afc889f9706308c6","modified":1612169781978},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1612169781980},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1612169781988},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1612169781991},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"87cefb7d6235744a2448e70df9061c1700169ad6","modified":1612169781993},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"7dd77f751f5cc8c4fe30475a52df632dd85ce49a","modified":1612169781994},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"0745597f4ffadde037e57e0f66f7d984dc576dc6","modified":1612169781997},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"54c0c9c6d4d4ca754680cd24d7e204a745a6eec0","modified":1612169782000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ffbe625f184116e442648c8416ea58614a1cef8","modified":1612169782002},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1612169782005},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1612169782007},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1612169782006},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1612169782010},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1612169781783},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"a1ca58fdff74b890cade94479f8f0eb9ce7e5e73","modified":1612169781781},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"bff5ed7e56cce3cd540da40d971393fe7e93085c","modified":1612169781784},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"b0786e4b08231d178b8484e6c5cf01c22633612f","modified":1612169781813},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"790c94530e5b49fd6e144e83c7958969463380ec","modified":1612169781835},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"66b14189a1913119ff5927c0b933b5c73fb37f48","modified":1612169781841},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"86b2a4d500542fe764fdc5ff71cf029604325930","modified":1612169781844},{"_id":"themes/butterfly/_config.yml","hash":"cc53dd348fe65f82908e5533bad21352891787a5","modified":1612249963518},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1612169782108},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1612169782111},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1612169782109},{"_id":"themes/butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1612169782118},{"_id":"themes/butterfly/source/js/main.js","hash":"4a9a8f45f4fbfdb8a3e8063ea5597956ce099b31","modified":1612169782123},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1612169782115},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1612169782130},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1612169782102},{"_id":"themes/butterfly/source/css/var.styl","hash":"ae8193bd0107c823b8d2a123f1c301084c9c227a","modified":1612169782105},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"410bacf813d5b25f2448eeb4d1e63318c53a25a4","modified":1612169781804},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"d22d4c98028272dfc6c2e721e469f572a6b62ed3","modified":1612169781807},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"5e87417c04a77ae08174925a37aaa28863d9fa43","modified":1612169781810},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"0060598ca1cf25619bdb110ea2c83c690e4d2939","modified":1612169781809},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1612169781812},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"767b425f97e74a98002f4a435e36e8ec27e8a994","modified":1612169781787},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"903d12250ce70713dd5b8ac7e1f7a20fe15eb815","modified":1612169781790},{"_id":"themes/butterfly/source/js/utils.js","hash":"ba7e672a7bed2aefb9174e8122d92a643814272a","modified":1612169782132},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"2913737dc8e3d9d63c22bec637d40c7bced85bfb","modified":1612169781793},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1612169781795},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1612169781797},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"d6556d5396eb0e10ea0ec10158779c21dc78f738","modified":1612169781799},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"1ddbd09e1902da7fa4bf7824654f132e41622c42","modified":1612169781801},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1612169781800},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2beb27e33e4492fa80e88c37dcb7a3ffd7da9e24","modified":1612169781821},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"581d15087d120bc9710967ecdf3efcea23e8297d","modified":1612169781824},{"_id":"themes/butterfly/layout/includes/page/artitalk.pug","hash":"a02e5d18f12844ac1fbfa04d03798ff9e73090bc","modified":1612169781826},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1612169781829},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1612169781830},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"2a14b697881d69720912e856ec15ace6be0c6bbd","modified":1612169781832},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"2b89306e78242f9b2420160dd9f4adfac106e9c3","modified":1612169781792},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1612169781817},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1612169781833},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1612169781818},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1612169781942},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"862ed4cd51274e56e8c290a05c92dad896bb5f24","modified":1612169781840},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"009bdbef23381f10664622fafdc602f2ff5bf1ec","modified":1612169781944},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1612169781947},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1612169781838},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1612169781952},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"cabf9ee6a2886e6ede17f224dfbb161a9b1258e7","modified":1612169781954},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"0b5c165664f9f8691551fc5ff435b40e7f73c737","modified":1612169781955},{"_id":"themes/butterfly/layout/includes/widget/card_self.pug","hash":"8318c7c9a6aef966afba44e283111e7ff0b2f04f","modified":1612169781958},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"51f3227814fd229ddb2c9a2dd75a4b8effee9ad5","modified":1612169781949},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"b088fa11b89a05c2b49e6a27c2b862954e0b0ec2","modified":1612169781960},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"ff6d8dfc187d6e5e6139bbf3e0d831dbe1e9a530","modified":1612169781957},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1612169781964},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1612169781846},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8c5b241773597a412dbf3ebaca1f0bf504934a33","modified":1612169781965},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1612169781919},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1612169781894},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1612169781922},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"0837b0ab361e28b646a712d28121c462068534c1","modified":1612169781921},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"e0e8bf00ef7a0a62ea2265bd5e4a33d0edab5946","modified":1612169781939},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f9de9db2a49ac4d5447660ab159171ac5c228e3c","modified":1612169782016},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"35b424e6459db9c4c3f730b9122827c264efe613","modified":1612169782018},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1612169782125},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"d67ecb6c950e802a9c73975b13cab44f899eb192","modified":1612169782022},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3f0b8699f529f0842c3b101006f60cb7933c16ff","modified":1612169782035},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3234942decaa1fde5b872766d4943a2e8cb9ef72","modified":1612169782127},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1612169782070},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"7ee49d933000bf75bf544a46250f51db0fa2bded","modified":1612169782065},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"c96b439dbdf7e5ea426e178fb756226f017d070b","modified":1612169782067},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1612169782072},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"ab403bfb1abc12ea5015b123ce412d3177e638d9","modified":1612169782074},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"05269a522a7248d9a77569331481cbe18033c774","modified":1612169782075},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"0da09b1811a776106ca66c56be6e2a396dca5680","modified":1612169782077},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1612169782079},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"7730741fa8beb29e3231d397171f312957563e7b","modified":1612169782038},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1612169782042},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1612169782044},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"bfc4b9d8df66593c11c9ae78899f54e69785ca90","modified":1612169782046},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_setup_2.png","hash":"8b200aded8b39a5528db890611fcb248787d1ff6","modified":1658913739493},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1612169782049},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"db7fe645662d87be4f8dfc08e55bbe1a3734bf93","modified":1612169782051},{"_id":"themes/butterfly/README.md","hash":"b81895a748e60daa5bce2958673d3ed2077471da","modified":1612169781758},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"8c4e08c8a63dacdfb2a733a0d0035fa97c7f5e9e","modified":1612169782055},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"4ae98e703440b616d2a36da139bda844c94d425e","modified":1612169782057},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a00ad74074513a1c7f6e02977b8fa778beaa2108","modified":1612169782059},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"78ef182c0f6711c8491a8ee421b708c8f2a63c30","modified":1612169782060},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"257f08063d056bcc9fe385d7913df19b6503d93d","modified":1612169782062},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"a470029a157fbb8406ff72322a75ef63d6675431","modified":1612169782081},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"202b01db6ef3cca9e5a173e1a0dadfee8854a849","modified":1612169782084},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"92aa84cdec97729c86ba4674a355496eb37c986a","modified":1612169782086},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"d4a29cb1ec04ccbfbdb8927a624a4712e65b1d9d","modified":1612169782040},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"5fe4235c038ed128819bd6918cd0781b372b598e","modified":1612169782089},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"f3afa2cbd87e2ef8789dadc81dc00fdf8d965538","modified":1612169782047},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"e418e129012314e4baf9fce574d30d16ced9936f","modified":1612169782053},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1612169782092},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6c12a03e26ca5d538537d472657d3d03a7fcbb87","modified":1612169782090},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1612169782094},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1612169781850},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1612169781851},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1612169781853},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1612169782095},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"896dc0b7480151562c5717771e3000c5a7fc1b16","modified":1612169781857},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"e8dec6fc24af46c4733681a3a25ad8eaad0e8e1a","modified":1612169781859},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"eb2d840fa42de3ec7a7fda0eaa30246d52f543e2","modified":1612169781855},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1612169782100},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1612169781861},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1612169781863},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1612169781869},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1612169781865},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"502e6a3ab69db9184cb78ccc8fe4794d047ea36f","modified":1612169781898},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1612169781925},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"407d88e4af099d5f1a3f44623ec276c999219ec3","modified":1612169781900},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1612169781903},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"6f92311afe60ca5f44055016db9cecce8fb2dc62","modified":1612169781902},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1612169781929},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1612169781926},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1612169781931},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1612169781933},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1612169781937},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1612169782097},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"ba3bdf02a6c78b15eada95638173a11445dac7ac","modified":1612169782024},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"ebae44a37ac143f4e35523ebd6809371958fb930","modified":1612169782032},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"1b2dc0ef768c9be9f18d1c1f93d88f916482c5df","modified":1612169782026},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"c1747b8641303a1d9472ec94f2bc654885feb270","modified":1612169782033},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1612169781867},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1612169781870},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1612169781935},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"7935e92db64ca047d94404e5fc390a207e857a87","modified":1612169781911},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"70125dc478ae20d5f6b4b908260fdc451d803c6c","modified":1612169781907},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"9379b5b986b9a8ffdcd15d39862cbaafbcfabebe","modified":1612169781909},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"767c38e3dfa0097b0dc1fdfd0df292c16f757d05","modified":1612169781913},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"a3d43cc360666b5b9730e8bb9e5c8fd940ae5b3d","modified":1612169781915},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"e4f11ee6b2bce37f7a88b2642ff0079e7d98f26f","modified":1612169781917},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1612169782030},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"663a298253eddb5126ca1a6139d69c7097ffb52e","modified":1612169781874},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"47d5367d8308a5a134058f9f63c33c75890960f8","modified":1612169781875},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"03a8937c60403252d33bacea947e252e5007eac8","modified":1612169781877},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"a8d8be37236400508e97f75615f03cedccacddfb","modified":1612169781879},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"d97403cdd58c759cfd1752dd85aa4a0f9b73dc46","modified":1612169781881},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1612169781886},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"e877c98949873a62659db7501d19eb3d66650b51","modified":1612169781883},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"13c4bde63ff6dade449e753d29a9b21a7dd460b2","modified":1612169781887},{"_id":"source/_posts/2021-02-01-量化投资4/sl_real_url_rsp.png","hash":"76e47825349fa450eac4519b4e7c8c4e99d3de7c","modified":1612665683080},{"_id":"source/_posts/2021-02-01-量化投资4/stock_list_csv.png","hash":"eda65db62a8f2afa215062c3ba68d53647e093d7","modified":1612665683103},{"_id":"source/_posts/2021-02-01-量化投资4/get_sl_real_url.png","hash":"cd1968f998806a96c9c8fc3a1eb78906510b7198","modified":1612665683073},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1612169781889},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"96f04c0e7a5dfc1980e69f9b0bf277342de6e303","modified":1612169781891},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"1060d8e9258a55d7d453f49d9f78ad692f416221","modified":1612169781893},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_ssh.png","hash":"75d75c870cdb4778980b9a1daecaeb9a77358e4a","modified":1612684880338},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/analyse_pkg_2.png","hash":"beeaca2090da8ebdc740c045b15fe0b92ab06c12","modified":1658913910920},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/with_img.png","hash":"41fcc61d1cd6369849d7d48563c5778175c106bb","modified":1658915091535},{"_id":"source/_posts/2021-02-01-量化投资4/stock_info_web.png","hash":"b53eb2bc734db426578479edb6a95101fc7a32a9","modified":1612665683096},{"_id":"source/_posts/2021-02-01-量化投资4/stock_info_csv.png","hash":"cd93d37c6f8fe73b297117bdade0c1b764bd5934","modified":1612665683087},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/analyse_pkg_1.png","hash":"4d29d059baaa9cc6e756852c48c22b2e7ece7e6d","modified":1658913899310},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/raw_info.png","hash":"ce978d8f38968fde0c6b710fc35b38a49295fb05","modified":1658914902547},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/hexo-hello.png","hash":"3469910d09b190b41bdd22d14ea56b251acd3843","modified":1612680123240},{"_id":"source/_posts/2021-02-01-量化投资4/stock_list_web.png","hash":"cd99d49723a0c25e921794a2624a335ac7f66563","modified":1612665683110},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/butterfly.png","hash":"b41a0d536df9ab507e376b5c70fdaa4f011033c3","modified":1612690216624},{"_id":"source/_posts/2021-03-04-个人进化论01/wo.png","hash":"538d157074263dd8a5069bd1e17cd13a95c8a2a3","modified":1614913346450},{"_id":"public/atom.xml","hash":"da57756a050cf273dd84db2629dd26d62b142b46","modified":1659194687419},{"_id":"public/sitemap.xml","hash":"92f1a3cc4f7eb88d664dc04c922c01c1e3659049","modified":1659192628805},{"_id":"public/tags/index.html","hash":"4f2addfb4278bc6489a34e9fbfd2333a9bae3d8b","modified":1659194777812},{"_id":"public/categories/index.html","hash":"6162f3d5e4ed550d44a16d34896f61ce5b269069","modified":1659194777812},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/index.html","hash":"9dab6f8849616eb9b12cdf45c7a35967d0c8ea87","modified":1659194687419},{"_id":"public/2022/07/07/工程清单（持续更新）/index.html","hash":"3916e69baffb4ceddb7b1198f4c3917d8894d9b4","modified":1659192628805},{"_id":"public/2021/03/04/个人进化论01/index.html","hash":"7c371101d64688c011b3b2da537a99c325c31e5f","modified":1659192628805},{"_id":"public/2021/02/17/preparation/index.html","hash":"77af6e0e4d32ab078139d429a0b88f871a7fc063","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/index.html","hash":"8a2f137d60e324fca291be25db325ed018811cd3","modified":1659192628805},{"_id":"public/2021/02/03/量化投资5/index.html","hash":"c09ce1048e17d0424e91422631ce7b503dea3c1f","modified":1659192628805},{"_id":"public/archives/index.html","hash":"6e27457bad1105645f7c1f89f7c3671b50d0602b","modified":1659194777812},{"_id":"public/2021/02/01/量化投资4/index.html","hash":"bb948c59618c594cf08c750c9500c4085d28c2ce","modified":1659192628805},{"_id":"public/archives/2021/index.html","hash":"f9566705432fa03acc21fd27a9e24f1b542e4d77","modified":1659194777812},{"_id":"public/archives/2021/02/index.html","hash":"c991433868b125a285b617cfa2900e931cd93815","modified":1659194777812},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/last_html.png.crdownload","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/last_pdf.png.crdownload","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659192628805},{"_id":"public/archives/2021/03/index.html","hash":"eda836b61b032afdce0aafb26a6e1fa81b03299d","modified":1659194777812},{"_id":"public/archives/2022/index.html","hash":"667de485d499ae18f0363cc3c22d16a597b617d7","modified":1659194777812},{"_id":"public/archives/2022/07/index.html","hash":"ad756019639256bf9e6368cf4746ab12bdb3fc68","modified":1659194777812},{"_id":"public/categories/财富/index.html","hash":"b619e599092bf5190eabef55b2c6e5c79ff026f5","modified":1659194777812},{"_id":"public/categories/财富/量化投资/技术工具/index.html","hash":"822ff9f3a26f5be4dd0b8b19ce7ceb2c6e2d93e1","modified":1659194777812},{"_id":"public/categories/财富/量化投资/index.html","hash":"863d03a2bf6efb34afaa25edf84f381f58975e0a","modified":1659194777812},{"_id":"public/categories/财富/量化投资/技术工具/基础/index.html","hash":"47cd812253275e2dc4f97cff59bbb5c24925498b","modified":1659194777812},{"_id":"public/categories/基础教程/index.html","hash":"eda729f5edad1861c603144a355394bd7da3fcf0","modified":1659194777812},{"_id":"public/categories/基础教程/量化投资/index.html","hash":"b8367df0c6ff5a08dc46f3b79d9f660b204e345b","modified":1659194777812},{"_id":"public/categories/历史/index.html","hash":"ddc6968c20d9b81ed456ff08c80b1add47a83b59","modified":1659194777812},{"_id":"public/categories/总览/index.html","hash":"8ac568a088adc5b6744665470c698e555ffbe79f","modified":1659194777812},{"_id":"public/categories/个人进化/index.html","hash":"904534bd211b0ca7d5b57a9e5ce382826416ce60","modified":1659194777812},{"_id":"public/categories/总览/目录/index.html","hash":"a0ed37c82b13dda47b1cc6fc41e0ac7b9c1380aa","modified":1659194777812},{"_id":"public/categories/历史/中国史/index.html","hash":"48a49651c04f4127675752497746cef2903abb6e","modified":1659194777812},{"_id":"public/categories/基础教程/环境搭建/index.html","hash":"444dadf8fb88d55a7f41900bdef2bf6be8cc5a69","modified":1659194777812},{"_id":"public/categories/个人进化/心理学/index.html","hash":"45b26d507c4caf3069a33100c529ac5bb988c4b0","modified":1659194777812},{"_id":"public/categories/技术/实践/index.html","hash":"622e438f19d9e8fc39c3994e44842974e863a3f4","modified":1659194777812},{"_id":"public/categories/技术/index.html","hash":"7f2e864fefcaee2b0bcbc089dd22ba7830fd4d9f","modified":1659194777812},{"_id":"public/categories/兴趣研究/index.html","hash":"0a521a4e0e92390a95e364f71f3772e9a5343848","modified":1659194777812},{"_id":"public/categories/技术/实践/python/index.html","hash":"3f905a6c9ee4265b11611f57ecf6db43f1c5fa09","modified":1659194777812},{"_id":"public/categories/兴趣研究/技术/index.html","hash":"bd20c2681b70e8877973d713132d9d89c9451942","modified":1659194777812},{"_id":"public/categories/兴趣研究/技术/爬虫/index.html","hash":"7c97a4f0aa8b21f13b84a8b438af246665a061a2","modified":1659194777812},{"_id":"public/tags/量化投资/index.html","hash":"f225203c6a3b7a1fa256a545653966743b8bd872","modified":1659194777812},{"_id":"public/tags/数据获取/index.html","hash":"d5ff81e18d4f40e4912ca323a1c7bf0961af179b","modified":1659194777812},{"_id":"public/tags/技术/index.html","hash":"1c80f2a2d8916f1842641d2374352dfd7693bcde","modified":1659194777812},{"_id":"public/index.html","hash":"9e3e0dc50ca7877248cb92f46a95f68d0d844620","modified":1659194777812},{"_id":"public/tags/python/index.html","hash":"c8d92b3dd3612fcbe06a6edc7cf311e7280fdb50","modified":1659194777812},{"_id":"public/tags/mysql/index.html","hash":"fcfc46fdbf0017f0952585363614494e8046d581","modified":1659194777812},{"_id":"public/tags/资治通鉴/index.html","hash":"61fb021e870c5be9141ada4debe2092e5cb5c0c3","modified":1659194777812},{"_id":"public/tags/工程清单/index.html","hash":"c4a54f6f0e2036deafe7ee9de9f2701ed3f740df","modified":1659194777812},{"_id":"public/tags/听陈海贤自我进化课/index.html","hash":"bae5548a2629500f88c0c6ddddfae2f9adab804e","modified":1659194777812},{"_id":"public/tags/目录/index.html","hash":"f45c29214b429be87dd8c6c484ed8acefa199b3b","modified":1659194777812},{"_id":"public/tags/hexo/index.html","hash":"8c857334c0f143e9a1dd1886ad689d21c909d57b","modified":1659194777812},{"_id":"public/tags/github/index.html","hash":"9cdce7750f9d3b360aeed120f259256b42f61786","modified":1659194777812},{"_id":"public/tags/博客/index.html","hash":"2b2cb3ca7f9b878077b9a182f9a515835b6181be","modified":1659194777812},{"_id":"public/tags/爬虫/index.html","hash":"0753df92fae7abd7844218f71adec36dc62b7a4e","modified":1659194777812},{"_id":"public/tags/公众号/index.html","hash":"3dc2ef517ec27f11f995c893fb0cd3eb9f6831a9","modified":1659194777812},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1659192628805},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1659192628805},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1659192628805},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1659192628805},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/github_new.png","hash":"366e48a6e4af743b2c3e518ea13a70e6c4c2eca3","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/github_pub_page.png","hash":"2c26ababd4df19a331331c625dd7dda114571dbd","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/github_setting.png","hash":"645d3c2b35234f71fa2a8f6c695cf21ceb0d27b7","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/git_ssh.png","hash":"84aee6f8ead70d9f45845a01c960b1b62e8ff9fb","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/ssh_suc.png","hash":"16bad37a61647396080cd2129b377ca4965c6244","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/fiddle_raw_2.png","hash":"aac56b26c517af1baca0e4b1ecea865f1fb47259","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/fiddle_raw_3.png","hash":"f3794e8ef8cf7aed2d020facd0e664941d25b6ab","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/fiddle_setup_1.png","hash":"e74437fa757d823f12d551b29dc34ae05376ca24","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/fiddle_raw_4.png","hash":"2fa766c905912c16c14acb58dca9b289ebcd3230","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/fiddle_setup_2.png","hash":"8b200aded8b39a5528db890611fcb248787d1ff6","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/without_img.png","hash":"05acbc40069aa2a737cbb9bd22ad7a15d4193862","modified":1659192628805},{"_id":"public/2021/02/01/量化投资4/sl_real_url_req.png","hash":"2f4130dc7f5c527316f727aec2ff2cb8a5870912","modified":1659192628805},{"_id":"public/2021/02/03/量化投资5/ts_stock_basics.png","hash":"af9b03418693277c296be3691891a8beabe2dcd6","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/github_new_config.png","hash":"39b1d740a001bd1383ba8d31221b6bfdb08693d8","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/github_new_pub.png","hash":"4a1c0837303ce10f4def6a1d4aaead457e060660","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/github_ssh_newdetail.png","hash":"b26217df8cf6b860d24f759c873a4ef6c772e2a3","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/github_ssh_new.png","hash":"ac07ef80703c81532bd9a149305cb14cf275309d","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/fiddle_filters.png","hash":"261dd8e8f08d9408bf371ed014aa57e200a2d17e","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/fiddle_raw_1.png","hash":"f1bdddc04d1fc1f68b08f65ddc23dfa0022394c6","modified":1659192628805},{"_id":"public/2021/02/01/量化投资4/sl_real_url_rsp.png","hash":"76e47825349fa450eac4519b4e7c8c4e99d3de7c","modified":1659192628805},{"_id":"public/2021/02/01/量化投资4/stock_list_csv.png","hash":"eda65db62a8f2afa215062c3ba68d53647e093d7","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/analyse_pkg_3.png","hash":"e8cb8a79f2d16b5b016644afad67163bfd65b9d1","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/fiddle_info_2.png","hash":"e71ea2789ddd3c797e6864f112a9e115d518a6da","modified":1659192628805},{"_id":"public/js/utils.js","hash":"41481019ef510c74e744f4f7ec4d0a13b5ccc04c","modified":1659192628805},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1659192628805},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659192628805},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1659192628805},{"_id":"public/css/index.css","hash":"be949d9bc2db0cf561ae3771602ac2f78520363c","modified":1659192628805},{"_id":"public/2021/02/01/量化投资4/get_sl_real_url.png","hash":"cd1968f998806a96c9c8fc3a1eb78906510b7198","modified":1659192628805},{"_id":"public/2021/02/01/量化投资4/stock_info_csv.png","hash":"cd93d37c6f8fe73b297117bdade0c1b764bd5934","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/fiddle_info_1.png","hash":"bf22a3dbe07f82e29cd7680dd4a6121865b0b78f","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/with_img.png","hash":"41fcc61d1cd6369849d7d48563c5778175c106bb","modified":1659192628805},{"_id":"public/js/main.js","hash":"8cf2fb897890fa5fbbffbe936d6fa80b383584d9","modified":1659192628805},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/github_ssh.png","hash":"75d75c870cdb4778980b9a1daecaeb9a77358e4a","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/analyse_pkg_1.png","hash":"4d29d059baaa9cc6e756852c48c22b2e7ece7e6d","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/analyse_pkg_2.png","hash":"beeaca2090da8ebdc740c045b15fe0b92ab06c12","modified":1659192628805},{"_id":"public/2022/07/27/python批量下载公众号历史文章（一）/raw_info.png","hash":"ce978d8f38968fde0c6b710fc35b38a49295fb05","modified":1659192628805},{"_id":"public/2021/02/01/量化投资4/stock_list_web.png","hash":"cd99d49723a0c25e921794a2624a335ac7f66563","modified":1659192628805},{"_id":"public/2021/02/01/量化投资4/stock_info_web.png","hash":"b53eb2bc734db426578479edb6a95101fc7a32a9","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/hexo-hello.png","hash":"3469910d09b190b41bdd22d14ea56b251acd3843","modified":1659192628805},{"_id":"public/2021/02/07/hexo博客基础环境搭建/butterfly.png","hash":"b41a0d536df9ab507e376b5c70fdaa4f011033c3","modified":1659192628805},{"_id":"public/2021/03/04/个人进化论01/wo.png","hash":"538d157074263dd8a5069bd1e17cd13a95c8a2a3","modified":1659192628805}],"Category":[{"name":"财富","_id":"cl680ghe30004dwq86768bcp1"},{"name":"量化投资","parent":"cl680ghe30004dwq86768bcp1","_id":"cl680ghe50006dwq8dhyqfkhm"},{"name":"技术工具","parent":"cl680ghe50006dwq8dhyqfkhm","_id":"cl680ghe60008dwq89x0meq35"},{"name":"基础","parent":"cl680ghe60008dwq89x0meq35","_id":"cl680ghe8000bdwq8dnlf7gak"},{"name":"基础教程","_id":"cl680ghe9000fdwq80oc9aap5"},{"name":"量化投资","parent":"cl680ghe9000fdwq80oc9aap5","_id":"cl680ghe9000gdwq89xioewnb"},{"name":"历史","_id":"cl680ghek000sdwq81d0caydz"},{"name":"总览","_id":"cl680ghel000vdwq88ozx9ilx"},{"name":"个人进化","_id":"cl680gheo0011dwq8g0vob3p0"},{"name":"中国史","parent":"cl680ghek000sdwq81d0caydz","_id":"cl680ghev0017dwq82h589oqj"},{"name":"目录","parent":"cl680ghel000vdwq88ozx9ilx","_id":"cl680ghex001ddwq8f4sq6fgk"},{"name":"心理学","parent":"cl680gheo0011dwq8g0vob3p0","_id":"cl680ghex001gdwq8ffu2clch"},{"name":"环境搭建","parent":"cl680ghe9000fdwq80oc9aap5","_id":"cl680ghf5001qdwq8aeu55u9d"},{"name":"技术","_id":"cl680ghf6001sdwq8gxvma5dj"},{"name":"实践","parent":"cl680ghf6001sdwq8gxvma5dj","_id":"cl680ghf7001vdwq87oqufa1v"},{"name":"python","parent":"cl680ghf7001vdwq87oqufa1v","_id":"cl680ghf90021dwq81t93f0hp"},{"name":"兴趣研究","_id":"cl680ghfa0025dwq86weu26ec"},{"name":"技术","parent":"cl680ghfa0025dwq86weu26ec","_id":"cl680ghfb0028dwq85hpvh0mh"},{"name":"爬虫","parent":"cl680ghfb0028dwq85hpvh0mh","_id":"cl680ghfb0029dwq85o4k8ouh"}],"Data":[],"Page":[{"type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntype: tags\nlayout: tags\n---","date":"2021-02-07T02:41:23.117Z","updated":"2021-02-07T02:41:23.117Z","path":"tags/index.html","title":"","comments":1,"_id":"cl680ghdp0000dwq85p99562a","content":"","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""},{"type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2021-02-07T02:41:23.116Z","updated":"2021-02-07T02:41:23.116Z","path":"categories/index.html","title":"","comments":1,"_id":"cl680ghdz0002dwq83bfc1nav","content":"","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":""}],"Post":[{"title":"【量化投资】04.使用python爬取股票基础数据","date":"2021-02-01T13:34:02.000Z","_content":"\n### **【老博客地址】**\n&emsp;&emsp;[【CSDN】博客主页](https://blog.csdn.net/MissYourKiss/)\n&emsp;&emsp;[【量化投资】00.资源篇——持续更新](https://blog.csdn.net/MissYourKiss/article/details/111321871)\n&emsp;&emsp;[【量化投资】01.基本概念](https://blog.csdn.net/MissYourKiss/article/details/111300459)\n&emsp;&emsp;[【量化投资】02.数据接口初探——excel读取新浪股票api数据](https://blog.csdn.net/MissYourKiss/article/details/111326137)\n&ensp;&ensp;&ensp;&ensp;[【量化投资】03.量化工程abu学习之量化基础（1/3）](https://blog.csdn.net/MissYourKiss/article/details/111472606)\n\n### **【背景】**\n<p style=\"text-indent:2em\">\n之前的文章里推荐了好几个量化投资程序获取数据的方法，但是后来发现大多都有了限制，包括某share都得用积分才能使用，积分的获取非常麻烦。求人不如靠己！所以就开始自己一点点的自己想办法获取数据，并存储到本地。\n</p>\n<p style=\"text-indent:2em\">\n本次的目标是从东方财富的官网页面上抓取股票的基本数据，内容如下:\n</p>\n\n+ 本期\n    + 获取A股所有的股票列表和一些基本信息，并保存到cvs文件\n    + 获取各股票的一些详细信息，并保存到csv文件\n+ 计划\n    + 后续将数据进行结构化保存到数据库\n    + 后续改成多线程获取，加速爬取数据\n\n\n### **【最终效果】**\n<br />\n{% asset_img stock_list_web.png 股票清单和基本信息-网页 %}\n{% asset_img stock_list_csv.png 股票清单和基本信息-csv %}\n{% asset_img stock_info_web.png 股票详细信息-网页 %}\n{% asset_img stock_info_csv.png 股票详细信息-csv %}\n\n### **【代码】**\n#### **获取所有A股股票清单**\n##### **☆完整代码**\n    ```python\n        import urllib\n        import requests\n        import re\n        import json\n\n        def get_html(url):\n            with open('html.txt','w',encoding='utf-8') as f:\n                f.write(requests.get(url).text)\n\n        # 股票信息主页\n        # http://quote.eastmoney.com/center/gridlist.html#hs_a_board\n        # 沪深A股列表真实链接\n        url = \"http://11.push2.eastmoney.com/api/qt/clist/get?cb=jQuery112405084455909086425_1610764452571&pn=1&pz=4400&po=1&np=1&ut=bd1d9ddb04089700cf9c27f6f7426281&fltt=2&invt=2&fid=f3&fs=m:0+t:6,m:0+t:13,m:0+t:80,m:1+t:2,m:1+t:23&fields=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f12,f13,f14,f15,f16,f17,f18,f20,f21,f23,f24,f25,f22,f11,f62,f128,f136,f115,f152&_=1610764452635\"\n\n        def read_file():\n            with open('html.txt','r',encoding='utf-8') as f:\n                all_contents = f.read()\n            \n            # 正则表达式，获取股票列表信息json串\n            re_cont = re.findall('\\\\((.*?)\\\\);',all_contents,re.S)\n            js_cont = json.loads(re_cont[0])\n            stock_list=[]\n            for i in js_cont['data']['diff']:\n                #_stock={}\n                #_stock['code']=i['f12']\n                #_stock['name']=i['f14']\n                #_stock['new_price']=i['f2']\n                conten=[]  # 存放单只股票信息\n                conten.append(i['f12']) # 股票代码\n                conten.append(i['f14']) # 股票名称\n                conten.append(i['f2']) # 最新价\n                conten.append(i['f3']) # 涨跌幅\n                conten.append(i['f4']) # 涨跌额\n                conten.append(i['f5']) # 成交量（手）\n                conten.append(i['f6']) # 成交额\n                conten.append(i['f7']) # 振幅\n                conten.append(i['f15']) # 最高\n                conten.append(i['f16']) # 最低\n                conten.append(i['f17']) # 今开\n                conten.append(i['f18']) # 昨收\n                conten.append(i['f10']) # 量比\n                conten.append(i['f8']) # 换手率\n                conten.append(i['f9']) # 市盈率（动态）\n                conten.append(i['f23']) # 市净率\n                stock_list.append(conten)\n            \n            with open('stock.csv','w+',encoding='utf-8') as f:\n                # 写入表头\n                n=0\n                single=(str(n)+','+'股票代码'+','+'股票名称'+','+'最新价'+','+'涨跌幅'+','\n                        +'涨跌额'+','+'成交量（手）'+','+'成交额（亿）'+','+'振幅'+','+'最高'+','\n                        +'最低'+','+'今开'+','+'昨收'+','+'量比'+','+'换手率'+','\n                        +'市盈率（动态）'+','+'市净率'+'\\n')\n                f.write(single)\n                # 写入股票数据\n                for _ in stock_list:\n                    n+=1\n                    single = str(n)\n                    for val in _ :\n                        single=single+','+str(val)\n                    single=single+'\\n'\n                    f.write(single)\n\n        get_html(url)\n        read_file()\n    ```\n    \n##### **☆代码解读**\n\n1. 获取返回股票列表信息的**真实连接**\n  + 打开东方财富的 [主页](http://quote.eastmoney.com/center/gridlist.html#hs_a_board) ，获取返回值的html，查看源码，**发现其页面里面没有股票信息**,说明是通过生成页面框架，然后动态加载的。\n  + 使用**fiddler或者chrome自带功能**（可以参考我之前的相关文章）,点击“沪深A股”或者点击“翻页”，从fiddler捕获的连接或chrome的**开发者工具（F12）**的Network中找到最新的几个连接，找到真实的连接.\n  {% asset_img get_sl_real_url.png chrome的F12查看Network信息 %}\n  + 分析请求request的header请求，发现关键信息，pn=3，pz=20，猜想是第3页和每页20个的请求参数，其他f1,f2...应该是需要请求哪些数据的参数。那么我们把参数改成pn=1&pz=5000，也就是一次性将A股的4000多只股票全部获取到。\n  ```python\n    Request URL: http://56.push2.eastmoney.com/api/qt/clist/get?cb=jQuery1124034105331658665383_1612251280345&pn=3&pz=20&po=1&np=1&ut=bd1d9ddb04089700cf9c27f6f7426281&fltt=2&invt=2&fid=f3&fs=m:0+t:6,m:0+t:13,m:0+t:80,m:1+t:2,m:1+t:23&fields=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f12,f13,f14,f15,f16,f17,f18,f20,f21,f23,f24,f25,f22,f11,f62,f128,f136,f115,f152&_=1612251280452\n    Request Method: GET\n    Status Code: 200 OK\n    Remote Address: 101.89.224.78:80\n    Referrer Policy: strict-origin-when-cross-origin\n  ```\n  {% asset_img sl_real_url_req.png 分析请求信息 %}\n2. 访问真实连接，并对返回值进行解析\n  + 分析返回reponse，发现其是一个非常规整json字符串，外面包了一个小括弧，那就非常好办了，通过正则表达式把json字符串取出来，然后使用json包进行解析即可。\n  + 通过页面对比，发现每个返回字段代表的中文含义，例如：f12是股票代码\n  {% asset_img sl_real_url_rsp.png 分析返回信息 %}\n\n#### **获取每只股票信息信息**\n##### **☆完整代码**\n    ```python\n        import urllib\n        import requests\n        import re\n        import os\n        import csv\n        import json\n\n        #读取文件,拼接地址\n        f = open('info_fin.csv','w+',encoding='utf-8')\n        f.write('股票代码'+\",\"+\"股票名称\"+\",\"+\"最新价\"+\",\"+\"最高价\"+\",\"+\"最低价\"+\",\"+\"今开\"+\",\"+\"总手\"+\",\"+\"金额\"+\",\"+\"外盘\"+\",\"+\"量比\"\n            +\",\"+\"涨停\"+\",\"+\"跌停\"+\",\"+\"收益（新）\"+\",\"+\"昨收\"+\",\"+\"总股本\"+\",\"+\"流通股\"\n                +\",\"+\"净利润\"+\",\"+\"每股净资产\"+\",\"+\"总值\"+\",\"+\"流值\"+\",\"+\"板块\"+\",\"+\"地区\"+\",\"+\"pe\"\n                +\",\"+\"ROE\"+\",\"+\"总营收\"+\",\"+\"总营收同比\"+\",\"+\"净利润同比\"+\",\"+\"净利率\"+\",\"+\"负债率\"+\",\"+\"上市时间\"\n                +\",\"+\"每股未分配利润\"+\"\\n\")\n            \n        file = open('stock.csv',encoding='utf-8')\n        fileReader = csv.reader(file)\n        filedata = list(fileReader) \n\n        for _,i in enumerate(filedata):\n            if _==0: # 跳过文件头\n                continue\n            if i[1].startswith('6'):\n                addr = \"http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&invt=2&fltt=2&fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&secid=1.\" + i[1] + \"&cb=jQuery11240660569033297794_1610790254977&_=1610790254978\"\n            else:\n                addr = \"http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&invt=2&fltt=2&fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&secid=0.\" + i[1] + \"&cb=jQuery11240660569033297794_1610790254977&_=1610790254978\"\n\n        \n            re_cont = re.findall(\"\\\\((.*?)\\\\);\",requests.get(addr).text,re.S)\n            je_cont = json.loads(re_cont[0])\n            #fin = {}\n            #fin['code'] = je_cont['data']['f57']\n            #fin['name'] = je_cont['data']['f58']\n            work = ''\n            #print(str(je_cont['data']['f43']))\n            #print('12')\n            work = (str(je_cont['data']['f57'])+ \",\"+ str(je_cont['data']['f58'])+\",\" + str(je_cont['data']['f43'])+ \",\"+ str(je_cont['data']['f44'])\n            + \",\"+ str(je_cont['data']['f45'])+ \",\"+ str(je_cont['data']['f46'])+ \",\"+ str(je_cont['data']['f47'])\n            + \",\"+ str(je_cont['data']['f48'])+ \",\"+ str(je_cont['data']['f49'])+ \",\"+ str(je_cont['data']['f50'])+ \",\"+ str(je_cont['data']['f51'])\n            + \",\"+ str(je_cont['data']['f52'])+ \",\"+ str(je_cont['data']['f55'])\n            + \",\"+ str(je_cont['data']['f60'])+ \",\"+ str(je_cont['data']['f84'])+\",\"+ str(je_cont['data']['f85'])+\",\"+str(je_cont['data']['f105'])+\",\"+str(je_cont['data']['f92'])\n            + \",\"+ str(je_cont['data']['f116'])+\",\"+ str(je_cont['data']['f117'])+\",\"+str(je_cont['data']['f127'])+\",\"+str(je_cont['data']['f128'])+\",\"+str(je_cont['data']['f162'])+\",\"+str(je_cont['data']['f173'])\n            + \",\"+ str(je_cont['data']['f183'])+\",\"+ str(je_cont['data']['f184'])+\",\"+str(je_cont['data']['f185'])+\",\"+str(je_cont['data']['f187'])+\",\"+str(je_cont['data']['f188'])+\",\"+str(je_cont['data']['f189'])\n            + \",\"+ str(je_cont['data']['f190']))\n        \n            work = work+'\\n'\n            f.write(work) \n    ```\n\n##### **☆代码解读**\n1. 通过点击详情页面，找到每只股票详细信息访问的连接的规律\n   ```python\n   http://quote.eastmoney.com/sz******.html\n   http://quote.eastmoney.com/sh******.html\n   ```\n2. 同样的方法，发现所有的股票详细数据，都是动态加载的。使用**fiddler或者chrome自带功能**，获取真实连接。\n3. 分析规律组装真实连接，“6”开头的请求参数为“1.股票代码”，其他是“0.股票代码”\n   ```python\n     if i[1].startswith('6'):\n        addr = \"http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&invt=2&fltt=2&fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&secid=1.\" + i[1] + \"&cb=jQuery11240660569033297794_1610790254977&_=1610790254978\"\n    else:\n        addr = \"http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&invt=2&fltt=2&fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&secid=0.\" + i[1] + \"&cb=jQuery11240660569033297794_1610790254977&_=1610790254978\"\n\n   ```\n4. 解析返回reponse，同样的正则表达式+json解析，然后通过页面对比，发现每个返回字段对比的中文含义，例如：f57代表股票代码\n   ```python\n        最新价:f43\n        最高:f44\n        最低:f45\n        今开:f46\n        总手:f47\n        金额:f48\n        外盘:f49\n        量比:f50\n        涨停:f51\n        跌停:f52\n        收益（三）: f55\n        股票代码:f57\n        股票名称:f58\n        昨收:f60\n        总股本:f84\n        流通股:f85\n        净利润:f105\n        每股净资产:f92\n        总值:f116\n        流值:f117\n        板块：f127\n        地区：f128\n        pe（动）:f162\n        ROE:f173\n        总营收:f183\n        总营收同比:f184\n        净利润同比:f185\n        净利率:f187\n        负债率:f188\n        上市时间:f189\n        每股未分配利润:f190\n   ```","source":"_posts/2021-02-01-量化投资4.md","raw":"---\ntitle: 【量化投资】04.使用python爬取股票基础数据\ndate: 2021-02-01 21:34:02\ncategories:\n- [财富, 量化投资, 技术工具, 基础]\n- [基础教程, 量化投资]\ntags:\n- 量化投资\n- 数据获取\n- 技术\n- python\n---\n\n### **【老博客地址】**\n&emsp;&emsp;[【CSDN】博客主页](https://blog.csdn.net/MissYourKiss/)\n&emsp;&emsp;[【量化投资】00.资源篇——持续更新](https://blog.csdn.net/MissYourKiss/article/details/111321871)\n&emsp;&emsp;[【量化投资】01.基本概念](https://blog.csdn.net/MissYourKiss/article/details/111300459)\n&emsp;&emsp;[【量化投资】02.数据接口初探——excel读取新浪股票api数据](https://blog.csdn.net/MissYourKiss/article/details/111326137)\n&ensp;&ensp;&ensp;&ensp;[【量化投资】03.量化工程abu学习之量化基础（1/3）](https://blog.csdn.net/MissYourKiss/article/details/111472606)\n\n### **【背景】**\n<p style=\"text-indent:2em\">\n之前的文章里推荐了好几个量化投资程序获取数据的方法，但是后来发现大多都有了限制，包括某share都得用积分才能使用，积分的获取非常麻烦。求人不如靠己！所以就开始自己一点点的自己想办法获取数据，并存储到本地。\n</p>\n<p style=\"text-indent:2em\">\n本次的目标是从东方财富的官网页面上抓取股票的基本数据，内容如下:\n</p>\n\n+ 本期\n    + 获取A股所有的股票列表和一些基本信息，并保存到cvs文件\n    + 获取各股票的一些详细信息，并保存到csv文件\n+ 计划\n    + 后续将数据进行结构化保存到数据库\n    + 后续改成多线程获取，加速爬取数据\n\n\n### **【最终效果】**\n<br />\n{% asset_img stock_list_web.png 股票清单和基本信息-网页 %}\n{% asset_img stock_list_csv.png 股票清单和基本信息-csv %}\n{% asset_img stock_info_web.png 股票详细信息-网页 %}\n{% asset_img stock_info_csv.png 股票详细信息-csv %}\n\n### **【代码】**\n#### **获取所有A股股票清单**\n##### **☆完整代码**\n    ```python\n        import urllib\n        import requests\n        import re\n        import json\n\n        def get_html(url):\n            with open('html.txt','w',encoding='utf-8') as f:\n                f.write(requests.get(url).text)\n\n        # 股票信息主页\n        # http://quote.eastmoney.com/center/gridlist.html#hs_a_board\n        # 沪深A股列表真实链接\n        url = \"http://11.push2.eastmoney.com/api/qt/clist/get?cb=jQuery112405084455909086425_1610764452571&pn=1&pz=4400&po=1&np=1&ut=bd1d9ddb04089700cf9c27f6f7426281&fltt=2&invt=2&fid=f3&fs=m:0+t:6,m:0+t:13,m:0+t:80,m:1+t:2,m:1+t:23&fields=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f12,f13,f14,f15,f16,f17,f18,f20,f21,f23,f24,f25,f22,f11,f62,f128,f136,f115,f152&_=1610764452635\"\n\n        def read_file():\n            with open('html.txt','r',encoding='utf-8') as f:\n                all_contents = f.read()\n            \n            # 正则表达式，获取股票列表信息json串\n            re_cont = re.findall('\\\\((.*?)\\\\);',all_contents,re.S)\n            js_cont = json.loads(re_cont[0])\n            stock_list=[]\n            for i in js_cont['data']['diff']:\n                #_stock={}\n                #_stock['code']=i['f12']\n                #_stock['name']=i['f14']\n                #_stock['new_price']=i['f2']\n                conten=[]  # 存放单只股票信息\n                conten.append(i['f12']) # 股票代码\n                conten.append(i['f14']) # 股票名称\n                conten.append(i['f2']) # 最新价\n                conten.append(i['f3']) # 涨跌幅\n                conten.append(i['f4']) # 涨跌额\n                conten.append(i['f5']) # 成交量（手）\n                conten.append(i['f6']) # 成交额\n                conten.append(i['f7']) # 振幅\n                conten.append(i['f15']) # 最高\n                conten.append(i['f16']) # 最低\n                conten.append(i['f17']) # 今开\n                conten.append(i['f18']) # 昨收\n                conten.append(i['f10']) # 量比\n                conten.append(i['f8']) # 换手率\n                conten.append(i['f9']) # 市盈率（动态）\n                conten.append(i['f23']) # 市净率\n                stock_list.append(conten)\n            \n            with open('stock.csv','w+',encoding='utf-8') as f:\n                # 写入表头\n                n=0\n                single=(str(n)+','+'股票代码'+','+'股票名称'+','+'最新价'+','+'涨跌幅'+','\n                        +'涨跌额'+','+'成交量（手）'+','+'成交额（亿）'+','+'振幅'+','+'最高'+','\n                        +'最低'+','+'今开'+','+'昨收'+','+'量比'+','+'换手率'+','\n                        +'市盈率（动态）'+','+'市净率'+'\\n')\n                f.write(single)\n                # 写入股票数据\n                for _ in stock_list:\n                    n+=1\n                    single = str(n)\n                    for val in _ :\n                        single=single+','+str(val)\n                    single=single+'\\n'\n                    f.write(single)\n\n        get_html(url)\n        read_file()\n    ```\n    \n##### **☆代码解读**\n\n1. 获取返回股票列表信息的**真实连接**\n  + 打开东方财富的 [主页](http://quote.eastmoney.com/center/gridlist.html#hs_a_board) ，获取返回值的html，查看源码，**发现其页面里面没有股票信息**,说明是通过生成页面框架，然后动态加载的。\n  + 使用**fiddler或者chrome自带功能**（可以参考我之前的相关文章）,点击“沪深A股”或者点击“翻页”，从fiddler捕获的连接或chrome的**开发者工具（F12）**的Network中找到最新的几个连接，找到真实的连接.\n  {% asset_img get_sl_real_url.png chrome的F12查看Network信息 %}\n  + 分析请求request的header请求，发现关键信息，pn=3，pz=20，猜想是第3页和每页20个的请求参数，其他f1,f2...应该是需要请求哪些数据的参数。那么我们把参数改成pn=1&pz=5000，也就是一次性将A股的4000多只股票全部获取到。\n  ```python\n    Request URL: http://56.push2.eastmoney.com/api/qt/clist/get?cb=jQuery1124034105331658665383_1612251280345&pn=3&pz=20&po=1&np=1&ut=bd1d9ddb04089700cf9c27f6f7426281&fltt=2&invt=2&fid=f3&fs=m:0+t:6,m:0+t:13,m:0+t:80,m:1+t:2,m:1+t:23&fields=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f12,f13,f14,f15,f16,f17,f18,f20,f21,f23,f24,f25,f22,f11,f62,f128,f136,f115,f152&_=1612251280452\n    Request Method: GET\n    Status Code: 200 OK\n    Remote Address: 101.89.224.78:80\n    Referrer Policy: strict-origin-when-cross-origin\n  ```\n  {% asset_img sl_real_url_req.png 分析请求信息 %}\n2. 访问真实连接，并对返回值进行解析\n  + 分析返回reponse，发现其是一个非常规整json字符串，外面包了一个小括弧，那就非常好办了，通过正则表达式把json字符串取出来，然后使用json包进行解析即可。\n  + 通过页面对比，发现每个返回字段代表的中文含义，例如：f12是股票代码\n  {% asset_img sl_real_url_rsp.png 分析返回信息 %}\n\n#### **获取每只股票信息信息**\n##### **☆完整代码**\n    ```python\n        import urllib\n        import requests\n        import re\n        import os\n        import csv\n        import json\n\n        #读取文件,拼接地址\n        f = open('info_fin.csv','w+',encoding='utf-8')\n        f.write('股票代码'+\",\"+\"股票名称\"+\",\"+\"最新价\"+\",\"+\"最高价\"+\",\"+\"最低价\"+\",\"+\"今开\"+\",\"+\"总手\"+\",\"+\"金额\"+\",\"+\"外盘\"+\",\"+\"量比\"\n            +\",\"+\"涨停\"+\",\"+\"跌停\"+\",\"+\"收益（新）\"+\",\"+\"昨收\"+\",\"+\"总股本\"+\",\"+\"流通股\"\n                +\",\"+\"净利润\"+\",\"+\"每股净资产\"+\",\"+\"总值\"+\",\"+\"流值\"+\",\"+\"板块\"+\",\"+\"地区\"+\",\"+\"pe\"\n                +\",\"+\"ROE\"+\",\"+\"总营收\"+\",\"+\"总营收同比\"+\",\"+\"净利润同比\"+\",\"+\"净利率\"+\",\"+\"负债率\"+\",\"+\"上市时间\"\n                +\",\"+\"每股未分配利润\"+\"\\n\")\n            \n        file = open('stock.csv',encoding='utf-8')\n        fileReader = csv.reader(file)\n        filedata = list(fileReader) \n\n        for _,i in enumerate(filedata):\n            if _==0: # 跳过文件头\n                continue\n            if i[1].startswith('6'):\n                addr = \"http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&invt=2&fltt=2&fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&secid=1.\" + i[1] + \"&cb=jQuery11240660569033297794_1610790254977&_=1610790254978\"\n            else:\n                addr = \"http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&invt=2&fltt=2&fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&secid=0.\" + i[1] + \"&cb=jQuery11240660569033297794_1610790254977&_=1610790254978\"\n\n        \n            re_cont = re.findall(\"\\\\((.*?)\\\\);\",requests.get(addr).text,re.S)\n            je_cont = json.loads(re_cont[0])\n            #fin = {}\n            #fin['code'] = je_cont['data']['f57']\n            #fin['name'] = je_cont['data']['f58']\n            work = ''\n            #print(str(je_cont['data']['f43']))\n            #print('12')\n            work = (str(je_cont['data']['f57'])+ \",\"+ str(je_cont['data']['f58'])+\",\" + str(je_cont['data']['f43'])+ \",\"+ str(je_cont['data']['f44'])\n            + \",\"+ str(je_cont['data']['f45'])+ \",\"+ str(je_cont['data']['f46'])+ \",\"+ str(je_cont['data']['f47'])\n            + \",\"+ str(je_cont['data']['f48'])+ \",\"+ str(je_cont['data']['f49'])+ \",\"+ str(je_cont['data']['f50'])+ \",\"+ str(je_cont['data']['f51'])\n            + \",\"+ str(je_cont['data']['f52'])+ \",\"+ str(je_cont['data']['f55'])\n            + \",\"+ str(je_cont['data']['f60'])+ \",\"+ str(je_cont['data']['f84'])+\",\"+ str(je_cont['data']['f85'])+\",\"+str(je_cont['data']['f105'])+\",\"+str(je_cont['data']['f92'])\n            + \",\"+ str(je_cont['data']['f116'])+\",\"+ str(je_cont['data']['f117'])+\",\"+str(je_cont['data']['f127'])+\",\"+str(je_cont['data']['f128'])+\",\"+str(je_cont['data']['f162'])+\",\"+str(je_cont['data']['f173'])\n            + \",\"+ str(je_cont['data']['f183'])+\",\"+ str(je_cont['data']['f184'])+\",\"+str(je_cont['data']['f185'])+\",\"+str(je_cont['data']['f187'])+\",\"+str(je_cont['data']['f188'])+\",\"+str(je_cont['data']['f189'])\n            + \",\"+ str(je_cont['data']['f190']))\n        \n            work = work+'\\n'\n            f.write(work) \n    ```\n\n##### **☆代码解读**\n1. 通过点击详情页面，找到每只股票详细信息访问的连接的规律\n   ```python\n   http://quote.eastmoney.com/sz******.html\n   http://quote.eastmoney.com/sh******.html\n   ```\n2. 同样的方法，发现所有的股票详细数据，都是动态加载的。使用**fiddler或者chrome自带功能**，获取真实连接。\n3. 分析规律组装真实连接，“6”开头的请求参数为“1.股票代码”，其他是“0.股票代码”\n   ```python\n     if i[1].startswith('6'):\n        addr = \"http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&invt=2&fltt=2&fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&secid=1.\" + i[1] + \"&cb=jQuery11240660569033297794_1610790254977&_=1610790254978\"\n    else:\n        addr = \"http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&invt=2&fltt=2&fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&secid=0.\" + i[1] + \"&cb=jQuery11240660569033297794_1610790254977&_=1610790254978\"\n\n   ```\n4. 解析返回reponse，同样的正则表达式+json解析，然后通过页面对比，发现每个返回字段对比的中文含义，例如：f57代表股票代码\n   ```python\n        最新价:f43\n        最高:f44\n        最低:f45\n        今开:f46\n        总手:f47\n        金额:f48\n        外盘:f49\n        量比:f50\n        涨停:f51\n        跌停:f52\n        收益（三）: f55\n        股票代码:f57\n        股票名称:f58\n        昨收:f60\n        总股本:f84\n        流通股:f85\n        净利润:f105\n        每股净资产:f92\n        总值:f116\n        流值:f117\n        板块：f127\n        地区：f128\n        pe（动）:f162\n        ROE:f173\n        总营收:f183\n        总营收同比:f184\n        净利润同比:f185\n        净利率:f187\n        负债率:f188\n        上市时间:f189\n        每股未分配利润:f190\n   ```","slug":"量化投资4","published":1,"updated":"2021-02-07T02:41:23.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl680ghdu0001dwq8e3zbbkhr","content":"<h3 id=\"【老博客地址】\"><a href=\"#【老博客地址】\" class=\"headerlink\" title=\"【老博客地址】\"></a><strong>【老博客地址】</strong></h3><p>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/\">【CSDN】博客主页</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111321871\">【量化投资】00.资源篇——持续更新</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111300459\">【量化投资】01.基本概念</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111326137\">【量化投资】02.数据接口初探——excel读取新浪股票api数据</a><br>&ensp;&ensp;&ensp;&ensp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111472606\">【量化投资】03.量化工程abu学习之量化基础（1/3）</a></p>\n<h3 id=\"【背景】\"><a href=\"#【背景】\" class=\"headerlink\" title=\"【背景】\"></a><strong>【背景】</strong></h3><p style=\"text-indent:2em\">\n之前的文章里推荐了好几个量化投资程序获取数据的方法，但是后来发现大多都有了限制，包括某share都得用积分才能使用，积分的获取非常麻烦。求人不如靠己！所以就开始自己一点点的自己想办法获取数据，并存储到本地。\n</p>\n<p style=\"text-indent:2em\">\n本次的目标是从东方财富的官网页面上抓取股票的基本数据，内容如下:\n</p>\n\n<ul>\n<li>本期<ul>\n<li>获取A股所有的股票列表和一些基本信息，并保存到cvs文件</li>\n<li>获取各股票的一些详细信息，并保存到csv文件</li>\n</ul>\n</li>\n<li>计划<ul>\n<li>后续将数据进行结构化保存到数据库</li>\n<li>后续改成多线程获取，加速爬取数据</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"【最终效果】\"><a href=\"#【最终效果】\" class=\"headerlink\" title=\"【最终效果】\"></a><strong>【最终效果】</strong></h3><br>\n<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/stock_list_web.png\" class title=\"股票清单和基本信息-网页\">\n<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/stock_list_csv.png\" class title=\"股票清单和基本信息-csv\">\n<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/stock_info_web.png\" class title=\"股票详细信息-网页\">\n<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/stock_info_csv.png\" class title=\"股票详细信息-csv\">\n\n<h3 id=\"【代码】\"><a href=\"#【代码】\" class=\"headerlink\" title=\"【代码】\"></a><strong>【代码】</strong></h3><h4 id=\"获取所有A股股票清单\"><a href=\"#获取所有A股股票清单\" class=\"headerlink\" title=\"获取所有A股股票清单\"></a><strong>获取所有A股股票清单</strong></h4><h5 id=\"☆完整代码\"><a href=\"#☆完整代码\" class=\"headerlink\" title=\"☆完整代码\"></a><strong>☆完整代码</strong></h5><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_html</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;html.txt&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(requests.get(url).text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 股票信息主页</span></span><br><span class=\"line\"><span class=\"comment\"># http://quote.eastmoney.com/center/gridlist.html#hs_a_board</span></span><br><span class=\"line\"><span class=\"comment\"># 沪深A股列表真实链接</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://11.push2.eastmoney.com/api/qt/clist/get?cb=jQuery112405084455909086425_1610764452571&amp;pn=1&amp;pz=4400&amp;po=1&amp;np=1&amp;ut=bd1d9ddb04089700cf9c27f6f7426281&amp;fltt=2&amp;invt=2&amp;fid=f3&amp;fs=m:0+t:6,m:0+t:13,m:0+t:80,m:1+t:2,m:1+t:23&amp;fields=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f12,f13,f14,f15,f16,f17,f18,f20,f21,f23,f24,f25,f22,f11,f62,f128,f136,f115,f152&amp;_=1610764452635&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_file</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;html.txt&#x27;</span>,<span class=\"string\">&#x27;r&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        all_contents = f.read()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 正则表达式，获取股票列表信息json串</span></span><br><span class=\"line\">    re_cont = re.findall(<span class=\"string\">&#x27;\\\\((.*?)\\\\);&#x27;</span>,all_contents,re.S)</span><br><span class=\"line\">    js_cont = json.loads(re_cont[<span class=\"number\">0</span>])</span><br><span class=\"line\">    stock_list=[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> js_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;diff&#x27;</span>]:</span><br><span class=\"line\">        <span class=\"comment\">#_stock=&#123;&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">#_stock[&#x27;code&#x27;]=i[&#x27;f12&#x27;]</span></span><br><span class=\"line\">        <span class=\"comment\">#_stock[&#x27;name&#x27;]=i[&#x27;f14&#x27;]</span></span><br><span class=\"line\">        <span class=\"comment\">#_stock[&#x27;new_price&#x27;]=i[&#x27;f2&#x27;]</span></span><br><span class=\"line\">        conten=[]  <span class=\"comment\"># 存放单只股票信息</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f12&#x27;</span>]) <span class=\"comment\"># 股票代码</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f14&#x27;</span>]) <span class=\"comment\"># 股票名称</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f2&#x27;</span>]) <span class=\"comment\"># 最新价</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f3&#x27;</span>]) <span class=\"comment\"># 涨跌幅</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f4&#x27;</span>]) <span class=\"comment\"># 涨跌额</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f5&#x27;</span>]) <span class=\"comment\"># 成交量（手）</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f6&#x27;</span>]) <span class=\"comment\"># 成交额</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f7&#x27;</span>]) <span class=\"comment\"># 振幅</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f15&#x27;</span>]) <span class=\"comment\"># 最高</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f16&#x27;</span>]) <span class=\"comment\"># 最低</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f17&#x27;</span>]) <span class=\"comment\"># 今开</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f18&#x27;</span>]) <span class=\"comment\"># 昨收</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f10&#x27;</span>]) <span class=\"comment\"># 量比</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f8&#x27;</span>]) <span class=\"comment\"># 换手率</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f9&#x27;</span>]) <span class=\"comment\"># 市盈率（动态）</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f23&#x27;</span>]) <span class=\"comment\"># 市净率</span></span><br><span class=\"line\">        stock_list.append(conten)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;stock.csv&#x27;</span>,<span class=\"string\">&#x27;w+&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"comment\"># 写入表头</span></span><br><span class=\"line\">        n=<span class=\"number\">0</span></span><br><span class=\"line\">        single=(<span class=\"built_in\">str</span>(n)+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;股票代码&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;股票名称&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;最新价&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;涨跌幅&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span></span><br><span class=\"line\">                +<span class=\"string\">&#x27;涨跌额&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;成交量（手）&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;成交额（亿）&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;振幅&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;最高&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span></span><br><span class=\"line\">                +<span class=\"string\">&#x27;最低&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;今开&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;昨收&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;量比&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;换手率&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span></span><br><span class=\"line\">                +<span class=\"string\">&#x27;市盈率（动态）&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;市净率&#x27;</span>+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        f.write(single)</span><br><span class=\"line\">        <span class=\"comment\"># 写入股票数据</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> stock_list:</span><br><span class=\"line\">            n+=<span class=\"number\">1</span></span><br><span class=\"line\">            single = <span class=\"built_in\">str</span>(n)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> _ :</span><br><span class=\"line\">                single=single+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"built_in\">str</span>(val)</span><br><span class=\"line\">            single=single+<span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">            f.write(single)</span><br><span class=\"line\"></span><br><span class=\"line\">get_html(url)</span><br><span class=\"line\">read_file()</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h5 id=\"☆代码解读\"><a href=\"#☆代码解读\" class=\"headerlink\" title=\"☆代码解读\"></a><strong>☆代码解读</strong></h5><ol>\n<li>获取返回股票列表信息的<strong>真实连接</strong></li>\n</ol>\n<ul>\n<li>打开东方财富的 <a href=\"http://quote.eastmoney.com/center/gridlist.html#hs_a_board\">主页</a> ，获取返回值的html，查看源码，<strong>发现其页面里面没有股票信息</strong>,说明是通过生成页面框架，然后动态加载的。</li>\n<li>使用<strong>fiddler或者chrome自带功能</strong>（可以参考我之前的相关文章）,点击“沪深A股”或者点击“翻页”，从fiddler捕获的连接或chrome的<strong>开发者工具（F12）</strong>的Network中找到最新的几个连接，找到真实的连接.<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/get_sl_real_url.png\" class title=\"chrome的F12查看Network信息\"></li>\n<li>分析请求request的header请求，发现关键信息，pn=3，pz=20，猜想是第3页和每页20个的请求参数，其他f1,f2…应该是需要请求哪些数据的参数。那么我们把参数改成pn=1&amp;pz=5000，也就是一次性将A股的4000多只股票全部获取到。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request URL: http://56.push2.eastmoney.com/api/qt/clist/get?cb=jQuery1124034105331658665383_1612251280345&amp;pn=3&amp;pz=20&amp;po=1&amp;np=1&amp;ut=bd1d9ddb04089700cf9c27f6f7426281&amp;fltt=2&amp;invt=2&amp;fid=f3&amp;fs=m:0+t:6,m:0+t:13,m:0+t:80,m:1+t:2,m:1+t:23&amp;fields=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f12,f13,f14,f15,f16,f17,f18,f20,f21,f23,f24,f25,f22,f11,f62,f128,f136,f115,f152&amp;_=1612251280452</span><br><span class=\"line\">Request Method: GET</span><br><span class=\"line\">Status Code: <span class=\"number\">200</span> OK</span><br><span class=\"line\">Remote Address: <span class=\"number\">101.89</span><span class=\"number\">.224</span><span class=\"number\">.78</span>:<span class=\"number\">80</span></span><br><span class=\"line\">Referrer Policy: strict-origin-when-cross-origin</span><br></pre></td></tr></table></figure>\n<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/sl_real_url_req.png\" class title=\"分析请求信息\"></li>\n</ul>\n<ol start=\"2\">\n<li>访问真实连接，并对返回值进行解析</li>\n</ol>\n<ul>\n<li>分析返回reponse，发现其是一个非常规整json字符串，外面包了一个小括弧，那就非常好办了，通过正则表达式把json字符串取出来，然后使用json包进行解析即可。</li>\n<li>通过页面对比，发现每个返回字段代表的中文含义，例如：f12是股票代码<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/sl_real_url_rsp.png\" class title=\"分析返回信息\">\n\n</li>\n</ul>\n<h4 id=\"获取每只股票信息信息\"><a href=\"#获取每只股票信息信息\" class=\"headerlink\" title=\"获取每只股票信息信息\"></a><strong>获取每只股票信息信息</strong></h4><h5 id=\"☆完整代码-1\"><a href=\"#☆完整代码-1\" class=\"headerlink\" title=\"☆完整代码\"></a><strong>☆完整代码</strong></h5><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#读取文件,拼接地址</span></span><br><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;info_fin.csv&#x27;</span>,<span class=\"string\">&#x27;w+&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">f.write(<span class=\"string\">&#x27;股票代码&#x27;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;股票名称&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;最新价&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;最高价&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;最低价&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;今开&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;总手&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;金额&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;外盘&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;量比&quot;</span></span><br><span class=\"line\">    +<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;涨停&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;跌停&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;收益（新）&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;昨收&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;总股本&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;流通股&quot;</span></span><br><span class=\"line\">        +<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;净利润&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;每股净资产&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;总值&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;流值&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;板块&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;地区&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;pe&quot;</span></span><br><span class=\"line\">        +<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;ROE&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;总营收&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;总营收同比&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;净利润同比&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;净利率&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;负债率&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;上市时间&quot;</span></span><br><span class=\"line\">        +<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;每股未分配利润&quot;</span>+<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;stock.csv&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">fileReader = csv.reader(file)</span><br><span class=\"line\">filedata = <span class=\"built_in\">list</span>(fileReader) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> _,i <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(filedata):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> _==<span class=\"number\">0</span>: <span class=\"comment\"># 跳过文件头</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i[<span class=\"number\">1</span>].startswith(<span class=\"string\">&#x27;6&#x27;</span>):</span><br><span class=\"line\">        addr = <span class=\"string\">&quot;http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&amp;invt=2&amp;fltt=2&amp;fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&amp;secid=1.&quot;</span> + i[<span class=\"number\">1</span>] + <span class=\"string\">&quot;&amp;cb=jQuery11240660569033297794_1610790254977&amp;_=1610790254978&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        addr = <span class=\"string\">&quot;http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&amp;invt=2&amp;fltt=2&amp;fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&amp;secid=0.&quot;</span> + i[<span class=\"number\">1</span>] + <span class=\"string\">&quot;&amp;cb=jQuery11240660569033297794_1610790254977&amp;_=1610790254978&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    re_cont = re.findall(<span class=\"string\">&quot;\\\\((.*?)\\\\);&quot;</span>,requests.get(addr).text,re.S)</span><br><span class=\"line\">    je_cont = json.loads(re_cont[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"comment\">#fin = &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#fin[&#x27;code&#x27;] = je_cont[&#x27;data&#x27;][&#x27;f57&#x27;]</span></span><br><span class=\"line\">    <span class=\"comment\">#fin[&#x27;name&#x27;] = je_cont[&#x27;data&#x27;][&#x27;f58&#x27;]</span></span><br><span class=\"line\">    work = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#print(str(je_cont[&#x27;data&#x27;][&#x27;f43&#x27;]))</span></span><br><span class=\"line\">    <span class=\"comment\">#print(&#x27;12&#x27;)</span></span><br><span class=\"line\">    work = (<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f57&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f58&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span> + <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f43&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f44&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f45&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f46&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f47&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f48&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f49&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f50&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f51&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f52&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f55&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f60&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f84&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f85&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f105&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f92&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f116&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f117&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f127&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f128&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f162&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f173&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f183&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f184&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f185&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f187&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f188&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f189&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f190&#x27;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    work = work+<span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">    f.write(work) </span><br></pre></td></tr></table></figure>\n</code></pre>\n<h5 id=\"☆代码解读-1\"><a href=\"#☆代码解读-1\" class=\"headerlink\" title=\"☆代码解读\"></a><strong>☆代码解读</strong></h5><ol>\n<li>通过点击详情页面，找到每只股票详细信息访问的连接的规律<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://quote.eastmoney.com/sz******.html</span><br><span class=\"line\">http://quote.eastmoney.com/sh******.html</span><br></pre></td></tr></table></figure></li>\n<li>同样的方法，发现所有的股票详细数据，都是动态加载的。使用<strong>fiddler或者chrome自带功能</strong>，获取真实连接。</li>\n<li>分析规律组装真实连接，“6”开头的请求参数为“1.股票代码”，其他是“0.股票代码”<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">if</span> i[<span class=\"number\">1</span>].startswith(<span class=\"string\">&#x27;6&#x27;</span>):</span><br><span class=\"line\">    addr = <span class=\"string\">&quot;http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&amp;invt=2&amp;fltt=2&amp;fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&amp;secid=1.&quot;</span> + i[<span class=\"number\">1</span>] + <span class=\"string\">&quot;&amp;cb=jQuery11240660569033297794_1610790254977&amp;_=1610790254978&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    addr = <span class=\"string\">&quot;http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&amp;invt=2&amp;fltt=2&amp;fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&amp;secid=0.&quot;</span> + i[<span class=\"number\">1</span>] + <span class=\"string\">&quot;&amp;cb=jQuery11240660569033297794_1610790254977&amp;_=1610790254978&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>解析返回reponse，同样的正则表达式+json解析，然后通过页面对比，发现每个返回字段对比的中文含义，例如：f57代表股票代码<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最新价:f43</span><br><span class=\"line\">最高:f44</span><br><span class=\"line\">最低:f45</span><br><span class=\"line\">今开:f46</span><br><span class=\"line\">总手:f47</span><br><span class=\"line\">金额:f48</span><br><span class=\"line\">外盘:f49</span><br><span class=\"line\">量比:f50</span><br><span class=\"line\">涨停:f51</span><br><span class=\"line\">跌停:f52</span><br><span class=\"line\">收益（三）: f55</span><br><span class=\"line\">股票代码:f57</span><br><span class=\"line\">股票名称:f58</span><br><span class=\"line\">昨收:f60</span><br><span class=\"line\">总股本:f84</span><br><span class=\"line\">流通股:f85</span><br><span class=\"line\">净利润:f105</span><br><span class=\"line\">每股净资产:f92</span><br><span class=\"line\">总值:f116</span><br><span class=\"line\">流值:f117</span><br><span class=\"line\">板块：f127</span><br><span class=\"line\">地区：f128</span><br><span class=\"line\">pe（动）:f162</span><br><span class=\"line\">ROE:f173</span><br><span class=\"line\">总营收:f183</span><br><span class=\"line\">总营收同比:f184</span><br><span class=\"line\">净利润同比:f185</span><br><span class=\"line\">净利率:f187</span><br><span class=\"line\">负债率:f188</span><br><span class=\"line\">上市时间:f189</span><br><span class=\"line\">每股未分配利润:f190</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h3 id=\"【老博客地址】\"><a href=\"#【老博客地址】\" class=\"headerlink\" title=\"【老博客地址】\"></a><strong>【老博客地址】</strong></h3><p>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/\">【CSDN】博客主页</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111321871\">【量化投资】00.资源篇——持续更新</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111300459\">【量化投资】01.基本概念</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111326137\">【量化投资】02.数据接口初探——excel读取新浪股票api数据</a><br>&ensp;&ensp;&ensp;&ensp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111472606\">【量化投资】03.量化工程abu学习之量化基础（1/3）</a></p>\n<h3 id=\"【背景】\"><a href=\"#【背景】\" class=\"headerlink\" title=\"【背景】\"></a><strong>【背景】</strong></h3><p style=\"text-indent:2em\">\n之前的文章里推荐了好几个量化投资程序获取数据的方法，但是后来发现大多都有了限制，包括某share都得用积分才能使用，积分的获取非常麻烦。求人不如靠己！所以就开始自己一点点的自己想办法获取数据，并存储到本地。\n</p>\n<p style=\"text-indent:2em\">\n本次的目标是从东方财富的官网页面上抓取股票的基本数据，内容如下:\n</p>\n\n<ul>\n<li>本期<ul>\n<li>获取A股所有的股票列表和一些基本信息，并保存到cvs文件</li>\n<li>获取各股票的一些详细信息，并保存到csv文件</li>\n</ul>\n</li>\n<li>计划<ul>\n<li>后续将数据进行结构化保存到数据库</li>\n<li>后续改成多线程获取，加速爬取数据</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"【最终效果】\"><a href=\"#【最终效果】\" class=\"headerlink\" title=\"【最终效果】\"></a><strong>【最终效果】</strong></h3><br>\n<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/stock_list_web.png\" class title=\"股票清单和基本信息-网页\">\n<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/stock_list_csv.png\" class title=\"股票清单和基本信息-csv\">\n<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/stock_info_web.png\" class title=\"股票详细信息-网页\">\n<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/stock_info_csv.png\" class title=\"股票详细信息-csv\">\n\n<h3 id=\"【代码】\"><a href=\"#【代码】\" class=\"headerlink\" title=\"【代码】\"></a><strong>【代码】</strong></h3><h4 id=\"获取所有A股股票清单\"><a href=\"#获取所有A股股票清单\" class=\"headerlink\" title=\"获取所有A股股票清单\"></a><strong>获取所有A股股票清单</strong></h4><h5 id=\"☆完整代码\"><a href=\"#☆完整代码\" class=\"headerlink\" title=\"☆完整代码\"></a><strong>☆完整代码</strong></h5><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_html</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;html.txt&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(requests.get(url).text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 股票信息主页</span></span><br><span class=\"line\"><span class=\"comment\"># http://quote.eastmoney.com/center/gridlist.html#hs_a_board</span></span><br><span class=\"line\"><span class=\"comment\"># 沪深A股列表真实链接</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://11.push2.eastmoney.com/api/qt/clist/get?cb=jQuery112405084455909086425_1610764452571&amp;pn=1&amp;pz=4400&amp;po=1&amp;np=1&amp;ut=bd1d9ddb04089700cf9c27f6f7426281&amp;fltt=2&amp;invt=2&amp;fid=f3&amp;fs=m:0+t:6,m:0+t:13,m:0+t:80,m:1+t:2,m:1+t:23&amp;fields=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f12,f13,f14,f15,f16,f17,f18,f20,f21,f23,f24,f25,f22,f11,f62,f128,f136,f115,f152&amp;_=1610764452635&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_file</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;html.txt&#x27;</span>,<span class=\"string\">&#x27;r&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        all_contents = f.read()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 正则表达式，获取股票列表信息json串</span></span><br><span class=\"line\">    re_cont = re.findall(<span class=\"string\">&#x27;\\\\((.*?)\\\\);&#x27;</span>,all_contents,re.S)</span><br><span class=\"line\">    js_cont = json.loads(re_cont[<span class=\"number\">0</span>])</span><br><span class=\"line\">    stock_list=[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> js_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;diff&#x27;</span>]:</span><br><span class=\"line\">        <span class=\"comment\">#_stock=&#123;&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">#_stock[&#x27;code&#x27;]=i[&#x27;f12&#x27;]</span></span><br><span class=\"line\">        <span class=\"comment\">#_stock[&#x27;name&#x27;]=i[&#x27;f14&#x27;]</span></span><br><span class=\"line\">        <span class=\"comment\">#_stock[&#x27;new_price&#x27;]=i[&#x27;f2&#x27;]</span></span><br><span class=\"line\">        conten=[]  <span class=\"comment\"># 存放单只股票信息</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f12&#x27;</span>]) <span class=\"comment\"># 股票代码</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f14&#x27;</span>]) <span class=\"comment\"># 股票名称</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f2&#x27;</span>]) <span class=\"comment\"># 最新价</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f3&#x27;</span>]) <span class=\"comment\"># 涨跌幅</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f4&#x27;</span>]) <span class=\"comment\"># 涨跌额</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f5&#x27;</span>]) <span class=\"comment\"># 成交量（手）</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f6&#x27;</span>]) <span class=\"comment\"># 成交额</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f7&#x27;</span>]) <span class=\"comment\"># 振幅</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f15&#x27;</span>]) <span class=\"comment\"># 最高</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f16&#x27;</span>]) <span class=\"comment\"># 最低</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f17&#x27;</span>]) <span class=\"comment\"># 今开</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f18&#x27;</span>]) <span class=\"comment\"># 昨收</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f10&#x27;</span>]) <span class=\"comment\"># 量比</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f8&#x27;</span>]) <span class=\"comment\"># 换手率</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f9&#x27;</span>]) <span class=\"comment\"># 市盈率（动态）</span></span><br><span class=\"line\">        conten.append(i[<span class=\"string\">&#x27;f23&#x27;</span>]) <span class=\"comment\"># 市净率</span></span><br><span class=\"line\">        stock_list.append(conten)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;stock.csv&#x27;</span>,<span class=\"string\">&#x27;w+&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"comment\"># 写入表头</span></span><br><span class=\"line\">        n=<span class=\"number\">0</span></span><br><span class=\"line\">        single=(<span class=\"built_in\">str</span>(n)+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;股票代码&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;股票名称&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;最新价&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;涨跌幅&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span></span><br><span class=\"line\">                +<span class=\"string\">&#x27;涨跌额&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;成交量（手）&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;成交额（亿）&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;振幅&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;最高&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span></span><br><span class=\"line\">                +<span class=\"string\">&#x27;最低&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;今开&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;昨收&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;量比&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;换手率&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span></span><br><span class=\"line\">                +<span class=\"string\">&#x27;市盈率（动态）&#x27;</span>+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"string\">&#x27;市净率&#x27;</span>+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        f.write(single)</span><br><span class=\"line\">        <span class=\"comment\"># 写入股票数据</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> stock_list:</span><br><span class=\"line\">            n+=<span class=\"number\">1</span></span><br><span class=\"line\">            single = <span class=\"built_in\">str</span>(n)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> _ :</span><br><span class=\"line\">                single=single+<span class=\"string\">&#x27;,&#x27;</span>+<span class=\"built_in\">str</span>(val)</span><br><span class=\"line\">            single=single+<span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">            f.write(single)</span><br><span class=\"line\"></span><br><span class=\"line\">get_html(url)</span><br><span class=\"line\">read_file()</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h5 id=\"☆代码解读\"><a href=\"#☆代码解读\" class=\"headerlink\" title=\"☆代码解读\"></a><strong>☆代码解读</strong></h5><ol>\n<li>获取返回股票列表信息的<strong>真实连接</strong></li>\n</ol>\n<ul>\n<li>打开东方财富的 <a href=\"http://quote.eastmoney.com/center/gridlist.html#hs_a_board\">主页</a> ，获取返回值的html，查看源码，<strong>发现其页面里面没有股票信息</strong>,说明是通过生成页面框架，然后动态加载的。</li>\n<li>使用<strong>fiddler或者chrome自带功能</strong>（可以参考我之前的相关文章）,点击“沪深A股”或者点击“翻页”，从fiddler捕获的连接或chrome的<strong>开发者工具（F12）</strong>的Network中找到最新的几个连接，找到真实的连接.<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/get_sl_real_url.png\" class title=\"chrome的F12查看Network信息\"></li>\n<li>分析请求request的header请求，发现关键信息，pn=3，pz=20，猜想是第3页和每页20个的请求参数，其他f1,f2…应该是需要请求哪些数据的参数。那么我们把参数改成pn=1&amp;pz=5000，也就是一次性将A股的4000多只股票全部获取到。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request URL: http://56.push2.eastmoney.com/api/qt/clist/get?cb=jQuery1124034105331658665383_1612251280345&amp;pn=3&amp;pz=20&amp;po=1&amp;np=1&amp;ut=bd1d9ddb04089700cf9c27f6f7426281&amp;fltt=2&amp;invt=2&amp;fid=f3&amp;fs=m:0+t:6,m:0+t:13,m:0+t:80,m:1+t:2,m:1+t:23&amp;fields=f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f12,f13,f14,f15,f16,f17,f18,f20,f21,f23,f24,f25,f22,f11,f62,f128,f136,f115,f152&amp;_=1612251280452</span><br><span class=\"line\">Request Method: GET</span><br><span class=\"line\">Status Code: <span class=\"number\">200</span> OK</span><br><span class=\"line\">Remote Address: <span class=\"number\">101.89</span><span class=\"number\">.224</span><span class=\"number\">.78</span>:<span class=\"number\">80</span></span><br><span class=\"line\">Referrer Policy: strict-origin-when-cross-origin</span><br></pre></td></tr></table></figure>\n<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/sl_real_url_req.png\" class title=\"分析请求信息\"></li>\n</ul>\n<ol start=\"2\">\n<li>访问真实连接，并对返回值进行解析</li>\n</ol>\n<ul>\n<li>分析返回reponse，发现其是一个非常规整json字符串，外面包了一个小括弧，那就非常好办了，通过正则表达式把json字符串取出来，然后使用json包进行解析即可。</li>\n<li>通过页面对比，发现每个返回字段代表的中文含义，例如：f12是股票代码<img src=\"/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%844/sl_real_url_rsp.png\" class title=\"分析返回信息\">\n\n</li>\n</ul>\n<h4 id=\"获取每只股票信息信息\"><a href=\"#获取每只股票信息信息\" class=\"headerlink\" title=\"获取每只股票信息信息\"></a><strong>获取每只股票信息信息</strong></h4><h5 id=\"☆完整代码-1\"><a href=\"#☆完整代码-1\" class=\"headerlink\" title=\"☆完整代码\"></a><strong>☆完整代码</strong></h5><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#读取文件,拼接地址</span></span><br><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;info_fin.csv&#x27;</span>,<span class=\"string\">&#x27;w+&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">f.write(<span class=\"string\">&#x27;股票代码&#x27;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;股票名称&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;最新价&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;最高价&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;最低价&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;今开&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;总手&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;金额&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;外盘&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;量比&quot;</span></span><br><span class=\"line\">    +<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;涨停&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;跌停&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;收益（新）&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;昨收&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;总股本&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;流通股&quot;</span></span><br><span class=\"line\">        +<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;净利润&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;每股净资产&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;总值&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;流值&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;板块&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;地区&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;pe&quot;</span></span><br><span class=\"line\">        +<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;ROE&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;总营收&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;总营收同比&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;净利润同比&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;净利率&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;负债率&quot;</span>+<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;上市时间&quot;</span></span><br><span class=\"line\">        +<span class=\"string\">&quot;,&quot;</span>+<span class=\"string\">&quot;每股未分配利润&quot;</span>+<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;stock.csv&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">fileReader = csv.reader(file)</span><br><span class=\"line\">filedata = <span class=\"built_in\">list</span>(fileReader) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> _,i <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(filedata):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> _==<span class=\"number\">0</span>: <span class=\"comment\"># 跳过文件头</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i[<span class=\"number\">1</span>].startswith(<span class=\"string\">&#x27;6&#x27;</span>):</span><br><span class=\"line\">        addr = <span class=\"string\">&quot;http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&amp;invt=2&amp;fltt=2&amp;fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&amp;secid=1.&quot;</span> + i[<span class=\"number\">1</span>] + <span class=\"string\">&quot;&amp;cb=jQuery11240660569033297794_1610790254977&amp;_=1610790254978&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        addr = <span class=\"string\">&quot;http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&amp;invt=2&amp;fltt=2&amp;fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&amp;secid=0.&quot;</span> + i[<span class=\"number\">1</span>] + <span class=\"string\">&quot;&amp;cb=jQuery11240660569033297794_1610790254977&amp;_=1610790254978&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    re_cont = re.findall(<span class=\"string\">&quot;\\\\((.*?)\\\\);&quot;</span>,requests.get(addr).text,re.S)</span><br><span class=\"line\">    je_cont = json.loads(re_cont[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"comment\">#fin = &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#fin[&#x27;code&#x27;] = je_cont[&#x27;data&#x27;][&#x27;f57&#x27;]</span></span><br><span class=\"line\">    <span class=\"comment\">#fin[&#x27;name&#x27;] = je_cont[&#x27;data&#x27;][&#x27;f58&#x27;]</span></span><br><span class=\"line\">    work = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#print(str(je_cont[&#x27;data&#x27;][&#x27;f43&#x27;]))</span></span><br><span class=\"line\">    <span class=\"comment\">#print(&#x27;12&#x27;)</span></span><br><span class=\"line\">    work = (<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f57&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f58&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span> + <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f43&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f44&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f45&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f46&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f47&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f48&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f49&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f50&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f51&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f52&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f55&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f60&#x27;</span>])+ <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f84&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f85&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f105&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f92&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f116&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f117&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f127&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f128&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f162&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f173&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f183&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f184&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f185&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f187&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f188&#x27;</span>])+<span class=\"string\">&quot;,&quot;</span>+<span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f189&#x27;</span>])</span><br><span class=\"line\">    + <span class=\"string\">&quot;,&quot;</span>+ <span class=\"built_in\">str</span>(je_cont[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;f190&#x27;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    work = work+<span class=\"string\">&#x27;\\n&#x27;</span></span><br><span class=\"line\">    f.write(work) </span><br></pre></td></tr></table></figure>\n</code></pre>\n<h5 id=\"☆代码解读-1\"><a href=\"#☆代码解读-1\" class=\"headerlink\" title=\"☆代码解读\"></a><strong>☆代码解读</strong></h5><ol>\n<li>通过点击详情页面，找到每只股票详细信息访问的连接的规律<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://quote.eastmoney.com/sz******.html</span><br><span class=\"line\">http://quote.eastmoney.com/sh******.html</span><br></pre></td></tr></table></figure></li>\n<li>同样的方法，发现所有的股票详细数据，都是动态加载的。使用<strong>fiddler或者chrome自带功能</strong>，获取真实连接。</li>\n<li>分析规律组装真实连接，“6”开头的请求参数为“1.股票代码”，其他是“0.股票代码”<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">if</span> i[<span class=\"number\">1</span>].startswith(<span class=\"string\">&#x27;6&#x27;</span>):</span><br><span class=\"line\">    addr = <span class=\"string\">&quot;http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&amp;invt=2&amp;fltt=2&amp;fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&amp;secid=1.&quot;</span> + i[<span class=\"number\">1</span>] + <span class=\"string\">&quot;&amp;cb=jQuery11240660569033297794_1610790254977&amp;_=1610790254978&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    addr = <span class=\"string\">&quot;http://push2.eastmoney.com/api/qt/stock/get?ut=fa5fd1943c7b386f172d6893dbfba10b&amp;invt=2&amp;fltt=2&amp;fields=f43,f57,f58,f169,f170,f46,f44,f51,f168,f47,f164,f163,f116,f60,f45,f52,f50,f48,f167,f117,f71,f161,f49,f530,f135,f136,f137,f138,f139,f141,f142,f144,f145,f147,f148,f140,f143,f146,f149,f55,f62,f162,f92,f173,f104,f105,f84,f85,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f107,f111,f86,f177,f78,f110,f262,f263,f264,f267,f268,f250,f251,f252,f253,f254,f255,f256,f257,f258,f266,f269,f270,f271,f273,f274,f275,f127,f199,f128,f193,f196,f194,f195,f197,f80,f280,f281,f282,f284,f285,f286,f287,f292&amp;secid=0.&quot;</span> + i[<span class=\"number\">1</span>] + <span class=\"string\">&quot;&amp;cb=jQuery11240660569033297794_1610790254977&amp;_=1610790254978&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>解析返回reponse，同样的正则表达式+json解析，然后通过页面对比，发现每个返回字段对比的中文含义，例如：f57代表股票代码<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最新价:f43</span><br><span class=\"line\">最高:f44</span><br><span class=\"line\">最低:f45</span><br><span class=\"line\">今开:f46</span><br><span class=\"line\">总手:f47</span><br><span class=\"line\">金额:f48</span><br><span class=\"line\">外盘:f49</span><br><span class=\"line\">量比:f50</span><br><span class=\"line\">涨停:f51</span><br><span class=\"line\">跌停:f52</span><br><span class=\"line\">收益（三）: f55</span><br><span class=\"line\">股票代码:f57</span><br><span class=\"line\">股票名称:f58</span><br><span class=\"line\">昨收:f60</span><br><span class=\"line\">总股本:f84</span><br><span class=\"line\">流通股:f85</span><br><span class=\"line\">净利润:f105</span><br><span class=\"line\">每股净资产:f92</span><br><span class=\"line\">总值:f116</span><br><span class=\"line\">流值:f117</span><br><span class=\"line\">板块：f127</span><br><span class=\"line\">地区：f128</span><br><span class=\"line\">pe（动）:f162</span><br><span class=\"line\">ROE:f173</span><br><span class=\"line\">总营收:f183</span><br><span class=\"line\">总营收同比:f184</span><br><span class=\"line\">净利润同比:f185</span><br><span class=\"line\">净利率:f187</span><br><span class=\"line\">负债率:f188</span><br><span class=\"line\">上市时间:f189</span><br><span class=\"line\">每股未分配利润:f190</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"【量化投资】05.读取csv文件保存到mysql数据库","date":"2021-02-03T15:01:56.000Z","_content":"\n### **【老博客地址】**\n&emsp;&emsp;[【CSDN】博客主页](https://blog.csdn.net/MissYourKiss/)\n&emsp;&emsp;[【量化投资】00.资源篇——持续更新](https://blog.csdn.net/MissYourKiss/article/details/111321871)\n&emsp;&emsp;[【量化投资】01.基本概念](https://blog.csdn.net/MissYourKiss/article/details/111300459)\n&emsp;&emsp;[【量化投资】02.数据接口初探——excel读取新浪股票api数据](https://blog.csdn.net/MissYourKiss/article/details/111326137)\n&ensp;&ensp;&ensp;&ensp;[【量化投资】03.量化工程abu学习之量化基础（1/3）](https://blog.csdn.net/MissYourKiss/article/details/111472606)\n\n### **【目标】**\n&emsp;&emsp;接上文，将[【量化投资】04.使用python爬取股票基础数据](https://unclevicky.github.io/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84/)中爬取的数据保存到mysql数据库中\n\n### **【最终效果】**\n{% asset_img ts_stock_basics.png 股票列表数据库Navicat截图 %}\n\n### **【准备工作】**\n+ 安装mysql数据库（本地或docker方式都可以）\n+ 安装python操作mysql所需要的包\n  + ```pip install pymysql```\n+ （选）安装Navicat客户端，用以查询数据库\n\n### **【创建mysql数据库表】**\n ```sql\nCREATE TABLE ts_stock_basics(code varchar(255) COMMENT '代码',name varchar(255) COMMENT '名称',industry varchar(255) COMMENT '所属行业',area varchar(255) COMMENT '地区',pe varchar(255) COMMENT '市盈率',outstanding varchar(255) COMMENT '流通股本(亿)',totals varchar(255) COMMENT '总股本(亿)',totalAssets varchar(255) COMMENT '总资产(万)',liquidAssets varchar(255) COMMENT '流动资产',fixedAssets varchar(255) COMMENT '固定资产',reserved varchar(255) COMMENT '公积金',reservedPerShare varchar(255) COMMENT '每股公积金',esp varchar(255) COMMENT '每股收益',bvps varchar(255) COMMENT '每股净资',pb varchar(255) COMMENT '市净率',timeToMarket varchar(255) COMMENT '上市日期',undp varchar(255) COMMENT '未分利润',perundp varchar(255) COMMENT '每股未分配',rev varchar(255) COMMENT '收入同比(%)',profit varchar(255) COMMENT '利润同比(%)',gpr varchar(255) COMMENT '毛利率(%)',npr varchar(255) COMMENT '净利润率(%)',holders varchar(255) COMMENT '股东人数',PRIMARY KEY (code) ) COMMENT='股票列表';\n```\n### **【完整代码：读取csv文件，并插入到数据库】**\n**【重要】需要更改自己的数据库地址、用户名和密码**\n```python\nimport pymysql\nimport csv\n\nMYSQL_HOST='127.0.0.1'\nMYSQL_USER='root'\nMYSQL_PWD='mariadb'\nMYSQL_DB='stock_data'\n\n# 建立数据连接\ndef conn():\n    db = pymysql.connect(MYSQL_HOST, MYSQL_USER, MYSQL_PWD, MYSQL_DB, port=3306, charset=\"utf8\")\n    return db\n\n# 插入数据\ndef insertTSB():\n   \n    # 读取csv文件\n    file = open('stock_info.csv',encoding='utf-8')\n    fileReader = csv.reader(file)\n    filedata = list(fileReader) \n    db = conn()\n    c = db.cursor()\n\n    # 有些为空的数据，csv自动变为-, 需要处理掉， 否则插入数据库会报错\n    for row in filedata:\n        for _ in range(len(row)):\n            if row[_] == '-':\n                row[_]='\\'\\''\n    \n    for i,val in enumerate(filedata):\n        if i==0: # 跳过文件头\n            continue\n        # 组装插入语句\n        # 股票代码 股票名称 行业 地区 pe 流通股本 总股本 总资产 流动资产 上市时间 每股未分配利润 利润同比 净利润率\n        sql = \"INSERT INTO ts_stock_basics(code, name, industry, area, pe, \\\n        outstanding, totals, totalAssets, liquidAssets, timeToMarket, perundp, profit, npr) \\\n       VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s )\" % \\\n       (str(val[0]).zfill(6), '\\''+val[1]+'\\'', '\\''+val[20]+'\\'',  '\\''+val[21]+'\\'', val[22], val[15], val[14], val[18], val[19], val[29], val[30], val[26], val[27])\n        \n        try:\n            # 执行语句\n            c.execute(sql)\n            # 提交\n            db.commit()\n        except:\n            # 如果出错，把错误语句打印出来，方便分析\n            print(sql)\n            # 如果出错需要回滚\n            db.rollback()\n    # 一定不要忘了关闭数据库连接\n    db.close()\n\n# 删除所有数据    \ndef deleteTSB():\n    db = conn()\n    # 使用cursor()方法获取操作游标 \n    cursor = db.cursor()\n\n    # SQL 删除语句\n    sql = \"DELETE FROM ts_stock_basics WHERE 1=1 \"\n    try:\n       # 执行SQL语句\n       cursor.execute(sql)\n       # 提交修改\n       db.commit()\n    except:\n       # 发生错误时回滚\n       db.rollback()\n\n    # 关闭连接\n    db.close()\n    \n#deleteTSB() # 如果需要重新插入，用此方法删除数据库表内容\ninsertTSB()\n```\n\n","source":"_posts/2021-02-03-量化投资5.md","raw":"---\ntitle: 【量化投资】05.读取csv文件保存到mysql数据库\ndate: 2021-02-03 23:01:56\ncategories:\n- [财富, 量化投资, 技术工具, 基础]\n- [基础教程, 量化投资]\ntags:\n- 量化投资\n- 数据获取\n- 技术\n- python\n- mysql\n---\n\n### **【老博客地址】**\n&emsp;&emsp;[【CSDN】博客主页](https://blog.csdn.net/MissYourKiss/)\n&emsp;&emsp;[【量化投资】00.资源篇——持续更新](https://blog.csdn.net/MissYourKiss/article/details/111321871)\n&emsp;&emsp;[【量化投资】01.基本概念](https://blog.csdn.net/MissYourKiss/article/details/111300459)\n&emsp;&emsp;[【量化投资】02.数据接口初探——excel读取新浪股票api数据](https://blog.csdn.net/MissYourKiss/article/details/111326137)\n&ensp;&ensp;&ensp;&ensp;[【量化投资】03.量化工程abu学习之量化基础（1/3）](https://blog.csdn.net/MissYourKiss/article/details/111472606)\n\n### **【目标】**\n&emsp;&emsp;接上文，将[【量化投资】04.使用python爬取股票基础数据](https://unclevicky.github.io/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84/)中爬取的数据保存到mysql数据库中\n\n### **【最终效果】**\n{% asset_img ts_stock_basics.png 股票列表数据库Navicat截图 %}\n\n### **【准备工作】**\n+ 安装mysql数据库（本地或docker方式都可以）\n+ 安装python操作mysql所需要的包\n  + ```pip install pymysql```\n+ （选）安装Navicat客户端，用以查询数据库\n\n### **【创建mysql数据库表】**\n ```sql\nCREATE TABLE ts_stock_basics(code varchar(255) COMMENT '代码',name varchar(255) COMMENT '名称',industry varchar(255) COMMENT '所属行业',area varchar(255) COMMENT '地区',pe varchar(255) COMMENT '市盈率',outstanding varchar(255) COMMENT '流通股本(亿)',totals varchar(255) COMMENT '总股本(亿)',totalAssets varchar(255) COMMENT '总资产(万)',liquidAssets varchar(255) COMMENT '流动资产',fixedAssets varchar(255) COMMENT '固定资产',reserved varchar(255) COMMENT '公积金',reservedPerShare varchar(255) COMMENT '每股公积金',esp varchar(255) COMMENT '每股收益',bvps varchar(255) COMMENT '每股净资',pb varchar(255) COMMENT '市净率',timeToMarket varchar(255) COMMENT '上市日期',undp varchar(255) COMMENT '未分利润',perundp varchar(255) COMMENT '每股未分配',rev varchar(255) COMMENT '收入同比(%)',profit varchar(255) COMMENT '利润同比(%)',gpr varchar(255) COMMENT '毛利率(%)',npr varchar(255) COMMENT '净利润率(%)',holders varchar(255) COMMENT '股东人数',PRIMARY KEY (code) ) COMMENT='股票列表';\n```\n### **【完整代码：读取csv文件，并插入到数据库】**\n**【重要】需要更改自己的数据库地址、用户名和密码**\n```python\nimport pymysql\nimport csv\n\nMYSQL_HOST='127.0.0.1'\nMYSQL_USER='root'\nMYSQL_PWD='mariadb'\nMYSQL_DB='stock_data'\n\n# 建立数据连接\ndef conn():\n    db = pymysql.connect(MYSQL_HOST, MYSQL_USER, MYSQL_PWD, MYSQL_DB, port=3306, charset=\"utf8\")\n    return db\n\n# 插入数据\ndef insertTSB():\n   \n    # 读取csv文件\n    file = open('stock_info.csv',encoding='utf-8')\n    fileReader = csv.reader(file)\n    filedata = list(fileReader) \n    db = conn()\n    c = db.cursor()\n\n    # 有些为空的数据，csv自动变为-, 需要处理掉， 否则插入数据库会报错\n    for row in filedata:\n        for _ in range(len(row)):\n            if row[_] == '-':\n                row[_]='\\'\\''\n    \n    for i,val in enumerate(filedata):\n        if i==0: # 跳过文件头\n            continue\n        # 组装插入语句\n        # 股票代码 股票名称 行业 地区 pe 流通股本 总股本 总资产 流动资产 上市时间 每股未分配利润 利润同比 净利润率\n        sql = \"INSERT INTO ts_stock_basics(code, name, industry, area, pe, \\\n        outstanding, totals, totalAssets, liquidAssets, timeToMarket, perundp, profit, npr) \\\n       VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s )\" % \\\n       (str(val[0]).zfill(6), '\\''+val[1]+'\\'', '\\''+val[20]+'\\'',  '\\''+val[21]+'\\'', val[22], val[15], val[14], val[18], val[19], val[29], val[30], val[26], val[27])\n        \n        try:\n            # 执行语句\n            c.execute(sql)\n            # 提交\n            db.commit()\n        except:\n            # 如果出错，把错误语句打印出来，方便分析\n            print(sql)\n            # 如果出错需要回滚\n            db.rollback()\n    # 一定不要忘了关闭数据库连接\n    db.close()\n\n# 删除所有数据    \ndef deleteTSB():\n    db = conn()\n    # 使用cursor()方法获取操作游标 \n    cursor = db.cursor()\n\n    # SQL 删除语句\n    sql = \"DELETE FROM ts_stock_basics WHERE 1=1 \"\n    try:\n       # 执行SQL语句\n       cursor.execute(sql)\n       # 提交修改\n       db.commit()\n    except:\n       # 发生错误时回滚\n       db.rollback()\n\n    # 关闭连接\n    db.close()\n    \n#deleteTSB() # 如果需要重新插入，用此方法删除数据库表内容\ninsertTSB()\n```\n\n","slug":"量化投资5","published":1,"updated":"2021-02-07T02:41:23.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl680ghed000ndwq8dhglg3un","content":"<h3 id=\"【老博客地址】\"><a href=\"#【老博客地址】\" class=\"headerlink\" title=\"【老博客地址】\"></a><strong>【老博客地址】</strong></h3><p>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/\">【CSDN】博客主页</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111321871\">【量化投资】00.资源篇——持续更新</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111300459\">【量化投资】01.基本概念</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111326137\">【量化投资】02.数据接口初探——excel读取新浪股票api数据</a><br>&ensp;&ensp;&ensp;&ensp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111472606\">【量化投资】03.量化工程abu学习之量化基础（1/3）</a></p>\n<h3 id=\"【目标】\"><a href=\"#【目标】\" class=\"headerlink\" title=\"【目标】\"></a><strong>【目标】</strong></h3><p>&emsp;&emsp;接上文，将<a href=\"https://unclevicky.github.io/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84/\">【量化投资】04.使用python爬取股票基础数据</a>中爬取的数据保存到mysql数据库中</p>\n<h3 id=\"【最终效果】\"><a href=\"#【最终效果】\" class=\"headerlink\" title=\"【最终效果】\"></a><strong>【最终效果】</strong></h3><img src=\"/rabbitBear/2021/02/03/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%845/ts_stock_basics.png\" class title=\"股票列表数据库Navicat截图\">\n\n<h3 id=\"【准备工作】\"><a href=\"#【准备工作】\" class=\"headerlink\" title=\"【准备工作】\"></a><strong>【准备工作】</strong></h3><ul>\n<li>安装mysql数据库（本地或docker方式都可以）</li>\n<li>安装python操作mysql所需要的包<ul>\n<li><code>pip install pymysql</code></li>\n</ul>\n</li>\n<li>（选）安装Navicat客户端，用以查询数据库</li>\n</ul>\n<h3 id=\"【创建mysql数据库表】\"><a href=\"#【创建mysql数据库表】\" class=\"headerlink\" title=\"【创建mysql数据库表】\"></a><strong>【创建mysql数据库表】</strong></h3> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ts_stock_basics(code <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;代码&#x27;</span>,name <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;名称&#x27;</span>,industry <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;所属行业&#x27;</span>,area <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;地区&#x27;</span>,pe <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;市盈率&#x27;</span>,outstanding <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;流通股本(亿)&#x27;</span>,totals <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;总股本(亿)&#x27;</span>,totalAssets <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;总资产(万)&#x27;</span>,liquidAssets <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;流动资产&#x27;</span>,fixedAssets <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;固定资产&#x27;</span>,reserved <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;公积金&#x27;</span>,reservedPerShare <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;每股公积金&#x27;</span>,esp <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;每股收益&#x27;</span>,bvps <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;每股净资&#x27;</span>,pb <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;市净率&#x27;</span>,timeToMarket <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;上市日期&#x27;</span>,undp <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;未分利润&#x27;</span>,perundp <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;每股未分配&#x27;</span>,rev <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;收入同比(%)&#x27;</span>,profit <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;利润同比(%)&#x27;</span>,gpr <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;毛利率(%)&#x27;</span>,npr <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;净利润率(%)&#x27;</span>,holders <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;股东人数&#x27;</span>,<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (code) ) COMMENT<span class=\"operator\">=</span><span class=\"string\">&#x27;股票列表&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"【完整代码：读取csv文件，并插入到数据库】\"><a href=\"#【完整代码：读取csv文件，并插入到数据库】\" class=\"headerlink\" title=\"【完整代码：读取csv文件，并插入到数据库】\"></a><strong>【完整代码：读取csv文件，并插入到数据库】</strong></h3><p><strong>【重要】需要更改自己的数据库地址、用户名和密码</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"></span><br><span class=\"line\">MYSQL_HOST=<span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">MYSQL_USER=<span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">MYSQL_PWD=<span class=\"string\">&#x27;mariadb&#x27;</span></span><br><span class=\"line\">MYSQL_DB=<span class=\"string\">&#x27;stock_data&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立数据连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">conn</span>():</span></span><br><span class=\"line\">    db = pymysql.connect(MYSQL_HOST, MYSQL_USER, MYSQL_PWD, MYSQL_DB, port=<span class=\"number\">3306</span>, charset=<span class=\"string\">&quot;utf8&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertTSB</span>():</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\"># 读取csv文件</span></span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;stock_info.csv&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    fileReader = csv.reader(file)</span><br><span class=\"line\">    filedata = <span class=\"built_in\">list</span>(fileReader) </span><br><span class=\"line\">    db = conn()</span><br><span class=\"line\">    c = db.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 有些为空的数据，csv自动变为-, 需要处理掉， 否则插入数据库会报错</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> filedata:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(row)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> row[_] == <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">                row[_]=<span class=\"string\">&#x27;\\&#x27;\\&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i,val <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(filedata):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i==<span class=\"number\">0</span>: <span class=\"comment\"># 跳过文件头</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"comment\"># 组装插入语句</span></span><br><span class=\"line\">        <span class=\"comment\"># 股票代码 股票名称 行业 地区 pe 流通股本 总股本 总资产 流动资产 上市时间 每股未分配利润 利润同比 净利润率</span></span><br><span class=\"line\">        sql = <span class=\"string\">&quot;INSERT INTO ts_stock_basics(code, name, industry, area, pe, \\</span></span><br><span class=\"line\"><span class=\"string\">        outstanding, totals, totalAssets, liquidAssets, timeToMarket, perundp, profit, npr) \\</span></span><br><span class=\"line\"><span class=\"string\">       VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s )&quot;</span> % \\</span><br><span class=\"line\">       (<span class=\"built_in\">str</span>(val[<span class=\"number\">0</span>]).zfill(<span class=\"number\">6</span>), <span class=\"string\">&#x27;\\&#x27;&#x27;</span>+val[<span class=\"number\">1</span>]+<span class=\"string\">&#x27;\\&#x27;&#x27;</span>, <span class=\"string\">&#x27;\\&#x27;&#x27;</span>+val[<span class=\"number\">20</span>]+<span class=\"string\">&#x27;\\&#x27;&#x27;</span>,  <span class=\"string\">&#x27;\\&#x27;&#x27;</span>+val[<span class=\"number\">21</span>]+<span class=\"string\">&#x27;\\&#x27;&#x27;</span>, val[<span class=\"number\">22</span>], val[<span class=\"number\">15</span>], val[<span class=\"number\">14</span>], val[<span class=\"number\">18</span>], val[<span class=\"number\">19</span>], val[<span class=\"number\">29</span>], val[<span class=\"number\">30</span>], val[<span class=\"number\">26</span>], val[<span class=\"number\">27</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 执行语句</span></span><br><span class=\"line\">            c.execute(sql)</span><br><span class=\"line\">            <span class=\"comment\"># 提交</span></span><br><span class=\"line\">            db.commit()</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 如果出错，把错误语句打印出来，方便分析</span></span><br><span class=\"line\">            print(sql)</span><br><span class=\"line\">            <span class=\"comment\"># 如果出错需要回滚</span></span><br><span class=\"line\">            db.rollback()</span><br><span class=\"line\">    <span class=\"comment\"># 一定不要忘了关闭数据库连接</span></span><br><span class=\"line\">    db.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除所有数据    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deleteTSB</span>():</span></span><br><span class=\"line\">    db = conn()</span><br><span class=\"line\">    <span class=\"comment\"># 使用cursor()方法获取操作游标 </span></span><br><span class=\"line\">    cursor = db.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># SQL 删除语句</span></span><br><span class=\"line\">    sql = <span class=\"string\">&quot;DELETE FROM ts_stock_basics WHERE 1=1 &quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">       <span class=\"comment\"># 执行SQL语句</span></span><br><span class=\"line\">       cursor.execute(sql)</span><br><span class=\"line\">       <span class=\"comment\"># 提交修改</span></span><br><span class=\"line\">       db.commit()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">       <span class=\"comment\"># 发生错误时回滚</span></span><br><span class=\"line\">       db.rollback()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">    db.close()</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#deleteTSB() # 如果需要重新插入，用此方法删除数据库表内容</span></span><br><span class=\"line\">insertTSB()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h3 id=\"【老博客地址】\"><a href=\"#【老博客地址】\" class=\"headerlink\" title=\"【老博客地址】\"></a><strong>【老博客地址】</strong></h3><p>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/\">【CSDN】博客主页</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111321871\">【量化投资】00.资源篇——持续更新</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111300459\">【量化投资】01.基本概念</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111326137\">【量化投资】02.数据接口初探——excel读取新浪股票api数据</a><br>&ensp;&ensp;&ensp;&ensp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/111472606\">【量化投资】03.量化工程abu学习之量化基础（1/3）</a></p>\n<h3 id=\"【目标】\"><a href=\"#【目标】\" class=\"headerlink\" title=\"【目标】\"></a><strong>【目标】</strong></h3><p>&emsp;&emsp;接上文，将<a href=\"https://unclevicky.github.io/rabbitBear/2021/02/01/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84/\">【量化投资】04.使用python爬取股票基础数据</a>中爬取的数据保存到mysql数据库中</p>\n<h3 id=\"【最终效果】\"><a href=\"#【最终效果】\" class=\"headerlink\" title=\"【最终效果】\"></a><strong>【最终效果】</strong></h3><img src=\"/rabbitBear/2021/02/03/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%845/ts_stock_basics.png\" class title=\"股票列表数据库Navicat截图\">\n\n<h3 id=\"【准备工作】\"><a href=\"#【准备工作】\" class=\"headerlink\" title=\"【准备工作】\"></a><strong>【准备工作】</strong></h3><ul>\n<li>安装mysql数据库（本地或docker方式都可以）</li>\n<li>安装python操作mysql所需要的包<ul>\n<li><code>pip install pymysql</code></li>\n</ul>\n</li>\n<li>（选）安装Navicat客户端，用以查询数据库</li>\n</ul>\n<h3 id=\"【创建mysql数据库表】\"><a href=\"#【创建mysql数据库表】\" class=\"headerlink\" title=\"【创建mysql数据库表】\"></a><strong>【创建mysql数据库表】</strong></h3> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ts_stock_basics(code <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;代码&#x27;</span>,name <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;名称&#x27;</span>,industry <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;所属行业&#x27;</span>,area <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;地区&#x27;</span>,pe <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;市盈率&#x27;</span>,outstanding <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;流通股本(亿)&#x27;</span>,totals <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;总股本(亿)&#x27;</span>,totalAssets <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;总资产(万)&#x27;</span>,liquidAssets <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;流动资产&#x27;</span>,fixedAssets <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;固定资产&#x27;</span>,reserved <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;公积金&#x27;</span>,reservedPerShare <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;每股公积金&#x27;</span>,esp <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;每股收益&#x27;</span>,bvps <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;每股净资&#x27;</span>,pb <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;市净率&#x27;</span>,timeToMarket <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;上市日期&#x27;</span>,undp <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;未分利润&#x27;</span>,perundp <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;每股未分配&#x27;</span>,rev <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;收入同比(%)&#x27;</span>,profit <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;利润同比(%)&#x27;</span>,gpr <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;毛利率(%)&#x27;</span>,npr <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;净利润率(%)&#x27;</span>,holders <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;股东人数&#x27;</span>,<span class=\"keyword\">PRIMARY</span> <span class=\"keyword\">KEY</span> (code) ) COMMENT<span class=\"operator\">=</span><span class=\"string\">&#x27;股票列表&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"【完整代码：读取csv文件，并插入到数据库】\"><a href=\"#【完整代码：读取csv文件，并插入到数据库】\" class=\"headerlink\" title=\"【完整代码：读取csv文件，并插入到数据库】\"></a><strong>【完整代码：读取csv文件，并插入到数据库】</strong></h3><p><strong>【重要】需要更改自己的数据库地址、用户名和密码</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"></span><br><span class=\"line\">MYSQL_HOST=<span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">MYSQL_USER=<span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">MYSQL_PWD=<span class=\"string\">&#x27;mariadb&#x27;</span></span><br><span class=\"line\">MYSQL_DB=<span class=\"string\">&#x27;stock_data&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立数据连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">conn</span>():</span></span><br><span class=\"line\">    db = pymysql.connect(MYSQL_HOST, MYSQL_USER, MYSQL_PWD, MYSQL_DB, port=<span class=\"number\">3306</span>, charset=<span class=\"string\">&quot;utf8&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertTSB</span>():</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\"># 读取csv文件</span></span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;stock_info.csv&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    fileReader = csv.reader(file)</span><br><span class=\"line\">    filedata = <span class=\"built_in\">list</span>(fileReader) </span><br><span class=\"line\">    db = conn()</span><br><span class=\"line\">    c = db.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 有些为空的数据，csv自动变为-, 需要处理掉， 否则插入数据库会报错</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> filedata:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(row)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> row[_] == <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">                row[_]=<span class=\"string\">&#x27;\\&#x27;\\&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i,val <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(filedata):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i==<span class=\"number\">0</span>: <span class=\"comment\"># 跳过文件头</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"comment\"># 组装插入语句</span></span><br><span class=\"line\">        <span class=\"comment\"># 股票代码 股票名称 行业 地区 pe 流通股本 总股本 总资产 流动资产 上市时间 每股未分配利润 利润同比 净利润率</span></span><br><span class=\"line\">        sql = <span class=\"string\">&quot;INSERT INTO ts_stock_basics(code, name, industry, area, pe, \\</span></span><br><span class=\"line\"><span class=\"string\">        outstanding, totals, totalAssets, liquidAssets, timeToMarket, perundp, profit, npr) \\</span></span><br><span class=\"line\"><span class=\"string\">       VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s )&quot;</span> % \\</span><br><span class=\"line\">       (<span class=\"built_in\">str</span>(val[<span class=\"number\">0</span>]).zfill(<span class=\"number\">6</span>), <span class=\"string\">&#x27;\\&#x27;&#x27;</span>+val[<span class=\"number\">1</span>]+<span class=\"string\">&#x27;\\&#x27;&#x27;</span>, <span class=\"string\">&#x27;\\&#x27;&#x27;</span>+val[<span class=\"number\">20</span>]+<span class=\"string\">&#x27;\\&#x27;&#x27;</span>,  <span class=\"string\">&#x27;\\&#x27;&#x27;</span>+val[<span class=\"number\">21</span>]+<span class=\"string\">&#x27;\\&#x27;&#x27;</span>, val[<span class=\"number\">22</span>], val[<span class=\"number\">15</span>], val[<span class=\"number\">14</span>], val[<span class=\"number\">18</span>], val[<span class=\"number\">19</span>], val[<span class=\"number\">29</span>], val[<span class=\"number\">30</span>], val[<span class=\"number\">26</span>], val[<span class=\"number\">27</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 执行语句</span></span><br><span class=\"line\">            c.execute(sql)</span><br><span class=\"line\">            <span class=\"comment\"># 提交</span></span><br><span class=\"line\">            db.commit()</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 如果出错，把错误语句打印出来，方便分析</span></span><br><span class=\"line\">            print(sql)</span><br><span class=\"line\">            <span class=\"comment\"># 如果出错需要回滚</span></span><br><span class=\"line\">            db.rollback()</span><br><span class=\"line\">    <span class=\"comment\"># 一定不要忘了关闭数据库连接</span></span><br><span class=\"line\">    db.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除所有数据    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deleteTSB</span>():</span></span><br><span class=\"line\">    db = conn()</span><br><span class=\"line\">    <span class=\"comment\"># 使用cursor()方法获取操作游标 </span></span><br><span class=\"line\">    cursor = db.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># SQL 删除语句</span></span><br><span class=\"line\">    sql = <span class=\"string\">&quot;DELETE FROM ts_stock_basics WHERE 1=1 &quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">       <span class=\"comment\"># 执行SQL语句</span></span><br><span class=\"line\">       cursor.execute(sql)</span><br><span class=\"line\">       <span class=\"comment\"># 提交修改</span></span><br><span class=\"line\">       db.commit()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">       <span class=\"comment\"># 发生错误时回滚</span></span><br><span class=\"line\">       db.rollback()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">    db.close()</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#deleteTSB() # 如果需要重新插入，用此方法删除数据库表内容</span></span><br><span class=\"line\">insertTSB()</span><br></pre></td></tr></table></figure>\n"},{"title":"兔子和大熊聊《资治通鉴》（导读）","date":"2021-02-17T12:56:43.000Z","_content":"\n### **创作背景**</p>\n春节期间，兔子在读《资治通鉴》，看到书里的语言，备受鼓舞，想着在互联网平台上和大家分享这本书里的新知。和大熊说罢，我们一拍即合，将把对《资治通鉴》的解读分为众多系列，以双人音频的方式放在喜马拉雅上。</p>\n以下为第一部分——导读。\n\n### **导读**</p>\n大熊/兔子：读史明智、鉴往知来。我是兔子/大熊。</p>\n大熊：欢迎大家来到兔子和大熊讲《资治通鉴》，以后的节目将由我们俩为大家解读《资治通鉴》这本书里的干货。</p>\n兔子：那大熊老师，我们今天和大家聊点什么呢？</p>\n大熊：由于今天是我们第一节课，那我们就从这本书的背景干货开始聊起。整本书，一共294卷，上可以追溯到战国初期韩赵魏三家分晋，下至宋太祖赵匡胤建国前夕，囊括了周秦两汉、魏晋南北朝、隋唐五代各朝的历史，整个时间跨度有1362年。</p>\n兔子：整本书的正文有三百多万字，司马光参考了三百多部著作，用了19年的时间才完成。</p>\n大熊：没错，那司马光为什么要写这本书呢？你觉得有哪些原因？</p>\n兔子：嗯，我们都知道“司马光砸缸”的故事，所以我想这么聪明的孩子，写书是他表达自己思想的一种途径，或者说是出于自身的喜好吧。</p>\n大熊：没错没错，我们都知道”砸缸“那个故事，其实司马光编撰这本书，一方面是出自自己的喜好和责任感，另一方面也和当时的政治环境有关。我们知道，北宋前期，提倡文治教化，鼓励大家多去总结历史经验和得失，所以在当时有很多学者都在做一件事，就是翻腾之前的史料，进行总结。</p>\n兔子：那这样说的话司马光写这本书，可以说是“奉敕”编撰的。所以在司马光和他的团队完成书稿，拿给皇帝看时，当时的皇帝宋神宗认为，这本书鉴于往事，有资于治道，故赐名《资治通鉴》。</p>\n大熊：没错，也正因为司马光的惊世情怀，才使得《资治通鉴》这本书得以经世致用。书里的内容是按照时间顺序编撰的，挑选了政治上和军事上的重要的人物、重要的事件。最精彩的地方是，在这每一部分之后，作者都有自己一段盖棺定论的评价，以提供给读者们借鉴。</p>\n兔子：所以这本书里可以看到故事、也可看到评述的语言，近代学者曾国藩在向众人推举这本书时，说这是经世治国最好的书。因为它不光讲道理，还通晓权利变更，还讲了如何操作，可谓是精彩纷呈。</p>\n大熊：没错，《资治通鉴》得到了后世学者和帝王的交口称誉，作为一本史书，它的价值可以从两方面去评价：一个是史料的价值，一个是史著的价值。作为历史材料，《资治通鉴》中隋唐五代的部分，是很难得的历史记载；同样，作为一部史学巨著，它也具有不可替代的阅读鉴赏价值。</p>\n兔子：司马光在编撰的时候参考了300多部著作，还特地又写了另外一本书，叫《考异》，记载从哪里搜罗来的史料，并进行考订。这才是学术研究的初心啊，讲求史料真实。</p>\n大熊：所以这本书，真的是非常值得我们仔细去品味。</p>\n兔子：大熊，你读《资治通鉴》，收获了哪些呢？</p>\n大熊：借用某先贤的一句话，读资治通鉴“可以自淑，可以诲人，可以知道而乐“。自淑就是提升自己，诲人就是可以和人分享，知道而乐就是知道为人之道、处世之道，感到很愉快，很快乐。我想，这也是我们大多数人读《资治通鉴》的宗旨吧。</p>\n兔子：没错，前段时间我有把《资治通鉴》的一些读后感发布到我的公众号上，有朋友和我留言说，古人就已想到了现代人遇到的问题的解决之路，真是智慧。所以我会感到，别人从我我分享的东西里获取新知，真是十分幸福的事情。</p>\n大熊：当然啦，历史是具体的，但道理是抽象的，所以对待很多历史事件和人物，不同人的看法也不同。也欢迎大家在以后的节目里可以发表自己的想法，我们可以一同讨论、共同进步。</p>\n兔子：大熊和兔子都是国学迷，也非常想通过分享对《资治通鉴》的个人解读，认识更多关注国学经典的你们。记得点击音频右方的“免费订阅”哦，我们下期节目见。</p>\n大熊：下期节目见。</p>  \n\n\n\n[导读音频-喜马拉雅主页](http://xima.tv/g4nS16?_sonic=0)\n\n\n","source":"_posts/2021-02-17-preparation.md","raw":"---\ntitle: 兔子和大熊聊《资治通鉴》（导读）\ndate: 2021-02-17 20:56:43\ncategories:\n- [历史,中国史]\n\ntags:\n- 资治通鉴\n\n---\n\n### **创作背景**</p>\n春节期间，兔子在读《资治通鉴》，看到书里的语言，备受鼓舞，想着在互联网平台上和大家分享这本书里的新知。和大熊说罢，我们一拍即合，将把对《资治通鉴》的解读分为众多系列，以双人音频的方式放在喜马拉雅上。</p>\n以下为第一部分——导读。\n\n### **导读**</p>\n大熊/兔子：读史明智、鉴往知来。我是兔子/大熊。</p>\n大熊：欢迎大家来到兔子和大熊讲《资治通鉴》，以后的节目将由我们俩为大家解读《资治通鉴》这本书里的干货。</p>\n兔子：那大熊老师，我们今天和大家聊点什么呢？</p>\n大熊：由于今天是我们第一节课，那我们就从这本书的背景干货开始聊起。整本书，一共294卷，上可以追溯到战国初期韩赵魏三家分晋，下至宋太祖赵匡胤建国前夕，囊括了周秦两汉、魏晋南北朝、隋唐五代各朝的历史，整个时间跨度有1362年。</p>\n兔子：整本书的正文有三百多万字，司马光参考了三百多部著作，用了19年的时间才完成。</p>\n大熊：没错，那司马光为什么要写这本书呢？你觉得有哪些原因？</p>\n兔子：嗯，我们都知道“司马光砸缸”的故事，所以我想这么聪明的孩子，写书是他表达自己思想的一种途径，或者说是出于自身的喜好吧。</p>\n大熊：没错没错，我们都知道”砸缸“那个故事，其实司马光编撰这本书，一方面是出自自己的喜好和责任感，另一方面也和当时的政治环境有关。我们知道，北宋前期，提倡文治教化，鼓励大家多去总结历史经验和得失，所以在当时有很多学者都在做一件事，就是翻腾之前的史料，进行总结。</p>\n兔子：那这样说的话司马光写这本书，可以说是“奉敕”编撰的。所以在司马光和他的团队完成书稿，拿给皇帝看时，当时的皇帝宋神宗认为，这本书鉴于往事，有资于治道，故赐名《资治通鉴》。</p>\n大熊：没错，也正因为司马光的惊世情怀，才使得《资治通鉴》这本书得以经世致用。书里的内容是按照时间顺序编撰的，挑选了政治上和军事上的重要的人物、重要的事件。最精彩的地方是，在这每一部分之后，作者都有自己一段盖棺定论的评价，以提供给读者们借鉴。</p>\n兔子：所以这本书里可以看到故事、也可看到评述的语言，近代学者曾国藩在向众人推举这本书时，说这是经世治国最好的书。因为它不光讲道理，还通晓权利变更，还讲了如何操作，可谓是精彩纷呈。</p>\n大熊：没错，《资治通鉴》得到了后世学者和帝王的交口称誉，作为一本史书，它的价值可以从两方面去评价：一个是史料的价值，一个是史著的价值。作为历史材料，《资治通鉴》中隋唐五代的部分，是很难得的历史记载；同样，作为一部史学巨著，它也具有不可替代的阅读鉴赏价值。</p>\n兔子：司马光在编撰的时候参考了300多部著作，还特地又写了另外一本书，叫《考异》，记载从哪里搜罗来的史料，并进行考订。这才是学术研究的初心啊，讲求史料真实。</p>\n大熊：所以这本书，真的是非常值得我们仔细去品味。</p>\n兔子：大熊，你读《资治通鉴》，收获了哪些呢？</p>\n大熊：借用某先贤的一句话，读资治通鉴“可以自淑，可以诲人，可以知道而乐“。自淑就是提升自己，诲人就是可以和人分享，知道而乐就是知道为人之道、处世之道，感到很愉快，很快乐。我想，这也是我们大多数人读《资治通鉴》的宗旨吧。</p>\n兔子：没错，前段时间我有把《资治通鉴》的一些读后感发布到我的公众号上，有朋友和我留言说，古人就已想到了现代人遇到的问题的解决之路，真是智慧。所以我会感到，别人从我我分享的东西里获取新知，真是十分幸福的事情。</p>\n大熊：当然啦，历史是具体的，但道理是抽象的，所以对待很多历史事件和人物，不同人的看法也不同。也欢迎大家在以后的节目里可以发表自己的想法，我们可以一同讨论、共同进步。</p>\n兔子：大熊和兔子都是国学迷，也非常想通过分享对《资治通鉴》的个人解读，认识更多关注国学经典的你们。记得点击音频右方的“免费订阅”哦，我们下期节目见。</p>\n大熊：下期节目见。</p>  \n\n\n\n[导读音频-喜马拉雅主页](http://xima.tv/g4nS16?_sonic=0)\n\n\n","slug":"preparation","published":1,"updated":"2021-02-17T13:31:32.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl680ghee000odwq895124kvr","content":"<h3 id=\"创作背景\"><a href=\"#创作背景\" class=\"headerlink\" title=\"创作背景\"></a><strong>创作背景</strong><p></p></h3><p>春节期间，兔子在读《资治通鉴》，看到书里的语言，备受鼓舞，想着在互联网平台上和大家分享这本书里的新知。和大熊说罢，我们一拍即合，将把对《资治通鉴》的解读分为众多系列，以双人音频的方式放在喜马拉雅上。</p><br>以下为第一部分——导读。<p></p>\n<h3 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a><strong>导读</strong><p></p></h3><p>大熊/兔子：读史明智、鉴往知来。我是兔子/大熊。</p><br>大熊：欢迎大家来到兔子和大熊讲《资治通鉴》，以后的节目将由我们俩为大家解读《资治通鉴》这本书里的干货。<p></p><br>兔子：那大熊老师，我们今天和大家聊点什么呢？<p></p><br>大熊：由于今天是我们第一节课，那我们就从这本书的背景干货开始聊起。整本书，一共294卷，上可以追溯到战国初期韩赵魏三家分晋，下至宋太祖赵匡胤建国前夕，囊括了周秦两汉、魏晋南北朝、隋唐五代各朝的历史，整个时间跨度有1362年。<p></p><br>兔子：整本书的正文有三百多万字，司马光参考了三百多部著作，用了19年的时间才完成。<p></p><br>大熊：没错，那司马光为什么要写这本书呢？你觉得有哪些原因？<p></p><br>兔子：嗯，我们都知道“司马光砸缸”的故事，所以我想这么聪明的孩子，写书是他表达自己思想的一种途径，或者说是出于自身的喜好吧。<p></p><br>大熊：没错没错，我们都知道”砸缸“那个故事，其实司马光编撰这本书，一方面是出自自己的喜好和责任感，另一方面也和当时的政治环境有关。我们知道，北宋前期，提倡文治教化，鼓励大家多去总结历史经验和得失，所以在当时有很多学者都在做一件事，就是翻腾之前的史料，进行总结。<p></p><br>兔子：那这样说的话司马光写这本书，可以说是“奉敕”编撰的。所以在司马光和他的团队完成书稿，拿给皇帝看时，当时的皇帝宋神宗认为，这本书鉴于往事，有资于治道，故赐名《资治通鉴》。<p></p><br>大熊：没错，也正因为司马光的惊世情怀，才使得《资治通鉴》这本书得以经世致用。书里的内容是按照时间顺序编撰的，挑选了政治上和军事上的重要的人物、重要的事件。最精彩的地方是，在这每一部分之后，作者都有自己一段盖棺定论的评价，以提供给读者们借鉴。<p></p><br>兔子：所以这本书里可以看到故事、也可看到评述的语言，近代学者曾国藩在向众人推举这本书时，说这是经世治国最好的书。因为它不光讲道理，还通晓权利变更，还讲了如何操作，可谓是精彩纷呈。<p></p><br>大熊：没错，《资治通鉴》得到了后世学者和帝王的交口称誉，作为一本史书，它的价值可以从两方面去评价：一个是史料的价值，一个是史著的价值。作为历史材料，《资治通鉴》中隋唐五代的部分，是很难得的历史记载；同样，作为一部史学巨著，它也具有不可替代的阅读鉴赏价值。<p></p><br>兔子：司马光在编撰的时候参考了300多部著作，还特地又写了另外一本书，叫《考异》，记载从哪里搜罗来的史料，并进行考订。这才是学术研究的初心啊，讲求史料真实。<p></p><br>大熊：所以这本书，真的是非常值得我们仔细去品味。<p></p><br>兔子：大熊，你读《资治通鉴》，收获了哪些呢？<p></p><br>大熊：借用某先贤的一句话，读资治通鉴“可以自淑，可以诲人，可以知道而乐“。自淑就是提升自己，诲人就是可以和人分享，知道而乐就是知道为人之道、处世之道，感到很愉快，很快乐。我想，这也是我们大多数人读《资治通鉴》的宗旨吧。<p></p><br>兔子：没错，前段时间我有把《资治通鉴》的一些读后感发布到我的公众号上，有朋友和我留言说，古人就已想到了现代人遇到的问题的解决之路，真是智慧。所以我会感到，别人从我我分享的东西里获取新知，真是十分幸福的事情。<p></p><br>大熊：当然啦，历史是具体的，但道理是抽象的，所以对待很多历史事件和人物，不同人的看法也不同。也欢迎大家在以后的节目里可以发表自己的想法，我们可以一同讨论、共同进步。<p></p><br>兔子：大熊和兔子都是国学迷，也非常想通过分享对《资治通鉴》的个人解读，认识更多关注国学经典的你们。记得点击音频右方的“免费订阅”哦，我们下期节目见。<p></p><br>大熊：下期节目见。<p></p>  <p></p>\n<p><a href=\"http://xima.tv/g4nS16?_sonic=0\">导读音频-喜马拉雅主页</a></p>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h3 id=\"创作背景\"><a href=\"#创作背景\" class=\"headerlink\" title=\"创作背景\"></a><strong>创作背景</strong><p></p></h3><p>春节期间，兔子在读《资治通鉴》，看到书里的语言，备受鼓舞，想着在互联网平台上和大家分享这本书里的新知。和大熊说罢，我们一拍即合，将把对《资治通鉴》的解读分为众多系列，以双人音频的方式放在喜马拉雅上。</p><br>以下为第一部分——导读。<p></p>\n<h3 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a><strong>导读</strong><p></p></h3><p>大熊/兔子：读史明智、鉴往知来。我是兔子/大熊。</p><br>大熊：欢迎大家来到兔子和大熊讲《资治通鉴》，以后的节目将由我们俩为大家解读《资治通鉴》这本书里的干货。<p></p><br>兔子：那大熊老师，我们今天和大家聊点什么呢？<p></p><br>大熊：由于今天是我们第一节课，那我们就从这本书的背景干货开始聊起。整本书，一共294卷，上可以追溯到战国初期韩赵魏三家分晋，下至宋太祖赵匡胤建国前夕，囊括了周秦两汉、魏晋南北朝、隋唐五代各朝的历史，整个时间跨度有1362年。<p></p><br>兔子：整本书的正文有三百多万字，司马光参考了三百多部著作，用了19年的时间才完成。<p></p><br>大熊：没错，那司马光为什么要写这本书呢？你觉得有哪些原因？<p></p><br>兔子：嗯，我们都知道“司马光砸缸”的故事，所以我想这么聪明的孩子，写书是他表达自己思想的一种途径，或者说是出于自身的喜好吧。<p></p><br>大熊：没错没错，我们都知道”砸缸“那个故事，其实司马光编撰这本书，一方面是出自自己的喜好和责任感，另一方面也和当时的政治环境有关。我们知道，北宋前期，提倡文治教化，鼓励大家多去总结历史经验和得失，所以在当时有很多学者都在做一件事，就是翻腾之前的史料，进行总结。<p></p><br>兔子：那这样说的话司马光写这本书，可以说是“奉敕”编撰的。所以在司马光和他的团队完成书稿，拿给皇帝看时，当时的皇帝宋神宗认为，这本书鉴于往事，有资于治道，故赐名《资治通鉴》。<p></p><br>大熊：没错，也正因为司马光的惊世情怀，才使得《资治通鉴》这本书得以经世致用。书里的内容是按照时间顺序编撰的，挑选了政治上和军事上的重要的人物、重要的事件。最精彩的地方是，在这每一部分之后，作者都有自己一段盖棺定论的评价，以提供给读者们借鉴。<p></p><br>兔子：所以这本书里可以看到故事、也可看到评述的语言，近代学者曾国藩在向众人推举这本书时，说这是经世治国最好的书。因为它不光讲道理，还通晓权利变更，还讲了如何操作，可谓是精彩纷呈。<p></p><br>大熊：没错，《资治通鉴》得到了后世学者和帝王的交口称誉，作为一本史书，它的价值可以从两方面去评价：一个是史料的价值，一个是史著的价值。作为历史材料，《资治通鉴》中隋唐五代的部分，是很难得的历史记载；同样，作为一部史学巨著，它也具有不可替代的阅读鉴赏价值。<p></p><br>兔子：司马光在编撰的时候参考了300多部著作，还特地又写了另外一本书，叫《考异》，记载从哪里搜罗来的史料，并进行考订。这才是学术研究的初心啊，讲求史料真实。<p></p><br>大熊：所以这本书，真的是非常值得我们仔细去品味。<p></p><br>兔子：大熊，你读《资治通鉴》，收获了哪些呢？<p></p><br>大熊：借用某先贤的一句话，读资治通鉴“可以自淑，可以诲人，可以知道而乐“。自淑就是提升自己，诲人就是可以和人分享，知道而乐就是知道为人之道、处世之道，感到很愉快，很快乐。我想，这也是我们大多数人读《资治通鉴》的宗旨吧。<p></p><br>兔子：没错，前段时间我有把《资治通鉴》的一些读后感发布到我的公众号上，有朋友和我留言说，古人就已想到了现代人遇到的问题的解决之路，真是智慧。所以我会感到，别人从我我分享的东西里获取新知，真是十分幸福的事情。<p></p><br>大熊：当然啦，历史是具体的，但道理是抽象的，所以对待很多历史事件和人物，不同人的看法也不同。也欢迎大家在以后的节目里可以发表自己的想法，我们可以一同讨论、共同进步。<p></p><br>兔子：大熊和兔子都是国学迷，也非常想通过分享对《资治通鉴》的个人解读，认识更多关注国学经典的你们。记得点击音频右方的“免费订阅”哦，我们下期节目见。<p></p><br>大熊：下期节目见。<p></p>  <p></p>\n<p><a href=\"http://xima.tv/g4nS16?_sonic=0\">导读音频-喜马拉雅主页</a></p>\n"},{"title":"工程清单（持续更新）","date":"2022-07-07T10:49:35.000Z","_content":"\n## **【背景】**\n<p style=\"text-indent:2em\">\n从小就兴趣广泛，妄想什么都会。诗词歌赋、琴棋书画、天文地理、博古通今……从很多年前开始，就开始给自己挖坑了，但都是懒散的片段，经过这么多年的积累，期待自己把这些整理成册，系统性的总结和沉淀……\n</p>\n\n### **工程清单**</p>\n0. 文艺创作\n\t- 文学\n\t- \n\n1. 博古通今\n\t- 历史\n\t\t- 中国历史\n\t\t- 世界通史\n\t- 周易\n\t\t- 术数学\n\t\n2. 业务\n\t- 整体\n\t\t- 金融体系\n\t\t- 全面风险管理\n\t- 资管\n\t\t- 投研\n\t\t-\n\t- 银行\n\t\t- 信贷\n\t\n3. 方案和架构\n\t- 架构\n\t\t- 业务架构\n\t\t- 技术架构\n\t\t- 数据架构\n\t- 资管方案\n\t\t- 整体蓝图\n\t\t- 数据中台\n\t\t- 投研\n\t\t\t- FOF\n\t\t\t- 投前研究\n\t\t\t- 投后管理\n\t\t\t- 风险控制\n\t\t\t\n4. 方法论\n\t- 咨询\n\t- 管理\n\n5. 兴趣研究\n\t- 量化投资\n\t\t- abu\n\t- 爬虫\n\t- 人工智能\n\t- 机器学习\n\t- 操作系统DIY\n\t- 三国杀\n\t\t- noname\n\t\t- 太阳神\n\n6. 笔记\n\t- 书籍\n\t- 影评\n\t- 教程\n\t- 科普\n\n7. 感悟\n\t- ","source":"_posts/2022-07-07-工程清单（持续更新）.md","raw":"---\ntitle: 工程清单（持续更新）\ndate: 2022-07-07 18:49:35\ncategories:\n- [总览, 目录]\ntags:\n- 工程清单\n- 目录\n---\n\n## **【背景】**\n<p style=\"text-indent:2em\">\n从小就兴趣广泛，妄想什么都会。诗词歌赋、琴棋书画、天文地理、博古通今……从很多年前开始，就开始给自己挖坑了，但都是懒散的片段，经过这么多年的积累，期待自己把这些整理成册，系统性的总结和沉淀……\n</p>\n\n### **工程清单**</p>\n0. 文艺创作\n\t- 文学\n\t- \n\n1. 博古通今\n\t- 历史\n\t\t- 中国历史\n\t\t- 世界通史\n\t- 周易\n\t\t- 术数学\n\t\n2. 业务\n\t- 整体\n\t\t- 金融体系\n\t\t- 全面风险管理\n\t- 资管\n\t\t- 投研\n\t\t-\n\t- 银行\n\t\t- 信贷\n\t\n3. 方案和架构\n\t- 架构\n\t\t- 业务架构\n\t\t- 技术架构\n\t\t- 数据架构\n\t- 资管方案\n\t\t- 整体蓝图\n\t\t- 数据中台\n\t\t- 投研\n\t\t\t- FOF\n\t\t\t- 投前研究\n\t\t\t- 投后管理\n\t\t\t- 风险控制\n\t\t\t\n4. 方法论\n\t- 咨询\n\t- 管理\n\n5. 兴趣研究\n\t- 量化投资\n\t\t- abu\n\t- 爬虫\n\t- 人工智能\n\t- 机器学习\n\t- 操作系统DIY\n\t- 三国杀\n\t\t- noname\n\t\t- 太阳神\n\n6. 笔记\n\t- 书籍\n\t- 影评\n\t- 教程\n\t- 科普\n\n7. 感悟\n\t- ","slug":"工程清单（持续更新）","published":1,"updated":"2022-07-08T01:43:45.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl680gheg000qdwq83u9c9fxq","content":"<h2 id=\"【背景】\"><a href=\"#【背景】\" class=\"headerlink\" title=\"【背景】\"></a><strong>【背景】</strong></h2><p style=\"text-indent:2em\">\n从小就兴趣广泛，妄想什么都会。诗词歌赋、琴棋书画、天文地理、博古通今……从很多年前开始，就开始给自己挖坑了，但都是懒散的片段，经过这么多年的积累，期待自己把这些整理成册，系统性的总结和沉淀……\n</p>\n\n<h3 id=\"工程清单\"><a href=\"#工程清单\" class=\"headerlink\" title=\"工程清单\"></a><strong>工程清单</strong><p></p></h3><ol start=\"0\">\n<li><p>文艺创作</p>\n<ul>\n<li>文学</li>\n<li></li>\n</ul>\n</li>\n<li><p>博古通今</p>\n<ul>\n<li>历史<ul>\n<li>中国历史</li>\n<li>世界通史</li>\n</ul>\n</li>\n<li>周易<ul>\n<li>术数学</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>业务</p>\n<ul>\n<li>整体<ul>\n<li>金融体系</li>\n<li>全面风险管理</li>\n</ul>\n</li>\n<li>资管<ul>\n<li>投研</li>\n<li></li>\n</ul>\n</li>\n<li>银行<ul>\n<li>信贷</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>方案和架构</p>\n<ul>\n<li>架构<ul>\n<li>业务架构</li>\n<li>技术架构</li>\n<li>数据架构</li>\n</ul>\n</li>\n<li>资管方案<ul>\n<li>整体蓝图</li>\n<li>数据中台</li>\n<li>投研<ul>\n<li>FOF</li>\n<li>投前研究</li>\n<li>投后管理</li>\n<li>风险控制</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>方法论</p>\n<ul>\n<li>咨询</li>\n<li>管理</li>\n</ul>\n</li>\n<li><p>兴趣研究</p>\n<ul>\n<li>量化投资<ul>\n<li>abu</li>\n</ul>\n</li>\n<li>爬虫</li>\n<li>人工智能</li>\n<li>机器学习</li>\n<li>操作系统DIY</li>\n<li>三国杀<ul>\n<li>noname</li>\n<li>太阳神</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>笔记</p>\n<ul>\n<li>书籍</li>\n<li>影评</li>\n<li>教程</li>\n<li>科普</li>\n</ul>\n</li>\n<li><h2 id=\"感悟\"><a href=\"#感悟\" class=\"headerlink\" title=\"感悟\"></a>感悟</h2></li>\n</ol>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"【背景】\"><a href=\"#【背景】\" class=\"headerlink\" title=\"【背景】\"></a><strong>【背景】</strong></h2><p style=\"text-indent:2em\">\n从小就兴趣广泛，妄想什么都会。诗词歌赋、琴棋书画、天文地理、博古通今……从很多年前开始，就开始给自己挖坑了，但都是懒散的片段，经过这么多年的积累，期待自己把这些整理成册，系统性的总结和沉淀……\n</p>\n\n<h3 id=\"工程清单\"><a href=\"#工程清单\" class=\"headerlink\" title=\"工程清单\"></a><strong>工程清单</strong><p></p></h3><ol start=\"0\">\n<li><p>文艺创作</p>\n<ul>\n<li>文学</li>\n<li></li>\n</ul>\n</li>\n<li><p>博古通今</p>\n<ul>\n<li>历史<ul>\n<li>中国历史</li>\n<li>世界通史</li>\n</ul>\n</li>\n<li>周易<ul>\n<li>术数学</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>业务</p>\n<ul>\n<li>整体<ul>\n<li>金融体系</li>\n<li>全面风险管理</li>\n</ul>\n</li>\n<li>资管<ul>\n<li>投研</li>\n<li></li>\n</ul>\n</li>\n<li>银行<ul>\n<li>信贷</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>方案和架构</p>\n<ul>\n<li>架构<ul>\n<li>业务架构</li>\n<li>技术架构</li>\n<li>数据架构</li>\n</ul>\n</li>\n<li>资管方案<ul>\n<li>整体蓝图</li>\n<li>数据中台</li>\n<li>投研<ul>\n<li>FOF</li>\n<li>投前研究</li>\n<li>投后管理</li>\n<li>风险控制</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>方法论</p>\n<ul>\n<li>咨询</li>\n<li>管理</li>\n</ul>\n</li>\n<li><p>兴趣研究</p>\n<ul>\n<li>量化投资<ul>\n<li>abu</li>\n</ul>\n</li>\n<li>爬虫</li>\n<li>人工智能</li>\n<li>机器学习</li>\n<li>操作系统DIY</li>\n<li>三国杀<ul>\n<li>noname</li>\n<li>太阳神</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>笔记</p>\n<ul>\n<li>书籍</li>\n<li>影评</li>\n<li>教程</li>\n<li>科普</li>\n</ul>\n</li>\n<li><h2 id=\"感悟\"><a href=\"#感悟\" class=\"headerlink\" title=\"感悟\"></a>感悟</h2></li>\n</ol>\n"},{"title":"【自我进化1到2】01.关系中的自我","date":"2021-03-03T16:00:00.000Z","_content":"\n<font color='grey'><font size=2>*这一系列是基于陈海贤老师的自我进化课，用以自我剖析* </b></font>\n\n兔子曾经引以为傲的，是自己的时间管理方法———按分钟计算的，每30min看一下学习状态并及时调整，它帮助兔子一年内一次性7分过雅思，过CPA和CPV考试，写过实证，到过实习，玩过比赛。  \n\n凭借这种打满鸡血的精神状态，我度过了充实圆满的2018、19和20年的大部分时间，直到2020年下半叶，遇到大熊，我的精神节奏被打乱了。  \n\n自控力越来越差，开始频繁发脾气，出问题总想躲避，逃避沟通，对认识新朋友也失去了积极性。  \n\n和大熊认识起初，我拥有独立自由的生活，除了爸妈，我无需向任何人汇报。但随着亲密关系的建立，情感依赖迅速膨胀，我惧怕了。<u>**除了抢占我的时间、空间，它把脆弱年少不完整的自我真实地暴露出来，在我和他面前彰显无遗。望着镜子中的自己，我已记不清对他说了多少次，“这不是我。”** </u> \n\n我用了很久分析原因，一方面是客观因素，工作不稳定，另一方面也是我苦苦想寻求解决的——**并未建立稳定的自我**。  \n\n<u>**没有建立对自我身份的认同，当那些脆弱的部分通过亲密关系，被强行整合进自我概念里，我变得异常排斥，很难接纳自己，“这不是我”。** </u> \n\n所以，我试图探索，“我到底是怎样的”。\n\n开篇说一个词，“关系“。  \n\n\n#### <center>一、自我处在关系中</center>\n\n人无时无刻不处在关系中。\n\n在每一段关系里面，自我是不同的。\n\n大熊说，刚认识我的时候，我每天都笑的很阳光，但后来感觉就没那么积极了。所以我曾质疑，自己是不是变了。\n\n陈海贤老师讲了个故事，在孩子没做完作业的时候，妈妈会大声责备说，你怎么这么不听话！突然电话铃响了，妈妈接起电话，满脸笑容说，“哦，是老师啊，您说来家访，好啊好啊......\"。\n\n曾经，我会把故事理解为“真实自我”和“虚假自我”的差异，但不是的。**从关系的视角来看，它反映的是妈妈在“亲近”和“疏远”这两种不同关系中的差异，妈妈的行为都是真实的自我。所以说，并非个性，而是所处的关系，决定了你的想法和行为。**\n\n从关系的视角思考，会让很多看似无解的问题有了答案。比如说，我对坚持学法语有拖延症，我就进行了如下的剖析。  \n\n<font color='grey'><b>R：学法语有拖延症，怎么办？  \nA：为什么这么想  \nR：在学法语法语的时候，觉得记单词很难，经常不想去学。  \nA：难在哪里呢？如果学的不好，谁会评价你呢？  \nR：是我爷爷Peter。我担心Peter听到我退步的法语，会感到失望。</b></font>\n\n\n到这里，从关系的视角，拖延症就不只是我个人的问题了，而是我和爷爷关系的产物。\n\n\n#### <center>二、关系的视角拓展改变的空间</center>\n\n**妨碍改变的，是头脑中那个顽固的“自我概念”。**\n\n大熊在和我对话过程中发现，我习惯性使用过多“你应该......“。我给自己贴上类似“自信”“努力”的个性标签，同时指责别人为什么会有这样那样古怪的个性。  \n\n**在与人的交往中，我抽象出“自我”，也就是头脑中根深蒂固的那个模样，它不会变，始终积极向上。这些条条框框帮助我增加了人生控制感，但也塑造了僵固型思维，即**\n\n<u>**“我不能暴露我的脆弱，给那个夸奖我的人，以免让他失望。”**</u>\n\n现在想来，每段关系中的自我都是不一样的，如果喜欢探索和改变的人，为何不选择在不同的关系中发现不一样的自己呢。不再给自己贴上标签，而是去审视具体是什么样的关系，导致了现在的行为。也不指责别人的性格，而是理解什么样的关系，让他表现出这样的行为。\n\n比如，上文说到，我和爷爷的关系导致了我对法语学习缺乏积极性。在这段关系里，既然并非我个性问题，那可以寻求可以让自己表现更好的关系，发现不一样的自己，比如说，认识学法语的新朋友们。\n\n摆脱根深蒂固，把每个自我放到具体的关系中，从每一段关系，看自我的表现，会成长很多。\n\n  #### <center>尾</center>\n\n  \n从个体视角到关系视角，只要做出转变，便不再是那个贴着永久标签的自己。而亲密感的建立，是自我发展的路上一个重要里程碑。\n\n所以，有时感觉很幸运。论朋友，某种程度上，我和大熊志同道合，心中有所想，定有所为。也愿这种深层次的照顾，可以深化双方的自我身份认同，帮助彼此更能接纳自己，变得更完整。\n","source":"_posts/2021-03-04-个人进化论01.md","raw":"---\ntitle: 【自我进化1到2】01.关系中的自我\ndate: 2021-03-04 \ncategories:\n- [个人进化, 心理学]\n\ntags:\n- 听陈海贤自我进化课\n\n\n---\n\n<font color='grey'><font size=2>*这一系列是基于陈海贤老师的自我进化课，用以自我剖析* </b></font>\n\n兔子曾经引以为傲的，是自己的时间管理方法———按分钟计算的，每30min看一下学习状态并及时调整，它帮助兔子一年内一次性7分过雅思，过CPA和CPV考试，写过实证，到过实习，玩过比赛。  \n\n凭借这种打满鸡血的精神状态，我度过了充实圆满的2018、19和20年的大部分时间，直到2020年下半叶，遇到大熊，我的精神节奏被打乱了。  \n\n自控力越来越差，开始频繁发脾气，出问题总想躲避，逃避沟通，对认识新朋友也失去了积极性。  \n\n和大熊认识起初，我拥有独立自由的生活，除了爸妈，我无需向任何人汇报。但随着亲密关系的建立，情感依赖迅速膨胀，我惧怕了。<u>**除了抢占我的时间、空间，它把脆弱年少不完整的自我真实地暴露出来，在我和他面前彰显无遗。望着镜子中的自己，我已记不清对他说了多少次，“这不是我。”** </u> \n\n我用了很久分析原因，一方面是客观因素，工作不稳定，另一方面也是我苦苦想寻求解决的——**并未建立稳定的自我**。  \n\n<u>**没有建立对自我身份的认同，当那些脆弱的部分通过亲密关系，被强行整合进自我概念里，我变得异常排斥，很难接纳自己，“这不是我”。** </u> \n\n所以，我试图探索，“我到底是怎样的”。\n\n开篇说一个词，“关系“。  \n\n\n#### <center>一、自我处在关系中</center>\n\n人无时无刻不处在关系中。\n\n在每一段关系里面，自我是不同的。\n\n大熊说，刚认识我的时候，我每天都笑的很阳光，但后来感觉就没那么积极了。所以我曾质疑，自己是不是变了。\n\n陈海贤老师讲了个故事，在孩子没做完作业的时候，妈妈会大声责备说，你怎么这么不听话！突然电话铃响了，妈妈接起电话，满脸笑容说，“哦，是老师啊，您说来家访，好啊好啊......\"。\n\n曾经，我会把故事理解为“真实自我”和“虚假自我”的差异，但不是的。**从关系的视角来看，它反映的是妈妈在“亲近”和“疏远”这两种不同关系中的差异，妈妈的行为都是真实的自我。所以说，并非个性，而是所处的关系，决定了你的想法和行为。**\n\n从关系的视角思考，会让很多看似无解的问题有了答案。比如说，我对坚持学法语有拖延症，我就进行了如下的剖析。  \n\n<font color='grey'><b>R：学法语有拖延症，怎么办？  \nA：为什么这么想  \nR：在学法语法语的时候，觉得记单词很难，经常不想去学。  \nA：难在哪里呢？如果学的不好，谁会评价你呢？  \nR：是我爷爷Peter。我担心Peter听到我退步的法语，会感到失望。</b></font>\n\n\n到这里，从关系的视角，拖延症就不只是我个人的问题了，而是我和爷爷关系的产物。\n\n\n#### <center>二、关系的视角拓展改变的空间</center>\n\n**妨碍改变的，是头脑中那个顽固的“自我概念”。**\n\n大熊在和我对话过程中发现，我习惯性使用过多“你应该......“。我给自己贴上类似“自信”“努力”的个性标签，同时指责别人为什么会有这样那样古怪的个性。  \n\n**在与人的交往中，我抽象出“自我”，也就是头脑中根深蒂固的那个模样，它不会变，始终积极向上。这些条条框框帮助我增加了人生控制感，但也塑造了僵固型思维，即**\n\n<u>**“我不能暴露我的脆弱，给那个夸奖我的人，以免让他失望。”**</u>\n\n现在想来，每段关系中的自我都是不一样的，如果喜欢探索和改变的人，为何不选择在不同的关系中发现不一样的自己呢。不再给自己贴上标签，而是去审视具体是什么样的关系，导致了现在的行为。也不指责别人的性格，而是理解什么样的关系，让他表现出这样的行为。\n\n比如，上文说到，我和爷爷的关系导致了我对法语学习缺乏积极性。在这段关系里，既然并非我个性问题，那可以寻求可以让自己表现更好的关系，发现不一样的自己，比如说，认识学法语的新朋友们。\n\n摆脱根深蒂固，把每个自我放到具体的关系中，从每一段关系，看自我的表现，会成长很多。\n\n  #### <center>尾</center>\n\n  \n从个体视角到关系视角，只要做出转变，便不再是那个贴着永久标签的自己。而亲密感的建立，是自我发展的路上一个重要里程碑。\n\n所以，有时感觉很幸运。论朋友，某种程度上，我和大熊志同道合，心中有所想，定有所为。也愿这种深层次的照顾，可以深化双方的自我身份认同，帮助彼此更能接纳自己，变得更完整。\n","slug":"个人进化论01","published":1,"updated":"2021-03-05T03:02:26.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl680ghej000rdwq80f1r9m4s","content":"<p><font color=\"grey\"><font size=\"2\"><em>这一系列是基于陈海贤老师的自我进化课，用以自我剖析</em> </font></font></p>\n<p>兔子曾经引以为傲的，是自己的时间管理方法———按分钟计算的，每30min看一下学习状态并及时调整，它帮助兔子一年内一次性7分过雅思，过CPA和CPV考试，写过实证，到过实习，玩过比赛。  </p>\n<p>凭借这种打满鸡血的精神状态，我度过了充实圆满的2018、19和20年的大部分时间，直到2020年下半叶，遇到大熊，我的精神节奏被打乱了。  </p>\n<p>自控力越来越差，开始频繁发脾气，出问题总想躲避，逃避沟通，对认识新朋友也失去了积极性。  </p>\n<p>和大熊认识起初，我拥有独立自由的生活，除了爸妈，我无需向任何人汇报。但随着亲密关系的建立，情感依赖迅速膨胀，我惧怕了。<u><strong>除了抢占我的时间、空间，它把脆弱年少不完整的自我真实地暴露出来，在我和他面前彰显无遗。望着镜子中的自己，我已记不清对他说了多少次，“这不是我。”</strong> </u> </p>\n<p>我用了很久分析原因，一方面是客观因素，工作不稳定，另一方面也是我苦苦想寻求解决的——<strong>并未建立稳定的自我</strong>。  </p>\n<p><u><strong>没有建立对自我身份的认同，当那些脆弱的部分通过亲密关系，被强行整合进自我概念里，我变得异常排斥，很难接纳自己，“这不是我”。</strong> </u> </p>\n<p>所以，我试图探索，“我到底是怎样的”。</p>\n<p>开篇说一个词，“关系“。  </p>\n<h4 id=\"一、自我处在关系中\"><a href=\"#一、自我处在关系中\" class=\"headerlink\" title=\"一、自我处在关系中\"></a><center>一、自我处在关系中</center></h4><p>人无时无刻不处在关系中。</p>\n<p>在每一段关系里面，自我是不同的。</p>\n<p>大熊说，刚认识我的时候，我每天都笑的很阳光，但后来感觉就没那么积极了。所以我曾质疑，自己是不是变了。</p>\n<p>陈海贤老师讲了个故事，在孩子没做完作业的时候，妈妈会大声责备说，你怎么这么不听话！突然电话铃响了，妈妈接起电话，满脸笑容说，“哦，是老师啊，您说来家访，好啊好啊……”。</p>\n<p>曾经，我会把故事理解为“真实自我”和“虚假自我”的差异，但不是的。<strong>从关系的视角来看，它反映的是妈妈在“亲近”和“疏远”这两种不同关系中的差异，妈妈的行为都是真实的自我。所以说，并非个性，而是所处的关系，决定了你的想法和行为。</strong></p>\n<p>从关系的视角思考，会让很多看似无解的问题有了答案。比如说，我对坚持学法语有拖延症，我就进行了如下的剖析。  </p>\n<p><font color=\"grey\"><b>R：学法语有拖延症，怎么办？<br>A：为什么这么想<br>R：在学法语法语的时候，觉得记单词很难，经常不想去学。<br>A：难在哪里呢？如果学的不好，谁会评价你呢？<br>R：是我爷爷Peter。我担心Peter听到我退步的法语，会感到失望。</b></font></p>\n<p>到这里，从关系的视角，拖延症就不只是我个人的问题了，而是我和爷爷关系的产物。</p>\n<h4 id=\"二、关系的视角拓展改变的空间\"><a href=\"#二、关系的视角拓展改变的空间\" class=\"headerlink\" title=\"二、关系的视角拓展改变的空间\"></a><center>二、关系的视角拓展改变的空间</center></h4><p><strong>妨碍改变的，是头脑中那个顽固的“自我概念”。</strong></p>\n<p>大熊在和我对话过程中发现，我习惯性使用过多“你应该……“。我给自己贴上类似“自信”“努力”的个性标签，同时指责别人为什么会有这样那样古怪的个性。  </p>\n<p><strong>在与人的交往中，我抽象出“自我”，也就是头脑中根深蒂固的那个模样，它不会变，始终积极向上。这些条条框框帮助我增加了人生控制感，但也塑造了僵固型思维，即</strong></p>\n<p><u><strong>“我不能暴露我的脆弱，给那个夸奖我的人，以免让他失望。”</strong></u></p>\n<p>现在想来，每段关系中的自我都是不一样的，如果喜欢探索和改变的人，为何不选择在不同的关系中发现不一样的自己呢。不再给自己贴上标签，而是去审视具体是什么样的关系，导致了现在的行为。也不指责别人的性格，而是理解什么样的关系，让他表现出这样的行为。</p>\n<p>比如，上文说到，我和爷爷的关系导致了我对法语学习缺乏积极性。在这段关系里，既然并非我个性问题，那可以寻求可以让自己表现更好的关系，发现不一样的自己，比如说，认识学法语的新朋友们。</p>\n<p>摆脱根深蒂固，把每个自我放到具体的关系中，从每一段关系，看自我的表现，会成长很多。</p>\n<h4 id=\"尾\"><a href=\"#尾\" class=\"headerlink\" title=\"尾\"></a><center>尾</center></h4><p>从个体视角到关系视角，只要做出转变，便不再是那个贴着永久标签的自己。而亲密感的建立，是自我发展的路上一个重要里程碑。</p>\n<p>所以，有时感觉很幸运。论朋友，某种程度上，我和大熊志同道合，心中有所想，定有所为。也愿这种深层次的照顾，可以深化双方的自我身份认同，帮助彼此更能接纳自己，变得更完整。</p>\n","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<p><font color=\"grey\"><font size=\"2\"><em>这一系列是基于陈海贤老师的自我进化课，用以自我剖析</em> </font></font></p>\n<p>兔子曾经引以为傲的，是自己的时间管理方法———按分钟计算的，每30min看一下学习状态并及时调整，它帮助兔子一年内一次性7分过雅思，过CPA和CPV考试，写过实证，到过实习，玩过比赛。  </p>\n<p>凭借这种打满鸡血的精神状态，我度过了充实圆满的2018、19和20年的大部分时间，直到2020年下半叶，遇到大熊，我的精神节奏被打乱了。  </p>\n<p>自控力越来越差，开始频繁发脾气，出问题总想躲避，逃避沟通，对认识新朋友也失去了积极性。  </p>\n<p>和大熊认识起初，我拥有独立自由的生活，除了爸妈，我无需向任何人汇报。但随着亲密关系的建立，情感依赖迅速膨胀，我惧怕了。<u><strong>除了抢占我的时间、空间，它把脆弱年少不完整的自我真实地暴露出来，在我和他面前彰显无遗。望着镜子中的自己，我已记不清对他说了多少次，“这不是我。”</strong> </u> </p>\n<p>我用了很久分析原因，一方面是客观因素，工作不稳定，另一方面也是我苦苦想寻求解决的——<strong>并未建立稳定的自我</strong>。  </p>\n<p><u><strong>没有建立对自我身份的认同，当那些脆弱的部分通过亲密关系，被强行整合进自我概念里，我变得异常排斥，很难接纳自己，“这不是我”。</strong> </u> </p>\n<p>所以，我试图探索，“我到底是怎样的”。</p>\n<p>开篇说一个词，“关系“。  </p>\n<h4 id=\"一、自我处在关系中\"><a href=\"#一、自我处在关系中\" class=\"headerlink\" title=\"一、自我处在关系中\"></a><center>一、自我处在关系中</center></h4><p>人无时无刻不处在关系中。</p>\n<p>在每一段关系里面，自我是不同的。</p>\n<p>大熊说，刚认识我的时候，我每天都笑的很阳光，但后来感觉就没那么积极了。所以我曾质疑，自己是不是变了。</p>\n<p>陈海贤老师讲了个故事，在孩子没做完作业的时候，妈妈会大声责备说，你怎么这么不听话！突然电话铃响了，妈妈接起电话，满脸笑容说，“哦，是老师啊，您说来家访，好啊好啊……”。</p>\n<p>曾经，我会把故事理解为“真实自我”和“虚假自我”的差异，但不是的。<strong>从关系的视角来看，它反映的是妈妈在“亲近”和“疏远”这两种不同关系中的差异，妈妈的行为都是真实的自我。所以说，并非个性，而是所处的关系，决定了你的想法和行为。</strong></p>\n<p>从关系的视角思考，会让很多看似无解的问题有了答案。比如说，我对坚持学法语有拖延症，我就进行了如下的剖析。  </p>\n<p><font color=\"grey\"><b>R：学法语有拖延症，怎么办？<br>A：为什么这么想<br>R：在学法语法语的时候，觉得记单词很难，经常不想去学。<br>A：难在哪里呢？如果学的不好，谁会评价你呢？<br>R：是我爷爷Peter。我担心Peter听到我退步的法语，会感到失望。</b></font></p>\n<p>到这里，从关系的视角，拖延症就不只是我个人的问题了，而是我和爷爷关系的产物。</p>\n<h4 id=\"二、关系的视角拓展改变的空间\"><a href=\"#二、关系的视角拓展改变的空间\" class=\"headerlink\" title=\"二、关系的视角拓展改变的空间\"></a><center>二、关系的视角拓展改变的空间</center></h4><p><strong>妨碍改变的，是头脑中那个顽固的“自我概念”。</strong></p>\n<p>大熊在和我对话过程中发现，我习惯性使用过多“你应该……“。我给自己贴上类似“自信”“努力”的个性标签，同时指责别人为什么会有这样那样古怪的个性。  </p>\n<p><strong>在与人的交往中，我抽象出“自我”，也就是头脑中根深蒂固的那个模样，它不会变，始终积极向上。这些条条框框帮助我增加了人生控制感，但也塑造了僵固型思维，即</strong></p>\n<p><u><strong>“我不能暴露我的脆弱，给那个夸奖我的人，以免让他失望。”</strong></u></p>\n<p>现在想来，每段关系中的自我都是不一样的，如果喜欢探索和改变的人，为何不选择在不同的关系中发现不一样的自己呢。不再给自己贴上标签，而是去审视具体是什么样的关系，导致了现在的行为。也不指责别人的性格，而是理解什么样的关系，让他表现出这样的行为。</p>\n<p>比如，上文说到，我和爷爷的关系导致了我对法语学习缺乏积极性。在这段关系里，既然并非我个性问题，那可以寻求可以让自己表现更好的关系，发现不一样的自己，比如说，认识学法语的新朋友们。</p>\n<p>摆脱根深蒂固，把每个自我放到具体的关系中，从每一段关系，看自我的表现，会成长很多。</p>\n<h4 id=\"尾\"><a href=\"#尾\" class=\"headerlink\" title=\"尾\"></a><center>尾</center></h4><p>从个体视角到关系视角，只要做出转变，便不再是那个贴着永久标签的自己。而亲密感的建立，是自我发展的路上一个重要里程碑。</p>\n<p>所以，有时感觉很幸运。论朋友，某种程度上，我和大熊志同道合，心中有所想，定有所为。也愿这种深层次的照顾，可以深化双方的自我身份认同，帮助彼此更能接纳自己，变得更完整。</p>\n"},{"title":"hexo博客基础环境搭建（非常详细）","date":"2021-02-07T02:36:33.000Z","_content":"\n## **【背景】**\n<p style=\"text-indent:2em\">\n我是一名学财务的文科生，没有任何计算机基础，但是喜欢写文章，之前都是在微信公众号上写，但是有诸多限制，于是萌生了想搭建一个自己的博客的念头。我把我的想法告诉了我的一个朋友（姑且称他为X君吧），X君帮我搭建了一个网站，并把过程写了一个简单的教程并讲给我听。我根据X君的教程和讲解，自己也把环境搭建起来了。在这里做一个记录。算是在新博客网站中的第一篇文章吧。\n</p>\n\n## **【目标】**\n1. 使用nodejs的hexo搭建本地博客系统\n2. 使用git进行版本管理（和小伙伴们协同工作的必备良兔（tool））\n3. 使用github进行代码托管（X君告诉我自己写的东西可以上传到这个网站，可以当作一个本地的备份，也可以随时随地工作，但是要注意隐私问题）\n4. 使用github Page作为博客网站的访问（X君说这是一个免费的个人网页托管服务器，不是很懂，反正就是能通过他自定义并在公网上访问自己的文章）\n\n## **【小白科普】**\n1. **运行环境**\n   + 任何软件的运行都需要环境，比如win10需要在笔记本电脑上运行，andriod需要在手机上运行；笔记本电脑和手机就是win10和android这俩软件的运行环境。\n   + 操作系统是一个特殊的软件，他们为其他软件的运行提供环境，比如QQ、微信都需要安装在win10、ios或android操作系统上才能运行，只不过他们要求的格式不一样，win10可以运行exe软件，ios可以运行dmg文件，andriod运行pkg文件等。\n   + 针对那些没有可视化交互界面的软件，操作系统会给他们提供一个特殊的运行环境。比如win10的cmd运行环境，mac的bash环境，androi也有只不过我们在手机上不常用。（不太好理解，但是可以类比win10需要笔记本电脑提供环境，QQ需要win10操作系统提供环境，python等没有界面的软件需要cmd提供环境一样类比着理解）。\n   + python、nodejs、mysql等这些都是没有可视化交互界面的软件，所以需要我们在cmd或者bash中运行（X君说python和nodejs也有图形交互界面，但是为了让我更好的理解这些概念，所以就不推荐我使用）。\n2. **环境变量**\n   + 上面提到了运行环境，但是我按X君的教程搭建环境的时候，经常**提示某某文件后文件夹找不见**，于是X君又给我普及了**环境变量**的概念。\n   + 当我们使用cmd或bash运行一个软件时，会以以下顺序执行：\n      * 首先会在**当前目录**中寻找是否有该软件（例如python.exe）；\n      * 如果没有则会在**当前用户的PATH环境变量指定的所有目录中按先后顺序循环寻找**，如果找到了就直接运行，不再往下找。这个PATH就是一个环境变量（可以理解为一个字符串），存放了一堆的文件夹目录，win10是以“;”隔开，mac是以“：”隔开，大概长下面这个样子。\n``` bash\n  /Users/abbywalker/opt/anaconda3/bin:/Users/abbywalker/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.8/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/mysql/bin\n```\n      * 如果还没有则会继续在**系统的PATH环境变量指定的所有目录中按先后顺序循环寻找**\n      * 如果还是找不到，就会报错**提示某某文件后文件夹找不见**\n3. **运行软件的5个方法**\n   + 根据上面环境变量的介绍，运行软件可以有5种方法\n   + 直接到该软件的安装目录下运行 （对应于环境变量中的**当前目录**）\n   + 把该软件的安装目录加入到**该用户的PATH变量**中（具体方法后面讲）\n   + 在当前运行的cmd或bash中临时指定，而不影响其他的程序运行（X君建议使用这种方法，这样可以同一个电脑安装多版本的软件，比如同时安装python2.7和3.7，通过这种方法临时指定当前运行的环境而不影响其他程序）（具体方法后面讲）\n   + 把该软件的安装目录加入到**系统的PATH变量**中（具体方法后面讲）\n   + 直接指定该软件安装目录的绝对路径进行执行，例如:\n``` bash\n  >/usr/local/mysql/bin/python #mac的bash环境\n  >d:\\soft\\pytthon\\python.exe #win10的cmd环境\n```\n\n<p style=\"text-indent:2em\">\n<b>好了，小白科普到此结束，下面进入本文正题。</b>\n</p>\n\n## **【环境准备】**\n1. 安装git\n2. 安装nodejs\n3. 安装hexo\n4. github搭建源文件个人仓库\n5. **github设置多Page**（默认一个账户只能有一个主页Page）\n6. 生产SSH并添加到github\n7. 将hexo发布到github\n8. 页面访问（本地预览和公网访问）\n\n<p style=\"text-indent:2em\">\nPS：X君用的是windows，我用的是mac所以教程会写两份。\n</p>\n\n### **安装git**\n1. windows的比较简单，直接下载软件，一路下一步即可；\n2. mac上安装稍微复杂一点，安装过程记录以下；\n   + 百度搜索 mac git安装，会提示到 [git-scm](https://git-scm.com/download/mac)去安装\n   + 页面是英文的，按第一个教程，先安装**homebrew**,按照homebrew官网的提示，第一种方法直接安装,```/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"```需要翻墙 **【失败】**，按官网第二种方法，先下载下来，然后解压，会报错，好不容易解压出来了，运行依然会报错。**【失败】**。**建议大家不要按这个方法安装，当然有兴趣的可以自己尝试。**\n   + 鉴于**homebrew**的教训，所以**XCode**的方式，我也没有尝试。\n   + 直接使用第三种方式，**Binary installer**，下载sourceforge编译好的安装包，虽然不是最新版，但是不影响咱们的使用。**直接下载zip文件，解压出dmg文件，安装即可。**\n\n### **安装nodejs**\n1. windows和mac上都比较简单，直接下载软件，一路下一步即可；\n\n### **安装hexo**\n&ensp;&ensp;&ensp;&ensp;**windows和mac是一样的**\n\n1. **在nodejs环境中（cmd或者bash）安装hexo包**  \n``` bash\nnpm install -g hexo-cli\n```\n2. **测试hexo是否成功**\n   + 初始化\n``` bash\nhexo init myBlog\n```\n   + 安装基础环境包 \n``` bash\ncd myBlog\nnpm install\n```\n\n<p style=\"text-indent:2em\">\n执行成功后，myBlog文件夹的结构如下:\n</p>\n\n``` bash\nmyBlog\n├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 \n├── package.json\n├── scaffolds # 模版文件夹\n├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹\n|   ├── _drafts # 草稿文件\n|   └── _posts # 文章Markdowm文件 \n└── themes  # 主题文件夹\n```\n   + 本地启动hexo服务器进行测试  \n``` bash\nhexo s\n```\n&ensp;&ensp;&ensp;&ensp;在浏览器中输入**http://localhost:4000**，如果看到如下效果，则证明hexo环境搭建成功:\n{% asset_img hexo-hello.png 初始化 %}\n\n### **github搭建个人源码仓库**\n<p style=\"text-indent:2em\">\n   <font color='red'>  \n   根据X君的建议，为了保证隐私安全和版权，自己写的博客的<b>源文件</b>单独保存在一个github仓库里，供自己使用；把hexo编译后的<b>发布版本</b>保存在另外一个github仓库里,通过github Page供大家访问。\n   </font>\n</p>\n\n1. 注册github（略）。\n2. 登录github（略）\n3. 新建个人仓库 **（建议私人库）**\n{% asset_img github_new.png 点击新建按钮 %}\n{% asset_img github_new_config.png 填入相关信息 %}\n4. 导出个人仓库\n``` bash\ngit clone https://github.com/unclevicky/myBlogSrc.git .\n```\n5. 把刚建立的**myBlog文件下的所有内容**放到刚导出的github目录，然后再提交\n``` bash\ngit commit -m \"第一次提交我的blog\"\ngit push\n```\n\n### **github设置多Page**\n1. <font color='red'>直接使用github个人主页</font>\n   \n   + 一个github主页只能有一个个人主页\n   + 新建一个**与账户同名的xxxx.github.io** (xxxx是你自己的账户名，X君的是unclevicky.github.io)\n   + **记录下这个特殊仓库的git地址供后面使用**,https://github.com/unclevicky/unclevicky.github.io.git\n2. <font color='red'><b>利用每个项目的GitHub Pages实现多主页访问</b></font>\n   + 新建一个仓库项目，方法同上\n{% asset_img github_new.png 点击新建按钮 %}\n   + 输入项目名称等信息(建议公开项目,不公开也行其实)，截图里用的名字是\"myBlogPub\"，写教程的时候已经改成了\"rabbitBear\"。可根据需要自己修改。\n{% asset_img github_new_pub.png 填入相关信息 %}\n   + 在github中配置页面，向下滚动<b>设置项目GitHub Pages信息</b>\n{% asset_img github_setting.png 设置GitHub Pages %}\n{% asset_img github_pub_page.png 设置GitHub Pages %}\n   + 记住两个地址\n      * **记住项目仓库的地址，后面配置hexo发布时使用**,https://github.com/unclevicky/rabbitBear.git\n      * **记住项目Github Page地址，后面访问博客时使用**,https://unclevicky.github.io/rabbitBear/\n\n### **生产SSH并添加到github**\n1. 配置一个SSH绑定到github，SSH一个是私钥，一个是公钥，私钥保存到个人本地（千万别泄露），公钥配置到github上。（不太懂，反正类似我党当年在小黑板上登一个报纸-公钥，每个人拿自己的暗号-私钥，去破解想要的信息一样。同一份报纸，每个人私钥不同，获取的情报也不同一样。姑且这理解吧）。\n2. 回到本地的git环境,设置github用户的全局用户和邮箱，如果已设置可以忽略。\n``` bash\n# 使用以下语句检测是否设置，如果返回为空，则证明未设置\ngit config user.name\ngit config user.email\n```\n``` bash\n# 如果没设置，则使用下面两句话设置即可\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n3. 然后创建SSH,使用以下语句，然后一路回车\n``` bash\n# windows的话使用cmd环境,xxxx是你的windows用户\ncd c:/users/xxxx/.ssh/ \n# mac的话使用bash环境,$HOME也是一个环境变量（参考上面），指向当前用户的home目录\n# cd $HOME/.ssh/\nssh-keygen -t rsa -C \"youremail\"\n```\n{% asset_img git_ssh.png SSH秘钥截图 %}\n\n4. 将SSH的公钥，绑定到github上。\n   + 打开上面的**id_rsa.pub**文件，把所有的内容拷贝下来\n   + 粘贴到github的SSH里面\n{% asset_img github_ssh.png 用户配置页面截图 %}\n{% asset_img github_ssh_new.png SSH配置页面截图 %}\n{% asset_img github_ssh_newdetail.png 新建配置截图 %}\n5. 在本地cmd或bash环境测试秘钥是否成功\n``` bash\n# windows的话使用cmd环境,xxxx是你的windows用户\ncd c:/users/xxxx/.ssh/ \n# mac的话使用bash环境,$HOME也是一个环境变量（参考上面），指向当前用户的home目录\n# cd $HOME/.ssh/\nssh -T git@github.com\n```\n如果，显示```Hi unclevicky! You've successfully authenticated, but GitHub does not provide shell access.```,说明成功了。\n{% asset_img ssh_suc.png SSH配置成功截图 %}\n1. **不成功的可能原因**\n   + 如果不成功，加入-v参数，则使用以下命令，查看失败原因\n``` bash\n ssh -T -v git@github.com \n```\n   + X君第一次也失败，使用-v查看调试信息之后发现，是找不到秘钥。这个问题，是绝对路径和相对路径造成的，所以在.ssh的目录下，新建一个**config**的文件，制定秘钥的绝对路径即可:\n{% asset_img git_ssh.png SSH秘钥截图 %}\n``` bash\nHost github.com\nUser xxxx@xx.com # 你的邮箱地址\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile C:\\\\Users\\\\xxxx\\\\.ssh\\\\id_rsa # 你的私钥的保存路径和名字\nPort 443\n```\n\n\n### **将hexo发布到github**\n1. hexo本地环境测试【√】；github Page完成【√】；ssh配置完成【√】。剩下就是修改hexo的配置文件，然后发布到github page上，即可访问。\n2. 修改hexo博客目录的配置文件**_config.yml**,找到 **\"url:\"** 和 **\"deploy:\"**\n<p style=\"text-indent:2em\">\n   <font color='red'>\n   <b>\n\n   特殊说明：\n    + 如果github使用的“直接使用github个人主页”方法，根据上面让记住的连接，url和deploy的配置为：\n   </b>\n   </font>\n</p>\n\n``` bash\nurl: https://unclevicky.github.io\nroot: /\n...\n...\n\ndeploy:\n  type: git\n  repo: https://github.com/unclevicky/unclevicky.github.io.git\n\n```\n<p style=\"text-indent:2em\">\n   <font color='red'>\n   <b>\n\n   + 如果github使用的“项目的GitHub Pages实现多主页”方法，根据上面让记住的连接，url需要指定具体的项目名称，url和deploy的配置为：\n   </b>\n   </font>\n</p>\n\n``` bash\nurl: https://unclevicky.github.io/rabbitBear/\nroot: /rabbitBear\n...\n...\n\ndeploy:\n  type: git\n  repo: https://github.com/unclevicky/rabbitBear.git\n...\n...\n```\n\n**项目的GitHub Pages实现多主页的配置如下**\n\n``` bash\n# URL\n## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/'\nurl: https://unclevicky.github.io/rabbitBear/\nroot: /rabbitBear\npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n```\n\n``` bash\n# URL\n## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/'\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: git\n  repo: https://github.com/unclevicky/rabbitBear.git\n  branch: main\n```\n\n3. 在本地执行hexo的编译和发布命令，则可成功发布到github上\n``` bash\nhexo clean # 删除以前的发布\nhexo g -d  # 重新编译生成，并按配置文件中的github信息，发布到对应的网站上\n```\n\n\n### **公网访问访问博客主页**\n1. <font color='red'><b>直接个人主页方式</b></font>\n   https://xxxx.github.io/，xxxx是你的github用户名\n   例如：https://unclevicky.github.io/\n2. <font color='red'><b>项目多主页方式</b></font>\n   https://xxxx.github.io/yyyy/，xxxx是你的github用户名,yyyy是你的项目名\n   例如：https://unclevicky.github.io/rabbitBear/\n\n\n## **修改博客样式**\n1. 默认的样式不是很好看，可以自己DIY样式和功能，比如统计访问量、设置分类、增加订阅、回复等功能，这也是为什么要搭建自己模块的原因。**DIY！**\n2. 当然也可以使用网上那些达人们已经diy好的样式，比如X君给我推荐的buterfly这款样式。\n   + 下载样式到博客的themes目录，在线安装和手工下载都可以。以butterfly为例\n``` bash\n# 在cmd或bash下执行\n# 下载并安装样式文件\nnpm i hexo-theme-butterfly\n# 下载并安装该样式需要的插件，每个样式需要的插件不一样，根据实际需要来，否则有些样式显示不出来\nnpm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n3. hexo博客目录的配置文件**_config.yml**，找到\"theme\"，修改成刚下载的\"butterfly\"\n``` bash\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: butterfly\n```\n4. 最终效果如下\n{% asset_img butterfly.png butterfly样式效果 %}\n\n\n## **写新博客**\n1. 在**源文件**的根目录执行，```hexo new xxxx```,xxxx是博客名称，支持中文。例如:```hexo new 博客基础环境搭建（非常详细）```。\n2. 则在博客的\"source/_posts/\"目录下生产一个，同名的.md文件，例如\"hexo博客基础环境搭建（非常详细）.md\"，此文件就是我们的博客源文件，修改此文件，把博客内容写进去，然后使用前面提到的,```hexo clean``` ```hexo g -d```,即可完成编译和发布。\n3. **.md是markdown语言写的文件，非常简洁和灵活，至于如何使用.md文件写博客，将在后续的博客中陆续更新。本篇文章即是用此方法编写完成。对于我这个新手来说，入门还是比较简单的。**\n\n## The End！ Have Fun！","source":"_posts/2021-02-07-hexo博客基础环境搭建.md","raw":"---\ntitle: hexo博客基础环境搭建（非常详细）\ndate: 2021-02-07 10:36:33\ncategories:\n- [基础教程, 环境搭建]\ntags:\n- hexo\n- github\n- 博客\n---\n\n## **【背景】**\n<p style=\"text-indent:2em\">\n我是一名学财务的文科生，没有任何计算机基础，但是喜欢写文章，之前都是在微信公众号上写，但是有诸多限制，于是萌生了想搭建一个自己的博客的念头。我把我的想法告诉了我的一个朋友（姑且称他为X君吧），X君帮我搭建了一个网站，并把过程写了一个简单的教程并讲给我听。我根据X君的教程和讲解，自己也把环境搭建起来了。在这里做一个记录。算是在新博客网站中的第一篇文章吧。\n</p>\n\n## **【目标】**\n1. 使用nodejs的hexo搭建本地博客系统\n2. 使用git进行版本管理（和小伙伴们协同工作的必备良兔（tool））\n3. 使用github进行代码托管（X君告诉我自己写的东西可以上传到这个网站，可以当作一个本地的备份，也可以随时随地工作，但是要注意隐私问题）\n4. 使用github Page作为博客网站的访问（X君说这是一个免费的个人网页托管服务器，不是很懂，反正就是能通过他自定义并在公网上访问自己的文章）\n\n## **【小白科普】**\n1. **运行环境**\n   + 任何软件的运行都需要环境，比如win10需要在笔记本电脑上运行，andriod需要在手机上运行；笔记本电脑和手机就是win10和android这俩软件的运行环境。\n   + 操作系统是一个特殊的软件，他们为其他软件的运行提供环境，比如QQ、微信都需要安装在win10、ios或android操作系统上才能运行，只不过他们要求的格式不一样，win10可以运行exe软件，ios可以运行dmg文件，andriod运行pkg文件等。\n   + 针对那些没有可视化交互界面的软件，操作系统会给他们提供一个特殊的运行环境。比如win10的cmd运行环境，mac的bash环境，androi也有只不过我们在手机上不常用。（不太好理解，但是可以类比win10需要笔记本电脑提供环境，QQ需要win10操作系统提供环境，python等没有界面的软件需要cmd提供环境一样类比着理解）。\n   + python、nodejs、mysql等这些都是没有可视化交互界面的软件，所以需要我们在cmd或者bash中运行（X君说python和nodejs也有图形交互界面，但是为了让我更好的理解这些概念，所以就不推荐我使用）。\n2. **环境变量**\n   + 上面提到了运行环境，但是我按X君的教程搭建环境的时候，经常**提示某某文件后文件夹找不见**，于是X君又给我普及了**环境变量**的概念。\n   + 当我们使用cmd或bash运行一个软件时，会以以下顺序执行：\n      * 首先会在**当前目录**中寻找是否有该软件（例如python.exe）；\n      * 如果没有则会在**当前用户的PATH环境变量指定的所有目录中按先后顺序循环寻找**，如果找到了就直接运行，不再往下找。这个PATH就是一个环境变量（可以理解为一个字符串），存放了一堆的文件夹目录，win10是以“;”隔开，mac是以“：”隔开，大概长下面这个样子。\n``` bash\n  /Users/abbywalker/opt/anaconda3/bin:/Users/abbywalker/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.8/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/mysql/bin\n```\n      * 如果还没有则会继续在**系统的PATH环境变量指定的所有目录中按先后顺序循环寻找**\n      * 如果还是找不到，就会报错**提示某某文件后文件夹找不见**\n3. **运行软件的5个方法**\n   + 根据上面环境变量的介绍，运行软件可以有5种方法\n   + 直接到该软件的安装目录下运行 （对应于环境变量中的**当前目录**）\n   + 把该软件的安装目录加入到**该用户的PATH变量**中（具体方法后面讲）\n   + 在当前运行的cmd或bash中临时指定，而不影响其他的程序运行（X君建议使用这种方法，这样可以同一个电脑安装多版本的软件，比如同时安装python2.7和3.7，通过这种方法临时指定当前运行的环境而不影响其他程序）（具体方法后面讲）\n   + 把该软件的安装目录加入到**系统的PATH变量**中（具体方法后面讲）\n   + 直接指定该软件安装目录的绝对路径进行执行，例如:\n``` bash\n  >/usr/local/mysql/bin/python #mac的bash环境\n  >d:\\soft\\pytthon\\python.exe #win10的cmd环境\n```\n\n<p style=\"text-indent:2em\">\n<b>好了，小白科普到此结束，下面进入本文正题。</b>\n</p>\n\n## **【环境准备】**\n1. 安装git\n2. 安装nodejs\n3. 安装hexo\n4. github搭建源文件个人仓库\n5. **github设置多Page**（默认一个账户只能有一个主页Page）\n6. 生产SSH并添加到github\n7. 将hexo发布到github\n8. 页面访问（本地预览和公网访问）\n\n<p style=\"text-indent:2em\">\nPS：X君用的是windows，我用的是mac所以教程会写两份。\n</p>\n\n### **安装git**\n1. windows的比较简单，直接下载软件，一路下一步即可；\n2. mac上安装稍微复杂一点，安装过程记录以下；\n   + 百度搜索 mac git安装，会提示到 [git-scm](https://git-scm.com/download/mac)去安装\n   + 页面是英文的，按第一个教程，先安装**homebrew**,按照homebrew官网的提示，第一种方法直接安装,```/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"```需要翻墙 **【失败】**，按官网第二种方法，先下载下来，然后解压，会报错，好不容易解压出来了，运行依然会报错。**【失败】**。**建议大家不要按这个方法安装，当然有兴趣的可以自己尝试。**\n   + 鉴于**homebrew**的教训，所以**XCode**的方式，我也没有尝试。\n   + 直接使用第三种方式，**Binary installer**，下载sourceforge编译好的安装包，虽然不是最新版，但是不影响咱们的使用。**直接下载zip文件，解压出dmg文件，安装即可。**\n\n### **安装nodejs**\n1. windows和mac上都比较简单，直接下载软件，一路下一步即可；\n\n### **安装hexo**\n&ensp;&ensp;&ensp;&ensp;**windows和mac是一样的**\n\n1. **在nodejs环境中（cmd或者bash）安装hexo包**  \n``` bash\nnpm install -g hexo-cli\n```\n2. **测试hexo是否成功**\n   + 初始化\n``` bash\nhexo init myBlog\n```\n   + 安装基础环境包 \n``` bash\ncd myBlog\nnpm install\n```\n\n<p style=\"text-indent:2em\">\n执行成功后，myBlog文件夹的结构如下:\n</p>\n\n``` bash\nmyBlog\n├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 \n├── package.json\n├── scaffolds # 模版文件夹\n├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹\n|   ├── _drafts # 草稿文件\n|   └── _posts # 文章Markdowm文件 \n└── themes  # 主题文件夹\n```\n   + 本地启动hexo服务器进行测试  \n``` bash\nhexo s\n```\n&ensp;&ensp;&ensp;&ensp;在浏览器中输入**http://localhost:4000**，如果看到如下效果，则证明hexo环境搭建成功:\n{% asset_img hexo-hello.png 初始化 %}\n\n### **github搭建个人源码仓库**\n<p style=\"text-indent:2em\">\n   <font color='red'>  \n   根据X君的建议，为了保证隐私安全和版权，自己写的博客的<b>源文件</b>单独保存在一个github仓库里，供自己使用；把hexo编译后的<b>发布版本</b>保存在另外一个github仓库里,通过github Page供大家访问。\n   </font>\n</p>\n\n1. 注册github（略）。\n2. 登录github（略）\n3. 新建个人仓库 **（建议私人库）**\n{% asset_img github_new.png 点击新建按钮 %}\n{% asset_img github_new_config.png 填入相关信息 %}\n4. 导出个人仓库\n``` bash\ngit clone https://github.com/unclevicky/myBlogSrc.git .\n```\n5. 把刚建立的**myBlog文件下的所有内容**放到刚导出的github目录，然后再提交\n``` bash\ngit commit -m \"第一次提交我的blog\"\ngit push\n```\n\n### **github设置多Page**\n1. <font color='red'>直接使用github个人主页</font>\n   \n   + 一个github主页只能有一个个人主页\n   + 新建一个**与账户同名的xxxx.github.io** (xxxx是你自己的账户名，X君的是unclevicky.github.io)\n   + **记录下这个特殊仓库的git地址供后面使用**,https://github.com/unclevicky/unclevicky.github.io.git\n2. <font color='red'><b>利用每个项目的GitHub Pages实现多主页访问</b></font>\n   + 新建一个仓库项目，方法同上\n{% asset_img github_new.png 点击新建按钮 %}\n   + 输入项目名称等信息(建议公开项目,不公开也行其实)，截图里用的名字是\"myBlogPub\"，写教程的时候已经改成了\"rabbitBear\"。可根据需要自己修改。\n{% asset_img github_new_pub.png 填入相关信息 %}\n   + 在github中配置页面，向下滚动<b>设置项目GitHub Pages信息</b>\n{% asset_img github_setting.png 设置GitHub Pages %}\n{% asset_img github_pub_page.png 设置GitHub Pages %}\n   + 记住两个地址\n      * **记住项目仓库的地址，后面配置hexo发布时使用**,https://github.com/unclevicky/rabbitBear.git\n      * **记住项目Github Page地址，后面访问博客时使用**,https://unclevicky.github.io/rabbitBear/\n\n### **生产SSH并添加到github**\n1. 配置一个SSH绑定到github，SSH一个是私钥，一个是公钥，私钥保存到个人本地（千万别泄露），公钥配置到github上。（不太懂，反正类似我党当年在小黑板上登一个报纸-公钥，每个人拿自己的暗号-私钥，去破解想要的信息一样。同一份报纸，每个人私钥不同，获取的情报也不同一样。姑且这理解吧）。\n2. 回到本地的git环境,设置github用户的全局用户和邮箱，如果已设置可以忽略。\n``` bash\n# 使用以下语句检测是否设置，如果返回为空，则证明未设置\ngit config user.name\ngit config user.email\n```\n``` bash\n# 如果没设置，则使用下面两句话设置即可\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n3. 然后创建SSH,使用以下语句，然后一路回车\n``` bash\n# windows的话使用cmd环境,xxxx是你的windows用户\ncd c:/users/xxxx/.ssh/ \n# mac的话使用bash环境,$HOME也是一个环境变量（参考上面），指向当前用户的home目录\n# cd $HOME/.ssh/\nssh-keygen -t rsa -C \"youremail\"\n```\n{% asset_img git_ssh.png SSH秘钥截图 %}\n\n4. 将SSH的公钥，绑定到github上。\n   + 打开上面的**id_rsa.pub**文件，把所有的内容拷贝下来\n   + 粘贴到github的SSH里面\n{% asset_img github_ssh.png 用户配置页面截图 %}\n{% asset_img github_ssh_new.png SSH配置页面截图 %}\n{% asset_img github_ssh_newdetail.png 新建配置截图 %}\n5. 在本地cmd或bash环境测试秘钥是否成功\n``` bash\n# windows的话使用cmd环境,xxxx是你的windows用户\ncd c:/users/xxxx/.ssh/ \n# mac的话使用bash环境,$HOME也是一个环境变量（参考上面），指向当前用户的home目录\n# cd $HOME/.ssh/\nssh -T git@github.com\n```\n如果，显示```Hi unclevicky! You've successfully authenticated, but GitHub does not provide shell access.```,说明成功了。\n{% asset_img ssh_suc.png SSH配置成功截图 %}\n1. **不成功的可能原因**\n   + 如果不成功，加入-v参数，则使用以下命令，查看失败原因\n``` bash\n ssh -T -v git@github.com \n```\n   + X君第一次也失败，使用-v查看调试信息之后发现，是找不到秘钥。这个问题，是绝对路径和相对路径造成的，所以在.ssh的目录下，新建一个**config**的文件，制定秘钥的绝对路径即可:\n{% asset_img git_ssh.png SSH秘钥截图 %}\n``` bash\nHost github.com\nUser xxxx@xx.com # 你的邮箱地址\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile C:\\\\Users\\\\xxxx\\\\.ssh\\\\id_rsa # 你的私钥的保存路径和名字\nPort 443\n```\n\n\n### **将hexo发布到github**\n1. hexo本地环境测试【√】；github Page完成【√】；ssh配置完成【√】。剩下就是修改hexo的配置文件，然后发布到github page上，即可访问。\n2. 修改hexo博客目录的配置文件**_config.yml**,找到 **\"url:\"** 和 **\"deploy:\"**\n<p style=\"text-indent:2em\">\n   <font color='red'>\n   <b>\n\n   特殊说明：\n    + 如果github使用的“直接使用github个人主页”方法，根据上面让记住的连接，url和deploy的配置为：\n   </b>\n   </font>\n</p>\n\n``` bash\nurl: https://unclevicky.github.io\nroot: /\n...\n...\n\ndeploy:\n  type: git\n  repo: https://github.com/unclevicky/unclevicky.github.io.git\n\n```\n<p style=\"text-indent:2em\">\n   <font color='red'>\n   <b>\n\n   + 如果github使用的“项目的GitHub Pages实现多主页”方法，根据上面让记住的连接，url需要指定具体的项目名称，url和deploy的配置为：\n   </b>\n   </font>\n</p>\n\n``` bash\nurl: https://unclevicky.github.io/rabbitBear/\nroot: /rabbitBear\n...\n...\n\ndeploy:\n  type: git\n  repo: https://github.com/unclevicky/rabbitBear.git\n...\n...\n```\n\n**项目的GitHub Pages实现多主页的配置如下**\n\n``` bash\n# URL\n## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/'\nurl: https://unclevicky.github.io/rabbitBear/\nroot: /rabbitBear\npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n```\n\n``` bash\n# URL\n## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/'\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: git\n  repo: https://github.com/unclevicky/rabbitBear.git\n  branch: main\n```\n\n3. 在本地执行hexo的编译和发布命令，则可成功发布到github上\n``` bash\nhexo clean # 删除以前的发布\nhexo g -d  # 重新编译生成，并按配置文件中的github信息，发布到对应的网站上\n```\n\n\n### **公网访问访问博客主页**\n1. <font color='red'><b>直接个人主页方式</b></font>\n   https://xxxx.github.io/，xxxx是你的github用户名\n   例如：https://unclevicky.github.io/\n2. <font color='red'><b>项目多主页方式</b></font>\n   https://xxxx.github.io/yyyy/，xxxx是你的github用户名,yyyy是你的项目名\n   例如：https://unclevicky.github.io/rabbitBear/\n\n\n## **修改博客样式**\n1. 默认的样式不是很好看，可以自己DIY样式和功能，比如统计访问量、设置分类、增加订阅、回复等功能，这也是为什么要搭建自己模块的原因。**DIY！**\n2. 当然也可以使用网上那些达人们已经diy好的样式，比如X君给我推荐的buterfly这款样式。\n   + 下载样式到博客的themes目录，在线安装和手工下载都可以。以butterfly为例\n``` bash\n# 在cmd或bash下执行\n# 下载并安装样式文件\nnpm i hexo-theme-butterfly\n# 下载并安装该样式需要的插件，每个样式需要的插件不一样，根据实际需要来，否则有些样式显示不出来\nnpm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n3. hexo博客目录的配置文件**_config.yml**，找到\"theme\"，修改成刚下载的\"butterfly\"\n``` bash\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: butterfly\n```\n4. 最终效果如下\n{% asset_img butterfly.png butterfly样式效果 %}\n\n\n## **写新博客**\n1. 在**源文件**的根目录执行，```hexo new xxxx```,xxxx是博客名称，支持中文。例如:```hexo new 博客基础环境搭建（非常详细）```。\n2. 则在博客的\"source/_posts/\"目录下生产一个，同名的.md文件，例如\"hexo博客基础环境搭建（非常详细）.md\"，此文件就是我们的博客源文件，修改此文件，把博客内容写进去，然后使用前面提到的,```hexo clean``` ```hexo g -d```,即可完成编译和发布。\n3. **.md是markdown语言写的文件，非常简洁和灵活，至于如何使用.md文件写博客，将在后续的博客中陆续更新。本篇文章即是用此方法编写完成。对于我这个新手来说，入门还是比较简单的。**\n\n## The End！ Have Fun！","slug":"hexo博客基础环境搭建","published":1,"updated":"2021-02-07T09:42:06.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl680ghf1001ndwq85qkz540k","content":"<h2 id=\"【背景】\"><a href=\"#【背景】\" class=\"headerlink\" title=\"【背景】\"></a><strong>【背景】</strong></h2><p style=\"text-indent:2em\">\n我是一名学财务的文科生，没有任何计算机基础，但是喜欢写文章，之前都是在微信公众号上写，但是有诸多限制，于是萌生了想搭建一个自己的博客的念头。我把我的想法告诉了我的一个朋友（姑且称他为X君吧），X君帮我搭建了一个网站，并把过程写了一个简单的教程并讲给我听。我根据X君的教程和讲解，自己也把环境搭建起来了。在这里做一个记录。算是在新博客网站中的第一篇文章吧。\n</p>\n\n<h2 id=\"【目标】\"><a href=\"#【目标】\" class=\"headerlink\" title=\"【目标】\"></a><strong>【目标】</strong></h2><ol>\n<li>使用nodejs的hexo搭建本地博客系统</li>\n<li>使用git进行版本管理（和小伙伴们协同工作的必备良兔（tool））</li>\n<li>使用github进行代码托管（X君告诉我自己写的东西可以上传到这个网站，可以当作一个本地的备份，也可以随时随地工作，但是要注意隐私问题）</li>\n<li>使用github Page作为博客网站的访问（X君说这是一个免费的个人网页托管服务器，不是很懂，反正就是能通过他自定义并在公网上访问自己的文章）</li>\n</ol>\n<h2 id=\"【小白科普】\"><a href=\"#【小白科普】\" class=\"headerlink\" title=\"【小白科普】\"></a><strong>【小白科普】</strong></h2><ol>\n<li><strong>运行环境</strong><ul>\n<li>任何软件的运行都需要环境，比如win10需要在笔记本电脑上运行，andriod需要在手机上运行；笔记本电脑和手机就是win10和android这俩软件的运行环境。</li>\n<li>操作系统是一个特殊的软件，他们为其他软件的运行提供环境，比如QQ、微信都需要安装在win10、ios或android操作系统上才能运行，只不过他们要求的格式不一样，win10可以运行exe软件，ios可以运行dmg文件，andriod运行pkg文件等。</li>\n<li>针对那些没有可视化交互界面的软件，操作系统会给他们提供一个特殊的运行环境。比如win10的cmd运行环境，mac的bash环境，androi也有只不过我们在手机上不常用。（不太好理解，但是可以类比win10需要笔记本电脑提供环境，QQ需要win10操作系统提供环境，python等没有界面的软件需要cmd提供环境一样类比着理解）。</li>\n<li>python、nodejs、mysql等这些都是没有可视化交互界面的软件，所以需要我们在cmd或者bash中运行（X君说python和nodejs也有图形交互界面，但是为了让我更好的理解这些概念，所以就不推荐我使用）。</li>\n</ul>\n</li>\n<li><strong>环境变量</strong><ul>\n<li>上面提到了运行环境，但是我按X君的教程搭建环境的时候，经常<strong>提示某某文件后文件夹找不见</strong>，于是X君又给我普及了<strong>环境变量</strong>的概念。</li>\n<li>当我们使用cmd或bash运行一个软件时，会以以下顺序执行：<ul>\n<li>首先会在<strong>当前目录</strong>中寻找是否有该软件（例如python.exe）；</li>\n<li>如果没有则会在<strong>当前用户的PATH环境变量指定的所有目录中按先后顺序循环寻找</strong>，如果找到了就直接运行，不再往下找。这个PATH就是一个环境变量（可以理解为一个字符串），存放了一堆的文件夹目录，win10是以“;”隔开，mac是以“：”隔开，大概长下面这个样子。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Users/abbywalker/opt/anaconda3/bin:/Users/abbywalker/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.8/bin:/usr/<span class=\"built_in\">local</span>/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/<span class=\"built_in\">local</span>/mysql/bin</span><br></pre></td></tr></table></figure></li>\n<li>如果还没有则会继续在<strong>系统的PATH环境变量指定的所有目录中按先后顺序循环寻找</strong></li>\n<li>如果还是找不到，就会报错<strong>提示某某文件后文件夹找不见</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>运行软件的5个方法</strong><ul>\n<li>根据上面环境变量的介绍，运行软件可以有5种方法</li>\n<li>直接到该软件的安装目录下运行 （对应于环境变量中的<strong>当前目录</strong>）</li>\n<li>把该软件的安装目录加入到<strong>该用户的PATH变量</strong>中（具体方法后面讲）</li>\n<li>在当前运行的cmd或bash中临时指定，而不影响其他的程序运行（X君建议使用这种方法，这样可以同一个电脑安装多版本的软件，比如同时安装python2.7和3.7，通过这种方法临时指定当前运行的环境而不影响其他程序）（具体方法后面讲）</li>\n<li>把该软件的安装目录加入到<strong>系统的PATH变量</strong>中（具体方法后面讲）</li>\n<li>直接指定该软件安装目录的绝对路径进行执行，例如:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;/usr/<span class=\"built_in\">local</span>/mysql/bin/python <span class=\"comment\">#mac的bash环境</span></span><br><span class=\"line\">&gt;d:\\soft\\pytthon\\python.exe <span class=\"comment\">#win10的cmd环境</span></span><br></pre></td></tr></table></figure>\n<p style=\"text-indent:2em\">\n<b>好了，小白科普到此结束，下面进入本文正题。</b>\n</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"【环境准备】\"><a href=\"#【环境准备】\" class=\"headerlink\" title=\"【环境准备】\"></a><strong>【环境准备】</strong></h2><ol>\n<li>安装git</li>\n<li>安装nodejs</li>\n<li>安装hexo</li>\n<li>github搭建源文件个人仓库</li>\n<li><strong>github设置多Page</strong>（默认一个账户只能有一个主页Page）</li>\n<li>生产SSH并添加到github</li>\n<li>将hexo发布到github</li>\n<li>页面访问（本地预览和公网访问）</li>\n</ol>\n<p style=\"text-indent:2em\">\nPS：X君用的是windows，我用的是mac所以教程会写两份。\n</p>\n\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a><strong>安装git</strong></h3><ol>\n<li>windows的比较简单，直接下载软件，一路下一步即可；</li>\n<li>mac上安装稍微复杂一点，安装过程记录以下；<ul>\n<li>百度搜索 mac git安装，会提示到 <a href=\"https://git-scm.com/download/mac\">git-scm</a>去安装</li>\n<li>页面是英文的，按第一个教程，先安装<strong>homebrew</strong>,按照homebrew官网的提示，第一种方法直接安装,<code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code>需要翻墙 <strong>【失败】</strong>，按官网第二种方法，先下载下来，然后解压，会报错，好不容易解压出来了，运行依然会报错。<strong>【失败】</strong>。<strong>建议大家不要按这个方法安装，当然有兴趣的可以自己尝试。</strong></li>\n<li>鉴于<strong>homebrew</strong>的教训，所以<strong>XCode</strong>的方式，我也没有尝试。</li>\n<li>直接使用第三种方式，<strong>Binary installer</strong>，下载sourceforge编译好的安装包，虽然不是最新版，但是不影响咱们的使用。<strong>直接下载zip文件，解压出dmg文件，安装即可。</strong></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a><strong>安装nodejs</strong></h3><ol>\n<li>windows和mac上都比较简单，直接下载软件，一路下一步即可；</li>\n</ol>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a><strong>安装hexo</strong></h3><p>&ensp;&ensp;&ensp;&ensp;<strong>windows和mac是一样的</strong></p>\n<ol>\n<li><strong>在nodejs环境中（cmd或者bash）安装hexo包</strong>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>\n<li><strong>测试hexo是否成功</strong><ul>\n<li>初始化<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myBlog</span><br></pre></td></tr></table></figure></li>\n<li>安装基础环境包 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> myBlog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p style=\"text-indent:2em\">\n执行成功后，myBlog文件夹的结构如下:\n</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myBlog</span><br><span class=\"line\">├── _config.yml <span class=\"comment\"># 网站的配置信息，您可以在此配置大部分的参数。 </span></span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds <span class=\"comment\"># 模版文件夹</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span>  <span class=\"comment\"># 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span></span><br><span class=\"line\">|   ├── _drafts <span class=\"comment\"># 草稿文件</span></span><br><span class=\"line\">|   └── _posts <span class=\"comment\"># 文章Markdowm文件 </span></span><br><span class=\"line\">└── themes  <span class=\"comment\"># 主题文件夹</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>本地启动hexo服务器进行测试  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n&ensp;&ensp;&ensp;&ensp;在浏览器中输入<strong><a href=\"http://localhost:4000/\">http://localhost:4000</a></strong>，如果看到如下效果，则证明hexo环境搭建成功:<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/hexo-hello.png\" class title=\"初始化\">\n\n</li>\n</ul>\n<h3 id=\"github搭建个人源码仓库\"><a href=\"#github搭建个人源码仓库\" class=\"headerlink\" title=\"github搭建个人源码仓库\"></a><strong>github搭建个人源码仓库</strong></h3><p style=\"text-indent:2em\">\n   <font color=\"red\">  \n   根据X君的建议，为了保证隐私安全和版权，自己写的博客的<b>源文件</b>单独保存在一个github仓库里，供自己使用；把hexo编译后的<b>发布版本</b>保存在另外一个github仓库里,通过github Page供大家访问。\n   </font>\n</p>\n\n<ol>\n<li><p>注册github（略）。</p>\n</li>\n<li><p>登录github（略）</p>\n</li>\n<li><p>新建个人仓库 <strong>（建议私人库）</strong></p>\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_new.png\" class title=\"点击新建按钮\">\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_new_config.png\" class title=\"填入相关信息\"></li>\n<li><p>导出个人仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/unclevicky/myBlogSrc.git .</span><br></pre></td></tr></table></figure></li>\n<li><p>把刚建立的<strong>myBlog文件下的所有内容</strong>放到刚导出的github目录，然后再提交</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;第一次提交我的blog&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h3 id=\"github设置多Page\"><a href=\"#github设置多Page\" class=\"headerlink\" title=\"github设置多Page\"></a><strong>github设置多Page</strong></h3></li>\n<li><p><font color=\"red\">直接使用github个人主页</font></p>\n<ul>\n<li>一个github主页只能有一个个人主页</li>\n<li>新建一个<strong>与账户同名的xxxx.github.io</strong> (xxxx是你自己的账户名，X君的是unclevicky.github.io)</li>\n<li><strong>记录下这个特殊仓库的git地址供后面使用</strong>,<a href=\"https://github.com/unclevicky/unclevicky.github.io.git\">https://github.com/unclevicky/unclevicky.github.io.git</a></li>\n</ul>\n</li>\n<li><p><font color=\"red\"><b>利用每个项目的GitHub Pages实现多主页访问</b></font></p>\n<ul>\n<li>新建一个仓库项目，方法同上<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_new.png\" class title=\"点击新建按钮\"></li>\n<li>输入项目名称等信息(建议公开项目,不公开也行其实)，截图里用的名字是”myBlogPub”，写教程的时候已经改成了”rabbitBear”。可根据需要自己修改。<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_new_pub.png\" class title=\"填入相关信息\"></li>\n<li>在github中配置页面，向下滚动<b>设置项目GitHub Pages信息</b><img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_setting.png\" class title=\"设置GitHub Pages\">\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_pub_page.png\" class title=\"设置GitHub Pages\"></li>\n<li>记住两个地址<ul>\n<li><strong>记住项目仓库的地址，后面配置hexo发布时使用</strong>,<a href=\"https://github.com/unclevicky/rabbitBear.git\">https://github.com/unclevicky/rabbitBear.git</a></li>\n<li><strong>记住项目Github Page地址，后面访问博客时使用</strong>,<a href=\"https://unclevicky.github.io/rabbitBear/\">https://unclevicky.github.io/rabbitBear/</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"生产SSH并添加到github\"><a href=\"#生产SSH并添加到github\" class=\"headerlink\" title=\"生产SSH并添加到github\"></a><strong>生产SSH并添加到github</strong></h3><ol>\n<li><p>配置一个SSH绑定到github，SSH一个是私钥，一个是公钥，私钥保存到个人本地（千万别泄露），公钥配置到github上。（不太懂，反正类似我党当年在小黑板上登一个报纸-公钥，每个人拿自己的暗号-私钥，去破解想要的信息一样。同一份报纸，每个人私钥不同，获取的情报也不同一样。姑且这理解吧）。</p>\n</li>\n<li><p>回到本地的git环境,设置github用户的全局用户和邮箱，如果已设置可以忽略。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用以下语句检测是否设置，如果返回为空，则证明未设置</span></span><br><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果没设置，则使用下面两句话设置即可</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;yourname&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>然后创建SSH,使用以下语句，然后一路回车</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># windows的话使用cmd环境,xxxx是你的windows用户</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> c:/users/xxxx/.ssh/ </span><br><span class=\"line\"><span class=\"comment\"># mac的话使用bash环境,$HOME也是一个环境变量（参考上面），指向当前用户的home目录</span></span><br><span class=\"line\"><span class=\"comment\"># cd $HOME/.ssh/</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/git_ssh.png\" class title=\"SSH秘钥截图\">\n</li>\n<li><p>将SSH的公钥，绑定到github上。</p>\n<ul>\n<li>打开上面的<strong>id_rsa.pub</strong>文件，把所有的内容拷贝下来</li>\n<li>粘贴到github的SSH里面<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_ssh.png\" class title=\"用户配置页面截图\">\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_ssh_new.png\" class title=\"SSH配置页面截图\">\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_ssh_newdetail.png\" class title=\"新建配置截图\"></li>\n</ul>\n</li>\n<li><p>在本地cmd或bash环境测试秘钥是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># windows的话使用cmd环境,xxxx是你的windows用户</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> c:/users/xxxx/.ssh/ </span><br><span class=\"line\"><span class=\"comment\"># mac的话使用bash环境,$HOME也是一个环境变量（参考上面），指向当前用户的home目录</span></span><br><span class=\"line\"><span class=\"comment\"># cd $HOME/.ssh/</span></span><br><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>如果，显示<code>Hi unclevicky! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>,说明成功了。</p>\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/ssh_suc.png\" class title=\"SSH配置成功截图\"></li>\n<li><p><strong>不成功的可能原因</strong></p>\n<ul>\n<li>如果不成功，加入-v参数，则使用以下命令，查看失败原因<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T -v git@github.com </span><br></pre></td></tr></table></figure></li>\n<li>X君第一次也失败，使用-v查看调试信息之后发现，是找不到秘钥。这个问题，是绝对路径和相对路径造成的，所以在.ssh的目录下，新建一个<strong>config</strong>的文件，制定秘钥的绝对路径即可:<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/git_ssh.png\" class title=\"SSH秘钥截图\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">User xxxx@xx.com <span class=\"comment\"># 你的邮箱地址</span></span><br><span class=\"line\">Hostname ssh.github.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile C:\\\\Users\\\\xxxx\\\\.ssh\\\\id_rsa <span class=\"comment\"># 你的私钥的保存路径和名字</span></span><br><span class=\"line\">Port 443</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"将hexo发布到github\"><a href=\"#将hexo发布到github\" class=\"headerlink\" title=\"将hexo发布到github\"></a><strong>将hexo发布到github</strong></h3><ol>\n<li><p>hexo本地环境测试【√】；github Page完成【√】；ssh配置完成【√】。剩下就是修改hexo的配置文件，然后发布到github page上，即可访问。</p>\n</li>\n<li><p>修改hexo博客目录的配置文件<strong>_config.yml</strong>,找到 <strong>“url:”</strong> 和 <strong>“deploy:”</strong></p>\n<p style=\"text-indent:2em\">\n<font color=\"red\">\n<b>\n\n<p>特殊说明：</p>\n<ul>\n<li>如果github使用的“直接使用github个人主页”方法，根据上面让记住的连接，url和deploy的配置为：</li></ul></b>\n</font>\n</p>\n\n</li>\n\n\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: https://unclevicky.github.io</span><br><span class=\"line\">root: /</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/unclevicky/unclevicky.github.io.git</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p style=\"text-indent:2em\">\n   <font color=\"red\">\n   <b>\n\n<ul>\n<li>如果github使用的“项目的GitHub Pages实现多主页”方法，根据上面让记住的连接，url需要指定具体的项目名称，url和deploy的配置为：</li></ul></b>\n</font>\n</p>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: https://unclevicky.github.io/rabbitBear/</span><br><span class=\"line\">root: /rabbitBear</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/unclevicky/rabbitBear.git</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>项目的GitHub Pages实现多主页的配置如下</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class=\"line\">url: https://unclevicky.github.io/rabbitBear/</span><br><span class=\"line\">root: /rabbitBear</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\">pretty_urls:</span><br><span class=\"line\">  trailing_index: <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class=\"line\">  trailing_html: <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/unclevicky/rabbitBear.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在本地执行hexo的编译和发布命令，则可成功发布到github上<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\"># 删除以前的发布</span></span><br><span class=\"line\">hexo g -d  <span class=\"comment\"># 重新编译生成，并按配置文件中的github信息，发布到对应的网站上</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"公网访问访问博客主页\"><a href=\"#公网访问访问博客主页\" class=\"headerlink\" title=\"公网访问访问博客主页\"></a><strong>公网访问访问博客主页</strong></h3><ol>\n<li><font color=\"red\"><b>直接个人主页方式</b></font><br><a href=\"https://xxxx.github.io/%EF%BC%8Cxxxx%E6%98%AF%E4%BD%A0%E7%9A%84github%E7%94%A8%E6%88%B7%E5%90%8D\">https://xxxx.github.io/，xxxx是你的github用户名</a><br>例如：<a href=\"https://unclevicky.github.io/\">https://unclevicky.github.io/</a></li>\n<li><font color=\"red\"><b>项目多主页方式</b></font><br><a href=\"https://xxxx.github.io/yyyy/%EF%BC%8Cxxxx%E6%98%AF%E4%BD%A0%E7%9A%84github%E7%94%A8%E6%88%B7%E5%90%8D,yyyy%E6%98%AF%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8D\">https://xxxx.github.io/yyyy/，xxxx是你的github用户名,yyyy是你的项目名</a><br>例如：<a href=\"https://unclevicky.github.io/rabbitBear/\">https://unclevicky.github.io/rabbitBear/</a></li>\n</ol>\n<h2 id=\"修改博客样式\"><a href=\"#修改博客样式\" class=\"headerlink\" title=\"修改博客样式\"></a><strong>修改博客样式</strong></h2><ol>\n<li>默认的样式不是很好看，可以自己DIY样式和功能，比如统计访问量、设置分类、增加订阅、回复等功能，这也是为什么要搭建自己模块的原因。<strong>DIY！</strong></li>\n<li>当然也可以使用网上那些达人们已经diy好的样式，比如X君给我推荐的buterfly这款样式。<ul>\n<li>下载样式到博客的themes目录，在线安装和手工下载都可以。以butterfly为例<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在cmd或bash下执行</span></span><br><span class=\"line\"><span class=\"comment\"># 下载并安装样式文件</span></span><br><span class=\"line\">npm i hexo-theme-butterfly</span><br><span class=\"line\"><span class=\"comment\"># 下载并安装该样式需要的插件，每个样式需要的插件不一样，根据实际需要来，否则有些样式显示不出来</span></span><br><span class=\"line\">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>hexo博客目录的配置文件<strong>_config.yml</strong>，找到”theme”，修改成刚下载的”butterfly”<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\">theme: butterfly</span><br></pre></td></tr></table></figure></li>\n<li>最终效果如下<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/butterfly.png\" class title=\"butterfly样式效果\">\n\n\n</li>\n</ol>\n<h2 id=\"写新博客\"><a href=\"#写新博客\" class=\"headerlink\" title=\"写新博客\"></a><strong>写新博客</strong></h2><ol>\n<li>在<strong>源文件</strong>的根目录执行，<code>hexo new xxxx</code>,xxxx是博客名称，支持中文。例如:<code>hexo new 博客基础环境搭建（非常详细）</code>。</li>\n<li>则在博客的”source/_posts/“目录下生产一个，同名的.md文件，例如”hexo博客基础环境搭建（非常详细）.md”，此文件就是我们的博客源文件，修改此文件，把博客内容写进去，然后使用前面提到的,<code>hexo clean</code> <code>hexo g -d</code>,即可完成编译和发布。</li>\n<li><strong>.md是markdown语言写的文件，非常简洁和灵活，至于如何使用.md文件写博客，将在后续的博客中陆续更新。本篇文章即是用此方法编写完成。对于我这个新手来说，入门还是比较简单的。</strong></li>\n</ol>\n<h2 id=\"The-End！-Have-Fun！\"><a href=\"#The-End！-Have-Fun！\" class=\"headerlink\" title=\"The End！ Have Fun！\"></a>The End！ Have Fun！</h2>","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h2 id=\"【背景】\"><a href=\"#【背景】\" class=\"headerlink\" title=\"【背景】\"></a><strong>【背景】</strong></h2><p style=\"text-indent:2em\">\n我是一名学财务的文科生，没有任何计算机基础，但是喜欢写文章，之前都是在微信公众号上写，但是有诸多限制，于是萌生了想搭建一个自己的博客的念头。我把我的想法告诉了我的一个朋友（姑且称他为X君吧），X君帮我搭建了一个网站，并把过程写了一个简单的教程并讲给我听。我根据X君的教程和讲解，自己也把环境搭建起来了。在这里做一个记录。算是在新博客网站中的第一篇文章吧。\n</p>\n\n<h2 id=\"【目标】\"><a href=\"#【目标】\" class=\"headerlink\" title=\"【目标】\"></a><strong>【目标】</strong></h2><ol>\n<li>使用nodejs的hexo搭建本地博客系统</li>\n<li>使用git进行版本管理（和小伙伴们协同工作的必备良兔（tool））</li>\n<li>使用github进行代码托管（X君告诉我自己写的东西可以上传到这个网站，可以当作一个本地的备份，也可以随时随地工作，但是要注意隐私问题）</li>\n<li>使用github Page作为博客网站的访问（X君说这是一个免费的个人网页托管服务器，不是很懂，反正就是能通过他自定义并在公网上访问自己的文章）</li>\n</ol>\n<h2 id=\"【小白科普】\"><a href=\"#【小白科普】\" class=\"headerlink\" title=\"【小白科普】\"></a><strong>【小白科普】</strong></h2><ol>\n<li><strong>运行环境</strong><ul>\n<li>任何软件的运行都需要环境，比如win10需要在笔记本电脑上运行，andriod需要在手机上运行；笔记本电脑和手机就是win10和android这俩软件的运行环境。</li>\n<li>操作系统是一个特殊的软件，他们为其他软件的运行提供环境，比如QQ、微信都需要安装在win10、ios或android操作系统上才能运行，只不过他们要求的格式不一样，win10可以运行exe软件，ios可以运行dmg文件，andriod运行pkg文件等。</li>\n<li>针对那些没有可视化交互界面的软件，操作系统会给他们提供一个特殊的运行环境。比如win10的cmd运行环境，mac的bash环境，androi也有只不过我们在手机上不常用。（不太好理解，但是可以类比win10需要笔记本电脑提供环境，QQ需要win10操作系统提供环境，python等没有界面的软件需要cmd提供环境一样类比着理解）。</li>\n<li>python、nodejs、mysql等这些都是没有可视化交互界面的软件，所以需要我们在cmd或者bash中运行（X君说python和nodejs也有图形交互界面，但是为了让我更好的理解这些概念，所以就不推荐我使用）。</li>\n</ul>\n</li>\n<li><strong>环境变量</strong><ul>\n<li>上面提到了运行环境，但是我按X君的教程搭建环境的时候，经常<strong>提示某某文件后文件夹找不见</strong>，于是X君又给我普及了<strong>环境变量</strong>的概念。</li>\n<li>当我们使用cmd或bash运行一个软件时，会以以下顺序执行：<ul>\n<li>首先会在<strong>当前目录</strong>中寻找是否有该软件（例如python.exe）；</li>\n<li>如果没有则会在<strong>当前用户的PATH环境变量指定的所有目录中按先后顺序循环寻找</strong>，如果找到了就直接运行，不再往下找。这个PATH就是一个环境变量（可以理解为一个字符串），存放了一堆的文件夹目录，win10是以“;”隔开，mac是以“：”隔开，大概长下面这个样子。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Users/abbywalker/opt/anaconda3/bin:/Users/abbywalker/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/3.8/bin:/usr/<span class=\"built_in\">local</span>/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/<span class=\"built_in\">local</span>/mysql/bin</span><br></pre></td></tr></table></figure></li>\n<li>如果还没有则会继续在<strong>系统的PATH环境变量指定的所有目录中按先后顺序循环寻找</strong></li>\n<li>如果还是找不到，就会报错<strong>提示某某文件后文件夹找不见</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>运行软件的5个方法</strong><ul>\n<li>根据上面环境变量的介绍，运行软件可以有5种方法</li>\n<li>直接到该软件的安装目录下运行 （对应于环境变量中的<strong>当前目录</strong>）</li>\n<li>把该软件的安装目录加入到<strong>该用户的PATH变量</strong>中（具体方法后面讲）</li>\n<li>在当前运行的cmd或bash中临时指定，而不影响其他的程序运行（X君建议使用这种方法，这样可以同一个电脑安装多版本的软件，比如同时安装python2.7和3.7，通过这种方法临时指定当前运行的环境而不影响其他程序）（具体方法后面讲）</li>\n<li>把该软件的安装目录加入到<strong>系统的PATH变量</strong>中（具体方法后面讲）</li>\n<li>直接指定该软件安装目录的绝对路径进行执行，例如:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;/usr/<span class=\"built_in\">local</span>/mysql/bin/python <span class=\"comment\">#mac的bash环境</span></span><br><span class=\"line\">&gt;d:\\soft\\pytthon\\python.exe <span class=\"comment\">#win10的cmd环境</span></span><br></pre></td></tr></table></figure>\n<p style=\"text-indent:2em\">\n<b>好了，小白科普到此结束，下面进入本文正题。</b>\n</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"【环境准备】\"><a href=\"#【环境准备】\" class=\"headerlink\" title=\"【环境准备】\"></a><strong>【环境准备】</strong></h2><ol>\n<li>安装git</li>\n<li>安装nodejs</li>\n<li>安装hexo</li>\n<li>github搭建源文件个人仓库</li>\n<li><strong>github设置多Page</strong>（默认一个账户只能有一个主页Page）</li>\n<li>生产SSH并添加到github</li>\n<li>将hexo发布到github</li>\n<li>页面访问（本地预览和公网访问）</li>\n</ol>\n<p style=\"text-indent:2em\">\nPS：X君用的是windows，我用的是mac所以教程会写两份。\n</p>\n\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a><strong>安装git</strong></h3><ol>\n<li>windows的比较简单，直接下载软件，一路下一步即可；</li>\n<li>mac上安装稍微复杂一点，安装过程记录以下；<ul>\n<li>百度搜索 mac git安装，会提示到 <a href=\"https://git-scm.com/download/mac\">git-scm</a>去安装</li>\n<li>页面是英文的，按第一个教程，先安装<strong>homebrew</strong>,按照homebrew官网的提示，第一种方法直接安装,<code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code>需要翻墙 <strong>【失败】</strong>，按官网第二种方法，先下载下来，然后解压，会报错，好不容易解压出来了，运行依然会报错。<strong>【失败】</strong>。<strong>建议大家不要按这个方法安装，当然有兴趣的可以自己尝试。</strong></li>\n<li>鉴于<strong>homebrew</strong>的教训，所以<strong>XCode</strong>的方式，我也没有尝试。</li>\n<li>直接使用第三种方式，<strong>Binary installer</strong>，下载sourceforge编译好的安装包，虽然不是最新版，但是不影响咱们的使用。<strong>直接下载zip文件，解压出dmg文件，安装即可。</strong></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a><strong>安装nodejs</strong></h3><ol>\n<li>windows和mac上都比较简单，直接下载软件，一路下一步即可；</li>\n</ol>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a><strong>安装hexo</strong></h3><p>&ensp;&ensp;&ensp;&ensp;<strong>windows和mac是一样的</strong></p>\n<ol>\n<li><strong>在nodejs环境中（cmd或者bash）安装hexo包</strong>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>\n<li><strong>测试hexo是否成功</strong><ul>\n<li>初始化<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myBlog</span><br></pre></td></tr></table></figure></li>\n<li>安装基础环境包 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> myBlog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p style=\"text-indent:2em\">\n执行成功后，myBlog文件夹的结构如下:\n</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myBlog</span><br><span class=\"line\">├── _config.yml <span class=\"comment\"># 网站的配置信息，您可以在此配置大部分的参数。 </span></span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds <span class=\"comment\"># 模版文件夹</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span>  <span class=\"comment\"># 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span></span><br><span class=\"line\">|   ├── _drafts <span class=\"comment\"># 草稿文件</span></span><br><span class=\"line\">|   └── _posts <span class=\"comment\"># 文章Markdowm文件 </span></span><br><span class=\"line\">└── themes  <span class=\"comment\"># 主题文件夹</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>本地启动hexo服务器进行测试  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n&ensp;&ensp;&ensp;&ensp;在浏览器中输入<strong><a href=\"http://localhost:4000/\">http://localhost:4000</a></strong>，如果看到如下效果，则证明hexo环境搭建成功:<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/hexo-hello.png\" class title=\"初始化\">\n\n</li>\n</ul>\n<h3 id=\"github搭建个人源码仓库\"><a href=\"#github搭建个人源码仓库\" class=\"headerlink\" title=\"github搭建个人源码仓库\"></a><strong>github搭建个人源码仓库</strong></h3><p style=\"text-indent:2em\">\n   <font color=\"red\">  \n   根据X君的建议，为了保证隐私安全和版权，自己写的博客的<b>源文件</b>单独保存在一个github仓库里，供自己使用；把hexo编译后的<b>发布版本</b>保存在另外一个github仓库里,通过github Page供大家访问。\n   </font>\n</p>\n\n<ol>\n<li><p>注册github（略）。</p>\n</li>\n<li><p>登录github（略）</p>\n</li>\n<li><p>新建个人仓库 <strong>（建议私人库）</strong></p>\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_new.png\" class title=\"点击新建按钮\">\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_new_config.png\" class title=\"填入相关信息\"></li>\n<li><p>导出个人仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/unclevicky/myBlogSrc.git .</span><br></pre></td></tr></table></figure></li>\n<li><p>把刚建立的<strong>myBlog文件下的所有内容</strong>放到刚导出的github目录，然后再提交</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;第一次提交我的blog&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h3 id=\"github设置多Page\"><a href=\"#github设置多Page\" class=\"headerlink\" title=\"github设置多Page\"></a><strong>github设置多Page</strong></h3></li>\n<li><p><font color=\"red\">直接使用github个人主页</font></p>\n<ul>\n<li>一个github主页只能有一个个人主页</li>\n<li>新建一个<strong>与账户同名的xxxx.github.io</strong> (xxxx是你自己的账户名，X君的是unclevicky.github.io)</li>\n<li><strong>记录下这个特殊仓库的git地址供后面使用</strong>,<a href=\"https://github.com/unclevicky/unclevicky.github.io.git\">https://github.com/unclevicky/unclevicky.github.io.git</a></li>\n</ul>\n</li>\n<li><p><font color=\"red\"><b>利用每个项目的GitHub Pages实现多主页访问</b></font></p>\n<ul>\n<li>新建一个仓库项目，方法同上<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_new.png\" class title=\"点击新建按钮\"></li>\n<li>输入项目名称等信息(建议公开项目,不公开也行其实)，截图里用的名字是”myBlogPub”，写教程的时候已经改成了”rabbitBear”。可根据需要自己修改。<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_new_pub.png\" class title=\"填入相关信息\"></li>\n<li>在github中配置页面，向下滚动<b>设置项目GitHub Pages信息</b><img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_setting.png\" class title=\"设置GitHub Pages\">\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_pub_page.png\" class title=\"设置GitHub Pages\"></li>\n<li>记住两个地址<ul>\n<li><strong>记住项目仓库的地址，后面配置hexo发布时使用</strong>,<a href=\"https://github.com/unclevicky/rabbitBear.git\">https://github.com/unclevicky/rabbitBear.git</a></li>\n<li><strong>记住项目Github Page地址，后面访问博客时使用</strong>,<a href=\"https://unclevicky.github.io/rabbitBear/\">https://unclevicky.github.io/rabbitBear/</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"生产SSH并添加到github\"><a href=\"#生产SSH并添加到github\" class=\"headerlink\" title=\"生产SSH并添加到github\"></a><strong>生产SSH并添加到github</strong></h3><ol>\n<li><p>配置一个SSH绑定到github，SSH一个是私钥，一个是公钥，私钥保存到个人本地（千万别泄露），公钥配置到github上。（不太懂，反正类似我党当年在小黑板上登一个报纸-公钥，每个人拿自己的暗号-私钥，去破解想要的信息一样。同一份报纸，每个人私钥不同，获取的情报也不同一样。姑且这理解吧）。</p>\n</li>\n<li><p>回到本地的git环境,设置github用户的全局用户和邮箱，如果已设置可以忽略。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用以下语句检测是否设置，如果返回为空，则证明未设置</span></span><br><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果没设置，则使用下面两句话设置即可</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;yourname&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>然后创建SSH,使用以下语句，然后一路回车</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># windows的话使用cmd环境,xxxx是你的windows用户</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> c:/users/xxxx/.ssh/ </span><br><span class=\"line\"><span class=\"comment\"># mac的话使用bash环境,$HOME也是一个环境变量（参考上面），指向当前用户的home目录</span></span><br><span class=\"line\"><span class=\"comment\"># cd $HOME/.ssh/</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/git_ssh.png\" class title=\"SSH秘钥截图\">\n</li>\n<li><p>将SSH的公钥，绑定到github上。</p>\n<ul>\n<li>打开上面的<strong>id_rsa.pub</strong>文件，把所有的内容拷贝下来</li>\n<li>粘贴到github的SSH里面<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_ssh.png\" class title=\"用户配置页面截图\">\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_ssh_new.png\" class title=\"SSH配置页面截图\">\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/github_ssh_newdetail.png\" class title=\"新建配置截图\"></li>\n</ul>\n</li>\n<li><p>在本地cmd或bash环境测试秘钥是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># windows的话使用cmd环境,xxxx是你的windows用户</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> c:/users/xxxx/.ssh/ </span><br><span class=\"line\"><span class=\"comment\"># mac的话使用bash环境,$HOME也是一个环境变量（参考上面），指向当前用户的home目录</span></span><br><span class=\"line\"><span class=\"comment\"># cd $HOME/.ssh/</span></span><br><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>如果，显示<code>Hi unclevicky! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>,说明成功了。</p>\n<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/ssh_suc.png\" class title=\"SSH配置成功截图\"></li>\n<li><p><strong>不成功的可能原因</strong></p>\n<ul>\n<li>如果不成功，加入-v参数，则使用以下命令，查看失败原因<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T -v git@github.com </span><br></pre></td></tr></table></figure></li>\n<li>X君第一次也失败，使用-v查看调试信息之后发现，是找不到秘钥。这个问题，是绝对路径和相对路径造成的，所以在.ssh的目录下，新建一个<strong>config</strong>的文件，制定秘钥的绝对路径即可:<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/git_ssh.png\" class title=\"SSH秘钥截图\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">User xxxx@xx.com <span class=\"comment\"># 你的邮箱地址</span></span><br><span class=\"line\">Hostname ssh.github.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile C:\\\\Users\\\\xxxx\\\\.ssh\\\\id_rsa <span class=\"comment\"># 你的私钥的保存路径和名字</span></span><br><span class=\"line\">Port 443</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"将hexo发布到github\"><a href=\"#将hexo发布到github\" class=\"headerlink\" title=\"将hexo发布到github\"></a><strong>将hexo发布到github</strong></h3><ol>\n<li><p>hexo本地环境测试【√】；github Page完成【√】；ssh配置完成【√】。剩下就是修改hexo的配置文件，然后发布到github page上，即可访问。</p>\n</li>\n<li><p>修改hexo博客目录的配置文件<strong>_config.yml</strong>,找到 <strong>“url:”</strong> 和 <strong>“deploy:”</strong></p>\n<p style=\"text-indent:2em\">\n<font color=\"red\">\n<b>\n\n<p>特殊说明：</p>\n<ul>\n<li>如果github使用的“直接使用github个人主页”方法，根据上面让记住的连接，url和deploy的配置为：</li></ul></b>\n</font>\n</p>\n\n</li>\n\n\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: https://unclevicky.github.io</span><br><span class=\"line\">root: /</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/unclevicky/unclevicky.github.io.git</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p style=\"text-indent:2em\">\n   <font color=\"red\">\n   <b>\n\n<ul>\n<li>如果github使用的“项目的GitHub Pages实现多主页”方法，根据上面让记住的连接，url需要指定具体的项目名称，url和deploy的配置为：</li></ul></b>\n</font>\n</p>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: https://unclevicky.github.io/rabbitBear/</span><br><span class=\"line\">root: /rabbitBear</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/unclevicky/rabbitBear.git</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>项目的GitHub Pages实现多主页的配置如下</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class=\"line\">url: https://unclevicky.github.io/rabbitBear/</span><br><span class=\"line\">root: /rabbitBear</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\">pretty_urls:</span><br><span class=\"line\">  trailing_index: <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class=\"line\">  trailing_html: <span class=\"literal\">true</span> <span class=\"comment\"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/unclevicky/rabbitBear.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在本地执行hexo的编译和发布命令，则可成功发布到github上<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\"># 删除以前的发布</span></span><br><span class=\"line\">hexo g -d  <span class=\"comment\"># 重新编译生成，并按配置文件中的github信息，发布到对应的网站上</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"公网访问访问博客主页\"><a href=\"#公网访问访问博客主页\" class=\"headerlink\" title=\"公网访问访问博客主页\"></a><strong>公网访问访问博客主页</strong></h3><ol>\n<li><font color=\"red\"><b>直接个人主页方式</b></font><br><a href=\"https://xxxx.github.io/%EF%BC%8Cxxxx%E6%98%AF%E4%BD%A0%E7%9A%84github%E7%94%A8%E6%88%B7%E5%90%8D\">https://xxxx.github.io/，xxxx是你的github用户名</a><br>例如：<a href=\"https://unclevicky.github.io/\">https://unclevicky.github.io/</a></li>\n<li><font color=\"red\"><b>项目多主页方式</b></font><br><a href=\"https://xxxx.github.io/yyyy/%EF%BC%8Cxxxx%E6%98%AF%E4%BD%A0%E7%9A%84github%E7%94%A8%E6%88%B7%E5%90%8D,yyyy%E6%98%AF%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8D\">https://xxxx.github.io/yyyy/，xxxx是你的github用户名,yyyy是你的项目名</a><br>例如：<a href=\"https://unclevicky.github.io/rabbitBear/\">https://unclevicky.github.io/rabbitBear/</a></li>\n</ol>\n<h2 id=\"修改博客样式\"><a href=\"#修改博客样式\" class=\"headerlink\" title=\"修改博客样式\"></a><strong>修改博客样式</strong></h2><ol>\n<li>默认的样式不是很好看，可以自己DIY样式和功能，比如统计访问量、设置分类、增加订阅、回复等功能，这也是为什么要搭建自己模块的原因。<strong>DIY！</strong></li>\n<li>当然也可以使用网上那些达人们已经diy好的样式，比如X君给我推荐的buterfly这款样式。<ul>\n<li>下载样式到博客的themes目录，在线安装和手工下载都可以。以butterfly为例<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在cmd或bash下执行</span></span><br><span class=\"line\"><span class=\"comment\"># 下载并安装样式文件</span></span><br><span class=\"line\">npm i hexo-theme-butterfly</span><br><span class=\"line\"><span class=\"comment\"># 下载并安装该样式需要的插件，每个样式需要的插件不一样，根据实际需要来，否则有些样式显示不出来</span></span><br><span class=\"line\">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>hexo博客目录的配置文件<strong>_config.yml</strong>，找到”theme”，修改成刚下载的”butterfly”<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\">theme: butterfly</span><br></pre></td></tr></table></figure></li>\n<li>最终效果如下<img src=\"/rabbitBear/2021/02/07/hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/butterfly.png\" class title=\"butterfly样式效果\">\n\n\n</li>\n</ol>\n<h2 id=\"写新博客\"><a href=\"#写新博客\" class=\"headerlink\" title=\"写新博客\"></a><strong>写新博客</strong></h2><ol>\n<li>在<strong>源文件</strong>的根目录执行，<code>hexo new xxxx</code>,xxxx是博客名称，支持中文。例如:<code>hexo new 博客基础环境搭建（非常详细）</code>。</li>\n<li>则在博客的”source/_posts/“目录下生产一个，同名的.md文件，例如”hexo博客基础环境搭建（非常详细）.md”，此文件就是我们的博客源文件，修改此文件，把博客内容写进去，然后使用前面提到的,<code>hexo clean</code> <code>hexo g -d</code>,即可完成编译和发布。</li>\n<li><strong>.md是markdown语言写的文件，非常简洁和灵活，至于如何使用.md文件写博客，将在后续的博客中陆续更新。本篇文章即是用此方法编写完成。对于我这个新手来说，入门还是比较简单的。</strong></li>\n</ol>\n<h2 id=\"The-End！-Have-Fun！\"><a href=\"#The-End！-Have-Fun！\" class=\"headerlink\" title=\"The End！ Have Fun！\"></a>The End！ Have Fun！</h2>"},{"title":"【半自动版】python批量下载公众号历史文章（一）","date":"2022-07-27T05:50:59.000Z","_content":"\n### **【老博客地址】**\n&emsp;&emsp;[【CSDN】博客主页](https://blog.csdn.net/MissYourKiss/)\n&emsp;&emsp;[【纯技术交流】python批量下载公众号历史文章（一）](https://blog.csdn.net/MissYourKiss/article/details/100254510)\n&emsp;&emsp;*(在刊载一段时间后，莫名被吞掉了,所以在这里补档)*\n&emsp;&emsp;[python批量下载公众号历史文章（二）](https://blog.csdn.net/MissYourKiss/article/details/100661899)\n\n### **【写在前面】**\n<p style=\"text-indent:2em\">\n前些天和同事讨论问题，什么是人才？讨论细节就不表了，最终总结为一句话：能解决问题的人才是人才。自己爱交朋友，很多朋友都在我有困难的时候帮助过我，也希望自己能够帮助朋友，成为能帮朋友解决问题的人才，所以朋友的请求从来都是来者不拒，力所能及之事一定全力办到！\n</p>\n<p style=\"text-indent:2em\">\n基于这点，给自己挖了很多坑：前些日子写的学习强国自动学习已经完成了一个初步版本，能够自动读文章、自动学习视频、自动分享，但是还不能自动答题，朋友说已经够用了，不过还是希望有时间了完成这块儿的内容；想读黄易老爷子武侠的那位朋友的问题也解决了，虽然下载下来的文字部分章节格式上有些乱，但也满足了朋友的要求，够用就行；学习Python也是一样，因时间关系没有系统的去学习过，只是通过解决各种问题达到学以致用，够用就行。很多博客文章，写有序号，都是计划要分段完成的，希望自己有一天能把所有的坑都填完了。\n</p>\n\n### **【背景】**\n<p style=\"text-indent:2em\">\n昨天和朋友去野钓，路上谈起股票。今年截止到目前，他的收益是40%多。问他炒股的心得，他是数据流派，经常看财务数据，就推荐了几个公众号，同时提出了一个请求，有些公众号历史文章太多，每次翻看之前的文章都得重头刷，问我能不能把这些文章下载到本地，自己想看的时候就看。想着不难，就答应姑且一试。\n</p>\n\n### **【目标】**\n&emsp;&emsp;第一个版本，只是为了实现下载朋友指定的公众号的历史文章，并转换成pdf方便阅读。很多需要手工配合，算是一个半自动的版本吧。\n&emsp;&emsp;后续会陆续减少手工，并把文章存储在数据库里，支持检索等。\n\n### **【思路】**\n&emsp;&emsp;和从网页上爬取小说不同，微信的公众号是通过app操作进行爬取，所以不能直接用chrome查看网页源码进行解析，需要用到第三方抓包工具，网上看了下用的比较多的有fiddler和anyproxy，前者比较简单，就选择了前者，思路如下：\n&emsp;&emsp;1、通过fiddler抓取相应公众号的包（需要手动）；\n&emsp;&emsp;2、通过python进行解析，获取历史文章列表信息json；\n&emsp;&emsp;3、通过python进行解析，获取所有文章信息，包括标题、链接等；\n&emsp;&emsp;4、通过python循环将这些文章下载到本地存为html；\n&emsp;&emsp;5、通过python将文章里面的图片都保存到本地；\n&emsp;&emsp;6、通过python将本地html文件里面的图片链接，修改为本地存储图片的路径（因为只存文章还不行，你会发现存到本地的html文件，里面的图片都无法正常显示）；\n&emsp;&emsp;7、通过python调用wkhtmltopdf工具，将html转换成pdf。\n\n### **【工具】**\n&emsp;&emsp;1、抓包工具fiddler；\n&emsp;&emsp;2、html转pdf工具wkhtmltopdf；\n&emsp;&emsp;3、python3.7及对应的包；\n&emsp;&emsp;4、电脑版微信或者模拟器或者直接用手机也行（如果用手机或者模拟器，需要设置代理）；\n\n### **【准备工作之抓包】**\n&emsp;&emsp;有些公众号的包比较特殊，所以要进行不同的处理。以朋友要求的公众号为例（为了避免广告嫌疑，就不写是啥公众号了）。\n&emsp;&emsp;1、下载fiddler软件，因为公众号里都是https的链接，需要做抓包配置。中间会弹出一些框框让确认，全部点确定就行。\n<br />\n{% asset_img fiddle_setup_1.png fiddle设置 %}\n{% asset_img fiddle_setup_2.png fiddle设置 %}\n\n&emsp;&emsp;2、打开电脑版微信，搜索需要的公众号，点开历史文章列表。通过fiddler查看抓到的包的特点。\n<br />\n{% asset_img analyse_pkg_1.png 打开公众号链接 %}\n{% asset_img analyse_pkg_2.png fiddle分析包特点 %}\n{% asset_img analyse_pkg_3.png fiddle分析包特点 %}\n\n&emsp;&emsp;3、为了避免其他链接的干扰，配置过滤规则，滤掉不需要的链接。\n<br />\n{% asset_img fiddle_filters.png 股票清单和基本信息-网页 %}\n\n\n&emsp;&emsp;4、然后清空fiddler的抓取记录，重新点击历史文章，并不断下拉，直到所有链接都显示出来为止。\n<br />\n{% asset_img fiddle_info_1.png fiddle抓包信息 %}\n{% asset_img fiddle_info_2.png fiddle抓包信息 %}\n\n&emsp;&emsp;5、将过滤之后获得的所有的seesion，以raw的形式保存到本地。\n<br />\n{% asset_img fiddle_raw_1.png fiddle保持raw格式session %}\n{% asset_img fiddle_raw_2.png fiddle保持raw格式session %}\n{% asset_img fiddle_raw_3.png fiddle保持raw格式session %}\n{% asset_img fiddle_raw_4.png fiddle保持raw格式session %}\n\n### **【编码】**\n&emsp;&emsp;**1、标准报文头和需要的包**\n```\n# _*_ coding:utf-8 _*_\nimport os,sys\nimport requests\nimport json\nimport subprocess\nimport re\nimport random\nimport time\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime,timedelta\nfrom time import sleep\n```\n&emsp;&emsp;**2、定义一个文章类，保存文章的基本信息**\n```\nclass ArticleInfo():\n    def __init__(self,url,title,idx_num): #idx_num是为了方便保存图片命名\n        self.url = url\n        self.title = title\n        self.idx_num = idx_num\n```\n&emsp;&emsp;**3、定义读取文件内容的方法（通用）**\n```\ndef read_file(file_path):\n    with open(file_path,\"r\",encoding=\"utf-8\") as f:\n        file_content = f.read()\n    return file_content\n```\n&emsp;&emsp;**4、定义写文件内容的方法（通用）**\n```\ndef save_file(file_path,file_content):\n    with open(file_path,\"w\",encoding=\"utf-8\") as f:\n        f.write(file_content)\n```\n&emsp;&emsp;**5、定义下载网页html的方法（通用）**\n```\ndef get_html(url):\n    headers = {\n        \"Accept\": \"*/*\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 QBCore/4.0.1219.400 QQBrowser/9.0.2524.400 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 MicroMessenger/6.5.2.501 NetType/WIFI WindowsWechat\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Accept-Language\": \"zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.5;q=0.4\",\n        'Connection':'keep-alive'\n    }\n    response = requests.get(url,headers = headers,proxies=None)\n    if response.status_code == 200:\n        htmltxt = response.text #返回的网页正文\n        return htmltxt\n    else:\n        return None\n```\n&emsp;&emsp;**6、定义下载并保存网页图片的方法（通用）**\n```\ndef get_save_image(url,img_file_path):\n    headers = {\n        \"Accept\": \"*/*\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 QBCore/4.0.1219.400 QQBrowser/9.0.2524.400 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 MicroMessenger/6.5.2.501 NetType/WIFI WindowsWechat\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Accept-Language\": \"zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.5;q=0.4\",\n        'Connection':'keep-alive'\n    }\n    response = requests.get(url,headers = headers,proxies=None)\n    with open(img_file_path,\"wb\") as f:\n        f.write(response.content)\n```\n&emsp;&emsp;**7、定义调用下载html和图片的方法（主函数调用此方法开始下载）**\n```\ndef down_html(json_path,html_path):\n    if not os.path.exists(html_path):\n        os.makedirs(html_path) # 创建保存html文件的文件夹\n    local_img_path = os.path.join(html_path,\"images\")\n    if not os.path.lexists(local_img_path):\n        os.makedirs(local_img_path) # 创建保存本地图片的文件夹\n    article_list = get_article_list(json_path)\n    article_list.sort(key=lambda x:x.atc_datetime, reverse=True) # 根据文章发表时间倒序排列\n    tot_article = len(article_list) # 文章的总数量\n    i = 0 #计数用\n    for atc in article_list:\n        i+=1\n        atc_unique_name = str(atc.atc_datetime) + \"_\" + str(atc.idx_num) # 时间+序号 作为同一时间发表的文章的唯一标识\n        html_name = atc_unique_name+\".html\"\n        html_file_path = os.path.join(html_path,html_name)\n        print(i,\"of\",tot_article,atc_unique_name,atc.title)\n        if os.path.exists(html_file_path): # 支持续传\n            print(\"{} existed already!\".format(html_file_path))\n            continue\n        org_atc_html = get_html(atc.url)\n        new_atc_html = rep_image(org_atc_html,local_img_path,html_name)\n        save_file(html_file_path,new_atc_html)\n        sleep(round(random.uniform(1,3),2))\n        \"\"\"for test\n        if i>0 :\n            break\n        \"\"\"\n```\n&emsp;&emsp;**8、查看fiddler保存的json文件结构，定义解析json字符串获取文章列表的方法**\n```\ndef get_article_list(json_path):\n    \"\"\"\n    通过抓取的包的json文件，获取所有文章的信息的列表\n    \"\"\"\n    file_list = os.listdir(json_path) #jsonpath是fiddler导出的文件夹路径\n    article_list = [] # 用来保存所有文章的列表\n    for file in file_list:\n        file_path = os.path.join(json_path,file)\n        file_cont = read_file(file_path)\n        json_cont = json.loads(file_cont)\n        general_msg_list = json_cont['general_msg_list']\n        json_list = json.loads(general_msg_list)\n        #print(json_list['list'][0]['comm_msg_info']['datetime'])\n        for lst in json_list['list']:\n            atc_idx = 0 # 每个时间可以发多篇文章 为了方便后续图片命名\n            seconds_datetime = lst['comm_msg_info']['datetime']\n            atc_datetime = seconds_to_time(seconds_datetime)\n            if lst['comm_msg_info']['type'] == 49: # 49为普通的图文\n                atc_idx+=1\n                url = lst['app_msg_ext_info']['content_url']\n                title = lst['app_msg_ext_info']['title']\n                atc_info = ArticleInfo(url,title,atc_idx,atc_datetime)\n                article_list.append(atc_info)\n            if 1 == lst['app_msg_ext_info']['is_multi']: # 一次发多篇\n                multi_app_msg_item_list = lst['app_msg_ext_info']['multi_app_msg_item_list']\n                for multi in multi_app_msg_item_list:\n                    atc_idx+=1\n                    url = multi['content_url']\n                    title = multi['title']\n                    mul_act_info = ArticleInfo(url,title,atc_idx,atc_datetime)\n                    article_list.append(mul_act_info)\n    return article_list\n```\n<br />\n{% asset_img raw_info.png fiddle保持raw具体内容 %}\n\n&emsp;&emsp;**9、定义替换html中图片src为本地图片的方法（不替换，html中的图片将无法显示）**\n```\ndef chg_img_link(bs_html):\n    link_list = bs_html.findAll(\"link\")\n    for link in link_list:\n        href = link.attrs[\"href\"]\n        if href.startswith(\"//\"):\n            new_href = \"http:\"+href\n            link.attrs[\"href\"]=new_href\n \ndef rep_image(org_html,local_img_path,html_name):\n    bs_html = BeautifulSoup(org_html,\"lxml\")\n    img_list = bs_html.findAll(\"img\")\n    img_idx = 0 # 计数和命名用\n    for img in img_list:\n        img_idx+=1\n        org_url = \"\" # 图片的真实地址\n        if \"data-src\" in img.attrs: # <img  data-src=\"...\"\n            org_url = img.attrs['data-src']\n        elif \"src\" in img.attrs : # <img  src=\"...\"\n            org_url = img.attrs['src']\n        if org_url.startswith(\"//\"):\n            org_url = \"http:\" + org_url\n        if len(org_url) > 0 :\n            print(\"download image \",img_idx)\n            if \"data-type\" in img.attrs:\n                img_type = img.attrs[\"data-type\"]\n            else:\n                img_type = \"png\"\n            img_name = html_name + \"_\" + str(img_idx) + \".\" +img_type\n            img_file_path = os.path.join(local_img_path,img_name)\n            get_save_image(org_url,img_file_path) # 下载并保存图片\n            img.attrs[\"src\"] = \"images/\" + img_name\n        else:\n            img.attrs[\"src\"] = \"\"\n    chg_img_link(bs_html)\n    return str(bs_html)\n```\n<br />\n{% asset_img without_img.png 未替换本地图片源 %}\n{% asset_img with_img.png 替换本地图片源 %}\n\n&emsp;&emsp;**10、定义html转换成pdf的方法**\n```\ndef conv_html_pdf(html_path,pdf_path):\n    if not os.path.exists(pdf_path):\n        os.makedirs(pdf_path)\n    f_list = os.listdir(html_path)\n    for f in f_list:\n        if (not f[-5:]==\".html\") or (\"tmp\" in f): #不是html文件的不转换，含有tmp的不转换\n            continue\n        html_file_path = os.path.join(html_path,f)\n        html_tmp_file = html_file_path[:-5]+\"_tmp.html\" #生成临时文件，供转pdf用\n        html_str = read_file(html_file_path)\n        bs_html = BeautifulSoup(html_str,\"lxml\")\n        pdf_title = \"\"\n        title_tag = bs_html.find(id=\"activity-name\")\n        if title_tag is not None:\n            pdf_title = \"_\"+title_tag.get_text().replace(\" \", \"\").replace(\"  \",\"\").replace(\"\\n\",\"\")\n        print(pdf_title)\n        r_idx = html_file_path.rindex(\"/\") + 1\n        pdf_name = html_file_path[r_idx:-5]+pdf_title\n        pdf_file_path = os.path.join(pdf_path,pdf_name+\".pdf\")\n        \"\"\"\n        加快转换速度，把临时文件中的不必要的元素去掉\n        \"\"\"\n        [s.extract() for s in bs_html([\"script\",\"iframe\",\"link\"])]\n        save_file(html_tmp_file,str(bs_html))\n        call_wkhtmltopdf(html_tmp_file,pdf_file_path)\n ```\n ```\ndef call_wkhtmltopdf(html_file_path,pdf_file_path,skipExists=True,removehtml=True):\n    if skipExists and os.path.exists(pdf_file_path):\n        print(\"pdf_file_path already existed!\")\n        if removehtml :\n            os.remove(html_file_path)\n        return\n    exe_path = cfg['wkhtmltopdf'] #wkhtmltopdf.exe的保存路径\n    cmd_list = []\n    cmd_list.append(\" --load-error-handling ignore \")\n    cmd_list.append(\" \"+ html_file_path +\" \")\n    cmd_list.append(\" \"+ pdf_file_path +\" \")\n    cmd_str = exe_path + \"\".join(cmd_list)\n    print(cmd_str)\n    subprocess.check_call(cmd_str, shell=False)\n    if removehtml:\n        os.remove(html_file_path)\n```\n\n&emsp;&emsp;**11、定义读取保存各文件夹路径的配置文件的方法**\n```\ndef get_config():\n    cfg_file = read_file(\"config/wechat.cfg\")\n    cfg_file = cfg_file.replace(\"\\\\\\\\\",\"/\").replace(\"\\\\\",\"/\") #防止json中有 / 导致无法识别\n    cfg_json = json.loads(cfg_file)\n    return cfg_json\n```\n\n&emsp;&emsp;**【重要】配置文件放置在当前目录的子目录config下，名为wechat.cfg,内容如下**\n```\n{\n    \"jsonDir\": \"./download/wechat/fiddler-raw/Dump-0902-14-43-38/\",\n    \"htmlDir\": \"./download/wechat/html/\",\n    \"pdfDir\": \"./download/wechat/pdf/\",\n    \"wkhtmltopdf\": \"./wkhtmltopdf.exe\"\n}\n```\n\n&emsp;&emsp;**12、定义从秒数获得时间的方法（微信公众号的datetime存放的是从1970-01-01 00:00:00到发表时的秒数）**\n```\ndef seconds_to_time(seconds):\n    taime_array = time.localtime(seconds) # 1970-01-01 00:00:00 到发表时的秒数\n    other_style_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", taime_array)\n    date_time =datetime.strptime(other_style_time, \"%Y-%m-%d %H:%M:%S\")\n    return str(date_time).replace(\"-\",\"\").replace(\":\",\"\").replace(\" \",\"\")\n```\n\n&emsp;&emsp;**13、定义主函数进行调用，没有参数或者参数是html则进行下载，如果是pdf则是html转换成pdf**\n```\ncfg = get_config() # 获得配置文件的全局变量\n#get_article_list(\"./tmp/\") # for test\n#down_html(\"./tmp/\",\"./html/\")# for test\n \nif __name__ == \"__main__\":\n \n    if len(sys.argv) == 1:\n        arg = None\n    else:\n        arg = sys.argv[1]\n    if arg is None or arg == \"html\":\n        down_html(cfg['jsonDir'],cfg['htmlDir'])\n    elif arg == \"pdf\":\n        conv_html_pdf(cfg['htmlDir'],cfg['pdfDir'])\n```\n\n### **【运行效果】**\n<br />\n{% asset_img last_html.png html文件 %}\n{% asset_img last_pdf.png pdf文件 %}\n\n### **【完整代码】**\n```\n# _*_ coding:utf-8 _*_\nimport os,sys\nimport requests\nimport json\nimport subprocess\nimport re\nimport random\nimport time\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime,timedelta\nfrom time import sleep\n \nclass ArticleInfo():\n    def __init__(self,url,title,idx_num,atc_datetime): #idx_num是为了方便保存图片命名\n        self.url = url\n        self.title = title\n        self.idx_num = idx_num\n        self.atc_datetime = atc_datetime\n \ndef read_file(file_path):\n    with open(file_path,\"r\",encoding=\"utf-8\") as f:\n        file_content = f.read()\n    return file_content\n \ndef save_file(file_path,file_content):\n    with open(file_path,\"w\",encoding=\"utf-8\") as f:\n        f.write(file_content)\n \ndef get_html(url):\n    headers = {\n        \"Accept\": \"*/*\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 QBCore/4.0.1219.400 QQBrowser/9.0.2524.400 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 MicroMessenger/6.5.2.501 NetType/WIFI WindowsWechat\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Accept-Language\": \"zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.5;q=0.4\",\n        'Connection':'keep-alive'\n    }\n    response = requests.get(url,headers = headers,proxies=None)\n    if response.status_code == 200:\n        htmltxt = response.text #返回的网页正文\n        return htmltxt\n    else:\n        return None\n \ndef get_save_image(url,img_file_path):\n    headers = {\n        \"Accept\": \"*/*\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 QBCore/4.0.1219.400 QQBrowser/9.0.2524.400 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 MicroMessenger/6.5.2.501 NetType/WIFI WindowsWechat\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Accept-Language\": \"zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.5;q=0.4\",\n        'Connection':'keep-alive'\n    }\n    response = requests.get(url,headers = headers,proxies=None)\n    with open(img_file_path,\"wb\") as f:\n        f.write(response.content)\n \ndef get_article_list(json_path):\n    \"\"\"\n    通过抓取的包的json文件，获取所有文章的信息的列表\n    \"\"\"\n    file_list = os.listdir(json_path) #jsonpath是fiddler导出的文件夹路径\n    article_list = [] # 用来保存所有文章的列表\n    for file in file_list:\n        file_path = os.path.join(json_path,file)\n        file_cont = read_file(file_path)\n        json_cont = json.loads(file_cont)\n        general_msg_list = json_cont['general_msg_list']\n        json_list = json.loads(general_msg_list)\n        #print(json_list['list'][0]['comm_msg_info']['datetime'])\n        for lst in json_list['list']:\n            atc_idx = 0 # 每个时间可以发多篇文章 为了方便后续图片命名\n            seconds_datetime = lst['comm_msg_info']['datetime']\n            atc_datetime = seconds_to_time(seconds_datetime)\n            if lst['comm_msg_info']['type'] == 49: # 49为普通的图文\n                atc_idx+=1\n                url = lst['app_msg_ext_info']['content_url']\n                title = lst['app_msg_ext_info']['title']\n                atc_info = ArticleInfo(url,title,atc_idx,atc_datetime)\n                article_list.append(atc_info)\n            if 1 == lst['app_msg_ext_info']['is_multi']: # 一次发多篇\n                multi_app_msg_item_list = lst['app_msg_ext_info']['multi_app_msg_item_list']\n                for multi in multi_app_msg_item_list:\n                    atc_idx+=1\n                    url = multi['content_url']\n                    title = multi['title']\n                    mul_act_info = ArticleInfo(url,title,atc_idx,atc_datetime)\n                    article_list.append(mul_act_info)\n    return article_list\n \ndef chg_img_link(bs_html):\n    link_list = bs_html.findAll(\"link\")\n    for link in link_list:\n        href = link.attrs[\"href\"]\n        if href.startswith(\"//\"):\n            new_href = \"http:\"+href\n            link.attrs[\"href\"]=new_href\n \ndef rep_image(org_html,local_img_path,html_name):\n    bs_html = BeautifulSoup(org_html,\"lxml\")\n    img_list = bs_html.findAll(\"img\")\n    img_idx = 0 # 计数和命名用\n    for img in img_list:\n        img_idx+=1\n        org_url = \"\" # 图片的真实地址\n        if \"data-src\" in img.attrs: # <img  data-src=\"...\"\n            org_url = img.attrs['data-src']\n        elif \"src\" in img.attrs : # <img  src=\"...\"\n            org_url = img.attrs['src']\n        if org_url.startswith(\"//\"):\n            org_url = \"http:\" + org_url\n        if len(org_url) > 0 :\n            print(\"download image \",img_idx)\n            if \"data-type\" in img.attrs:\n                img_type = img.attrs[\"data-type\"]\n            else:\n                img_type = \"png\"\n            img_name = html_name + \"_\" + str(img_idx) + \".\" +img_type\n            img_file_path = os.path.join(local_img_path,img_name)\n            get_save_image(org_url,img_file_path) # 下载并保存图片\n            img.attrs[\"src\"] = \"images/\" + img_name\n        else:\n            img.attrs[\"src\"] = \"\"\n    chg_img_link(bs_html)\n    return str(bs_html)\n \n \ndef down_html(json_path,html_path):\n    if not os.path.exists(html_path):\n        os.makedirs(html_path) # 创建保存html文件的文件夹\n    local_img_path = os.path.join(html_path,\"images\")\n    if not os.path.lexists(local_img_path):\n        os.makedirs(local_img_path) # 创建保存本地图片的文件夹\n    article_list = get_article_list(json_path)\n    article_list.sort(key=lambda x:x.atc_datetime, reverse=True) # 根据文章发表时间倒序排列\n    tot_article = len(article_list) # 文章的总数量\n    i = 0 #计数用\n    for atc in article_list:\n        i+=1\n        atc_unique_name = str(atc.atc_datetime) + \"_\" + str(atc.idx_num) # 时间+序号 作为同一时间发表的文章的唯一标识\n        html_name = atc_unique_name+\".html\"\n        html_file_path = os.path.join(html_path,html_name)\n        print(i,\"of\",tot_article,atc_unique_name,atc.title)\n        if os.path.exists(html_file_path): # 支持续传\n            print(\"{} existed already!\".format(html_file_path))\n            continue\n        org_atc_html = get_html(atc.url)\n        new_atc_html = rep_image(org_atc_html,local_img_path,html_name)\n        save_file(html_file_path,new_atc_html)\n        sleep(round(random.uniform(1,3),2))\n        \"\"\"for test\n        if i>0 :\n            break\n        \"\"\"\n \ndef conv_html_pdf(html_path,pdf_path):\n    if not os.path.exists(pdf_path):\n        os.makedirs(pdf_path)\n    f_list = os.listdir(html_path)\n    for f in f_list:\n        if (not f[-5:]==\".html\") or (\"tmp\" in f): #不是html文件的不转换，含有tmp的不转换\n            continue\n        html_file_path = os.path.join(html_path,f)\n        html_tmp_file = html_file_path[:-5]+\"_tmp.html\" #生成临时文件，供转pdf用\n        html_str = read_file(html_file_path)\n        bs_html = BeautifulSoup(html_str,\"lxml\")\n        pdf_title = \"\"\n        title_tag = bs_html.find(id=\"activity-name\")\n        if title_tag is not None:\n            pdf_title = \"_\"+title_tag.get_text().replace(\" \", \"\").replace(\"  \",\"\").replace(\"\\n\",\"\")\n        print(pdf_title)\n        r_idx = html_file_path.rindex(\"/\") + 1\n        pdf_name = html_file_path[r_idx:-5]+pdf_title\n        pdf_file_path = os.path.join(pdf_path,pdf_name+\".pdf\")\n        \"\"\"\n        加快转换速度，把临时文件中的不必要的元素去掉\n        \"\"\"\n        [s.extract() for s in bs_html([\"script\",\"iframe\",\"link\"])]\n        save_file(html_tmp_file,str(bs_html))\n        call_wkhtmltopdf(html_tmp_file,pdf_file_path)\n \ndef call_wkhtmltopdf(html_file_path,pdf_file_path,skipExists=True,removehtml=True):\n    if skipExists and os.path.exists(pdf_file_path):\n        print(\"pdf_file_path already existed!\")\n        if removehtml :\n            os.remove(html_file_path)\n        return\n    exe_path = cfg['wkhtmltopdf'] #wkhtmltopdf.exe的保存路径\n    cmd_list = []\n    cmd_list.append(\" --load-error-handling ignore \")\n    cmd_list.append(\" \"+ html_file_path +\" \")\n    cmd_list.append(\" \"+ pdf_file_path +\" \")\n    cmd_str = exe_path + \"\".join(cmd_list)\n    print(cmd_str)\n    subprocess.check_call(cmd_str, shell=False)\n    if removehtml:\n        os.remove(html_file_path)\n \ndef get_config():\n    cfg_file = read_file(\"config/wechat.cfg\")\n    cfg_file = cfg_file.replace(\"\\\\\\\\\",\"/\").replace(\"\\\\\",\"/\") #防止json中有 / 导致无法识别\n    cfg_json = json.loads(cfg_file)\n    return cfg_json\n \ndef seconds_to_time(seconds):\n    taime_array = time.localtime(seconds) # 1970-01-01 00:00:00 到发表时的秒数\n    other_style_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", taime_array)\n    date_time =datetime.strptime(other_style_time, \"%Y-%m-%d %H:%M:%S\")\n    return str(date_time).replace(\"-\",\"\").replace(\":\",\"\").replace(\" \",\"\")\n \n \ncfg = get_config() # 获得配置文件的全局变量\n#get_article_list(\"./tmp/\") # for test\n#down_html(\"./tmp/\",\"./html/\")# for test\n \nif __name__ == \"__main__\":\n \n    if len(sys.argv) == 1:\n        arg = None\n    else:\n        arg = sys.argv[1]\n    if arg is None or arg == \"html\":\n        down_html(cfg['jsonDir'],cfg['htmlDir'])\n    elif arg == \"pdf\":\n        conv_html_pdf(cfg['htmlDir'],cfg['pdfDir'])\n```","source":"_posts/2022-07-27-python批量下载公众号历史文章（一）.md","raw":"---\ntitle: 【半自动版】python批量下载公众号历史文章（一）\ndate: 2022-07-27 13:50:59\ncategories:\n- [技术, 实践, python]\n- [兴趣研究, 技术, 爬虫]\ntags:\n- 爬虫\n- 公众号\n- 技术\n- python\n---\n\n### **【老博客地址】**\n&emsp;&emsp;[【CSDN】博客主页](https://blog.csdn.net/MissYourKiss/)\n&emsp;&emsp;[【纯技术交流】python批量下载公众号历史文章（一）](https://blog.csdn.net/MissYourKiss/article/details/100254510)\n&emsp;&emsp;*(在刊载一段时间后，莫名被吞掉了,所以在这里补档)*\n&emsp;&emsp;[python批量下载公众号历史文章（二）](https://blog.csdn.net/MissYourKiss/article/details/100661899)\n\n### **【写在前面】**\n<p style=\"text-indent:2em\">\n前些天和同事讨论问题，什么是人才？讨论细节就不表了，最终总结为一句话：能解决问题的人才是人才。自己爱交朋友，很多朋友都在我有困难的时候帮助过我，也希望自己能够帮助朋友，成为能帮朋友解决问题的人才，所以朋友的请求从来都是来者不拒，力所能及之事一定全力办到！\n</p>\n<p style=\"text-indent:2em\">\n基于这点，给自己挖了很多坑：前些日子写的学习强国自动学习已经完成了一个初步版本，能够自动读文章、自动学习视频、自动分享，但是还不能自动答题，朋友说已经够用了，不过还是希望有时间了完成这块儿的内容；想读黄易老爷子武侠的那位朋友的问题也解决了，虽然下载下来的文字部分章节格式上有些乱，但也满足了朋友的要求，够用就行；学习Python也是一样，因时间关系没有系统的去学习过，只是通过解决各种问题达到学以致用，够用就行。很多博客文章，写有序号，都是计划要分段完成的，希望自己有一天能把所有的坑都填完了。\n</p>\n\n### **【背景】**\n<p style=\"text-indent:2em\">\n昨天和朋友去野钓，路上谈起股票。今年截止到目前，他的收益是40%多。问他炒股的心得，他是数据流派，经常看财务数据，就推荐了几个公众号，同时提出了一个请求，有些公众号历史文章太多，每次翻看之前的文章都得重头刷，问我能不能把这些文章下载到本地，自己想看的时候就看。想着不难，就答应姑且一试。\n</p>\n\n### **【目标】**\n&emsp;&emsp;第一个版本，只是为了实现下载朋友指定的公众号的历史文章，并转换成pdf方便阅读。很多需要手工配合，算是一个半自动的版本吧。\n&emsp;&emsp;后续会陆续减少手工，并把文章存储在数据库里，支持检索等。\n\n### **【思路】**\n&emsp;&emsp;和从网页上爬取小说不同，微信的公众号是通过app操作进行爬取，所以不能直接用chrome查看网页源码进行解析，需要用到第三方抓包工具，网上看了下用的比较多的有fiddler和anyproxy，前者比较简单，就选择了前者，思路如下：\n&emsp;&emsp;1、通过fiddler抓取相应公众号的包（需要手动）；\n&emsp;&emsp;2、通过python进行解析，获取历史文章列表信息json；\n&emsp;&emsp;3、通过python进行解析，获取所有文章信息，包括标题、链接等；\n&emsp;&emsp;4、通过python循环将这些文章下载到本地存为html；\n&emsp;&emsp;5、通过python将文章里面的图片都保存到本地；\n&emsp;&emsp;6、通过python将本地html文件里面的图片链接，修改为本地存储图片的路径（因为只存文章还不行，你会发现存到本地的html文件，里面的图片都无法正常显示）；\n&emsp;&emsp;7、通过python调用wkhtmltopdf工具，将html转换成pdf。\n\n### **【工具】**\n&emsp;&emsp;1、抓包工具fiddler；\n&emsp;&emsp;2、html转pdf工具wkhtmltopdf；\n&emsp;&emsp;3、python3.7及对应的包；\n&emsp;&emsp;4、电脑版微信或者模拟器或者直接用手机也行（如果用手机或者模拟器，需要设置代理）；\n\n### **【准备工作之抓包】**\n&emsp;&emsp;有些公众号的包比较特殊，所以要进行不同的处理。以朋友要求的公众号为例（为了避免广告嫌疑，就不写是啥公众号了）。\n&emsp;&emsp;1、下载fiddler软件，因为公众号里都是https的链接，需要做抓包配置。中间会弹出一些框框让确认，全部点确定就行。\n<br />\n{% asset_img fiddle_setup_1.png fiddle设置 %}\n{% asset_img fiddle_setup_2.png fiddle设置 %}\n\n&emsp;&emsp;2、打开电脑版微信，搜索需要的公众号，点开历史文章列表。通过fiddler查看抓到的包的特点。\n<br />\n{% asset_img analyse_pkg_1.png 打开公众号链接 %}\n{% asset_img analyse_pkg_2.png fiddle分析包特点 %}\n{% asset_img analyse_pkg_3.png fiddle分析包特点 %}\n\n&emsp;&emsp;3、为了避免其他链接的干扰，配置过滤规则，滤掉不需要的链接。\n<br />\n{% asset_img fiddle_filters.png 股票清单和基本信息-网页 %}\n\n\n&emsp;&emsp;4、然后清空fiddler的抓取记录，重新点击历史文章，并不断下拉，直到所有链接都显示出来为止。\n<br />\n{% asset_img fiddle_info_1.png fiddle抓包信息 %}\n{% asset_img fiddle_info_2.png fiddle抓包信息 %}\n\n&emsp;&emsp;5、将过滤之后获得的所有的seesion，以raw的形式保存到本地。\n<br />\n{% asset_img fiddle_raw_1.png fiddle保持raw格式session %}\n{% asset_img fiddle_raw_2.png fiddle保持raw格式session %}\n{% asset_img fiddle_raw_3.png fiddle保持raw格式session %}\n{% asset_img fiddle_raw_4.png fiddle保持raw格式session %}\n\n### **【编码】**\n&emsp;&emsp;**1、标准报文头和需要的包**\n```\n# _*_ coding:utf-8 _*_\nimport os,sys\nimport requests\nimport json\nimport subprocess\nimport re\nimport random\nimport time\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime,timedelta\nfrom time import sleep\n```\n&emsp;&emsp;**2、定义一个文章类，保存文章的基本信息**\n```\nclass ArticleInfo():\n    def __init__(self,url,title,idx_num): #idx_num是为了方便保存图片命名\n        self.url = url\n        self.title = title\n        self.idx_num = idx_num\n```\n&emsp;&emsp;**3、定义读取文件内容的方法（通用）**\n```\ndef read_file(file_path):\n    with open(file_path,\"r\",encoding=\"utf-8\") as f:\n        file_content = f.read()\n    return file_content\n```\n&emsp;&emsp;**4、定义写文件内容的方法（通用）**\n```\ndef save_file(file_path,file_content):\n    with open(file_path,\"w\",encoding=\"utf-8\") as f:\n        f.write(file_content)\n```\n&emsp;&emsp;**5、定义下载网页html的方法（通用）**\n```\ndef get_html(url):\n    headers = {\n        \"Accept\": \"*/*\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 QBCore/4.0.1219.400 QQBrowser/9.0.2524.400 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 MicroMessenger/6.5.2.501 NetType/WIFI WindowsWechat\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Accept-Language\": \"zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.5;q=0.4\",\n        'Connection':'keep-alive'\n    }\n    response = requests.get(url,headers = headers,proxies=None)\n    if response.status_code == 200:\n        htmltxt = response.text #返回的网页正文\n        return htmltxt\n    else:\n        return None\n```\n&emsp;&emsp;**6、定义下载并保存网页图片的方法（通用）**\n```\ndef get_save_image(url,img_file_path):\n    headers = {\n        \"Accept\": \"*/*\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 QBCore/4.0.1219.400 QQBrowser/9.0.2524.400 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 MicroMessenger/6.5.2.501 NetType/WIFI WindowsWechat\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Accept-Language\": \"zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.5;q=0.4\",\n        'Connection':'keep-alive'\n    }\n    response = requests.get(url,headers = headers,proxies=None)\n    with open(img_file_path,\"wb\") as f:\n        f.write(response.content)\n```\n&emsp;&emsp;**7、定义调用下载html和图片的方法（主函数调用此方法开始下载）**\n```\ndef down_html(json_path,html_path):\n    if not os.path.exists(html_path):\n        os.makedirs(html_path) # 创建保存html文件的文件夹\n    local_img_path = os.path.join(html_path,\"images\")\n    if not os.path.lexists(local_img_path):\n        os.makedirs(local_img_path) # 创建保存本地图片的文件夹\n    article_list = get_article_list(json_path)\n    article_list.sort(key=lambda x:x.atc_datetime, reverse=True) # 根据文章发表时间倒序排列\n    tot_article = len(article_list) # 文章的总数量\n    i = 0 #计数用\n    for atc in article_list:\n        i+=1\n        atc_unique_name = str(atc.atc_datetime) + \"_\" + str(atc.idx_num) # 时间+序号 作为同一时间发表的文章的唯一标识\n        html_name = atc_unique_name+\".html\"\n        html_file_path = os.path.join(html_path,html_name)\n        print(i,\"of\",tot_article,atc_unique_name,atc.title)\n        if os.path.exists(html_file_path): # 支持续传\n            print(\"{} existed already!\".format(html_file_path))\n            continue\n        org_atc_html = get_html(atc.url)\n        new_atc_html = rep_image(org_atc_html,local_img_path,html_name)\n        save_file(html_file_path,new_atc_html)\n        sleep(round(random.uniform(1,3),2))\n        \"\"\"for test\n        if i>0 :\n            break\n        \"\"\"\n```\n&emsp;&emsp;**8、查看fiddler保存的json文件结构，定义解析json字符串获取文章列表的方法**\n```\ndef get_article_list(json_path):\n    \"\"\"\n    通过抓取的包的json文件，获取所有文章的信息的列表\n    \"\"\"\n    file_list = os.listdir(json_path) #jsonpath是fiddler导出的文件夹路径\n    article_list = [] # 用来保存所有文章的列表\n    for file in file_list:\n        file_path = os.path.join(json_path,file)\n        file_cont = read_file(file_path)\n        json_cont = json.loads(file_cont)\n        general_msg_list = json_cont['general_msg_list']\n        json_list = json.loads(general_msg_list)\n        #print(json_list['list'][0]['comm_msg_info']['datetime'])\n        for lst in json_list['list']:\n            atc_idx = 0 # 每个时间可以发多篇文章 为了方便后续图片命名\n            seconds_datetime = lst['comm_msg_info']['datetime']\n            atc_datetime = seconds_to_time(seconds_datetime)\n            if lst['comm_msg_info']['type'] == 49: # 49为普通的图文\n                atc_idx+=1\n                url = lst['app_msg_ext_info']['content_url']\n                title = lst['app_msg_ext_info']['title']\n                atc_info = ArticleInfo(url,title,atc_idx,atc_datetime)\n                article_list.append(atc_info)\n            if 1 == lst['app_msg_ext_info']['is_multi']: # 一次发多篇\n                multi_app_msg_item_list = lst['app_msg_ext_info']['multi_app_msg_item_list']\n                for multi in multi_app_msg_item_list:\n                    atc_idx+=1\n                    url = multi['content_url']\n                    title = multi['title']\n                    mul_act_info = ArticleInfo(url,title,atc_idx,atc_datetime)\n                    article_list.append(mul_act_info)\n    return article_list\n```\n<br />\n{% asset_img raw_info.png fiddle保持raw具体内容 %}\n\n&emsp;&emsp;**9、定义替换html中图片src为本地图片的方法（不替换，html中的图片将无法显示）**\n```\ndef chg_img_link(bs_html):\n    link_list = bs_html.findAll(\"link\")\n    for link in link_list:\n        href = link.attrs[\"href\"]\n        if href.startswith(\"//\"):\n            new_href = \"http:\"+href\n            link.attrs[\"href\"]=new_href\n \ndef rep_image(org_html,local_img_path,html_name):\n    bs_html = BeautifulSoup(org_html,\"lxml\")\n    img_list = bs_html.findAll(\"img\")\n    img_idx = 0 # 计数和命名用\n    for img in img_list:\n        img_idx+=1\n        org_url = \"\" # 图片的真实地址\n        if \"data-src\" in img.attrs: # <img  data-src=\"...\"\n            org_url = img.attrs['data-src']\n        elif \"src\" in img.attrs : # <img  src=\"...\"\n            org_url = img.attrs['src']\n        if org_url.startswith(\"//\"):\n            org_url = \"http:\" + org_url\n        if len(org_url) > 0 :\n            print(\"download image \",img_idx)\n            if \"data-type\" in img.attrs:\n                img_type = img.attrs[\"data-type\"]\n            else:\n                img_type = \"png\"\n            img_name = html_name + \"_\" + str(img_idx) + \".\" +img_type\n            img_file_path = os.path.join(local_img_path,img_name)\n            get_save_image(org_url,img_file_path) # 下载并保存图片\n            img.attrs[\"src\"] = \"images/\" + img_name\n        else:\n            img.attrs[\"src\"] = \"\"\n    chg_img_link(bs_html)\n    return str(bs_html)\n```\n<br />\n{% asset_img without_img.png 未替换本地图片源 %}\n{% asset_img with_img.png 替换本地图片源 %}\n\n&emsp;&emsp;**10、定义html转换成pdf的方法**\n```\ndef conv_html_pdf(html_path,pdf_path):\n    if not os.path.exists(pdf_path):\n        os.makedirs(pdf_path)\n    f_list = os.listdir(html_path)\n    for f in f_list:\n        if (not f[-5:]==\".html\") or (\"tmp\" in f): #不是html文件的不转换，含有tmp的不转换\n            continue\n        html_file_path = os.path.join(html_path,f)\n        html_tmp_file = html_file_path[:-5]+\"_tmp.html\" #生成临时文件，供转pdf用\n        html_str = read_file(html_file_path)\n        bs_html = BeautifulSoup(html_str,\"lxml\")\n        pdf_title = \"\"\n        title_tag = bs_html.find(id=\"activity-name\")\n        if title_tag is not None:\n            pdf_title = \"_\"+title_tag.get_text().replace(\" \", \"\").replace(\"  \",\"\").replace(\"\\n\",\"\")\n        print(pdf_title)\n        r_idx = html_file_path.rindex(\"/\") + 1\n        pdf_name = html_file_path[r_idx:-5]+pdf_title\n        pdf_file_path = os.path.join(pdf_path,pdf_name+\".pdf\")\n        \"\"\"\n        加快转换速度，把临时文件中的不必要的元素去掉\n        \"\"\"\n        [s.extract() for s in bs_html([\"script\",\"iframe\",\"link\"])]\n        save_file(html_tmp_file,str(bs_html))\n        call_wkhtmltopdf(html_tmp_file,pdf_file_path)\n ```\n ```\ndef call_wkhtmltopdf(html_file_path,pdf_file_path,skipExists=True,removehtml=True):\n    if skipExists and os.path.exists(pdf_file_path):\n        print(\"pdf_file_path already existed!\")\n        if removehtml :\n            os.remove(html_file_path)\n        return\n    exe_path = cfg['wkhtmltopdf'] #wkhtmltopdf.exe的保存路径\n    cmd_list = []\n    cmd_list.append(\" --load-error-handling ignore \")\n    cmd_list.append(\" \"+ html_file_path +\" \")\n    cmd_list.append(\" \"+ pdf_file_path +\" \")\n    cmd_str = exe_path + \"\".join(cmd_list)\n    print(cmd_str)\n    subprocess.check_call(cmd_str, shell=False)\n    if removehtml:\n        os.remove(html_file_path)\n```\n\n&emsp;&emsp;**11、定义读取保存各文件夹路径的配置文件的方法**\n```\ndef get_config():\n    cfg_file = read_file(\"config/wechat.cfg\")\n    cfg_file = cfg_file.replace(\"\\\\\\\\\",\"/\").replace(\"\\\\\",\"/\") #防止json中有 / 导致无法识别\n    cfg_json = json.loads(cfg_file)\n    return cfg_json\n```\n\n&emsp;&emsp;**【重要】配置文件放置在当前目录的子目录config下，名为wechat.cfg,内容如下**\n```\n{\n    \"jsonDir\": \"./download/wechat/fiddler-raw/Dump-0902-14-43-38/\",\n    \"htmlDir\": \"./download/wechat/html/\",\n    \"pdfDir\": \"./download/wechat/pdf/\",\n    \"wkhtmltopdf\": \"./wkhtmltopdf.exe\"\n}\n```\n\n&emsp;&emsp;**12、定义从秒数获得时间的方法（微信公众号的datetime存放的是从1970-01-01 00:00:00到发表时的秒数）**\n```\ndef seconds_to_time(seconds):\n    taime_array = time.localtime(seconds) # 1970-01-01 00:00:00 到发表时的秒数\n    other_style_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", taime_array)\n    date_time =datetime.strptime(other_style_time, \"%Y-%m-%d %H:%M:%S\")\n    return str(date_time).replace(\"-\",\"\").replace(\":\",\"\").replace(\" \",\"\")\n```\n\n&emsp;&emsp;**13、定义主函数进行调用，没有参数或者参数是html则进行下载，如果是pdf则是html转换成pdf**\n```\ncfg = get_config() # 获得配置文件的全局变量\n#get_article_list(\"./tmp/\") # for test\n#down_html(\"./tmp/\",\"./html/\")# for test\n \nif __name__ == \"__main__\":\n \n    if len(sys.argv) == 1:\n        arg = None\n    else:\n        arg = sys.argv[1]\n    if arg is None or arg == \"html\":\n        down_html(cfg['jsonDir'],cfg['htmlDir'])\n    elif arg == \"pdf\":\n        conv_html_pdf(cfg['htmlDir'],cfg['pdfDir'])\n```\n\n### **【运行效果】**\n<br />\n{% asset_img last_html.png html文件 %}\n{% asset_img last_pdf.png pdf文件 %}\n\n### **【完整代码】**\n```\n# _*_ coding:utf-8 _*_\nimport os,sys\nimport requests\nimport json\nimport subprocess\nimport re\nimport random\nimport time\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime,timedelta\nfrom time import sleep\n \nclass ArticleInfo():\n    def __init__(self,url,title,idx_num,atc_datetime): #idx_num是为了方便保存图片命名\n        self.url = url\n        self.title = title\n        self.idx_num = idx_num\n        self.atc_datetime = atc_datetime\n \ndef read_file(file_path):\n    with open(file_path,\"r\",encoding=\"utf-8\") as f:\n        file_content = f.read()\n    return file_content\n \ndef save_file(file_path,file_content):\n    with open(file_path,\"w\",encoding=\"utf-8\") as f:\n        f.write(file_content)\n \ndef get_html(url):\n    headers = {\n        \"Accept\": \"*/*\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 QBCore/4.0.1219.400 QQBrowser/9.0.2524.400 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 MicroMessenger/6.5.2.501 NetType/WIFI WindowsWechat\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Accept-Language\": \"zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.5;q=0.4\",\n        'Connection':'keep-alive'\n    }\n    response = requests.get(url,headers = headers,proxies=None)\n    if response.status_code == 200:\n        htmltxt = response.text #返回的网页正文\n        return htmltxt\n    else:\n        return None\n \ndef get_save_image(url,img_file_path):\n    headers = {\n        \"Accept\": \"*/*\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 QBCore/4.0.1219.400 QQBrowser/9.0.2524.400 Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 MicroMessenger/6.5.2.501 NetType/WIFI WindowsWechat\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Accept-Language\": \"zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.5;q=0.4\",\n        'Connection':'keep-alive'\n    }\n    response = requests.get(url,headers = headers,proxies=None)\n    with open(img_file_path,\"wb\") as f:\n        f.write(response.content)\n \ndef get_article_list(json_path):\n    \"\"\"\n    通过抓取的包的json文件，获取所有文章的信息的列表\n    \"\"\"\n    file_list = os.listdir(json_path) #jsonpath是fiddler导出的文件夹路径\n    article_list = [] # 用来保存所有文章的列表\n    for file in file_list:\n        file_path = os.path.join(json_path,file)\n        file_cont = read_file(file_path)\n        json_cont = json.loads(file_cont)\n        general_msg_list = json_cont['general_msg_list']\n        json_list = json.loads(general_msg_list)\n        #print(json_list['list'][0]['comm_msg_info']['datetime'])\n        for lst in json_list['list']:\n            atc_idx = 0 # 每个时间可以发多篇文章 为了方便后续图片命名\n            seconds_datetime = lst['comm_msg_info']['datetime']\n            atc_datetime = seconds_to_time(seconds_datetime)\n            if lst['comm_msg_info']['type'] == 49: # 49为普通的图文\n                atc_idx+=1\n                url = lst['app_msg_ext_info']['content_url']\n                title = lst['app_msg_ext_info']['title']\n                atc_info = ArticleInfo(url,title,atc_idx,atc_datetime)\n                article_list.append(atc_info)\n            if 1 == lst['app_msg_ext_info']['is_multi']: # 一次发多篇\n                multi_app_msg_item_list = lst['app_msg_ext_info']['multi_app_msg_item_list']\n                for multi in multi_app_msg_item_list:\n                    atc_idx+=1\n                    url = multi['content_url']\n                    title = multi['title']\n                    mul_act_info = ArticleInfo(url,title,atc_idx,atc_datetime)\n                    article_list.append(mul_act_info)\n    return article_list\n \ndef chg_img_link(bs_html):\n    link_list = bs_html.findAll(\"link\")\n    for link in link_list:\n        href = link.attrs[\"href\"]\n        if href.startswith(\"//\"):\n            new_href = \"http:\"+href\n            link.attrs[\"href\"]=new_href\n \ndef rep_image(org_html,local_img_path,html_name):\n    bs_html = BeautifulSoup(org_html,\"lxml\")\n    img_list = bs_html.findAll(\"img\")\n    img_idx = 0 # 计数和命名用\n    for img in img_list:\n        img_idx+=1\n        org_url = \"\" # 图片的真实地址\n        if \"data-src\" in img.attrs: # <img  data-src=\"...\"\n            org_url = img.attrs['data-src']\n        elif \"src\" in img.attrs : # <img  src=\"...\"\n            org_url = img.attrs['src']\n        if org_url.startswith(\"//\"):\n            org_url = \"http:\" + org_url\n        if len(org_url) > 0 :\n            print(\"download image \",img_idx)\n            if \"data-type\" in img.attrs:\n                img_type = img.attrs[\"data-type\"]\n            else:\n                img_type = \"png\"\n            img_name = html_name + \"_\" + str(img_idx) + \".\" +img_type\n            img_file_path = os.path.join(local_img_path,img_name)\n            get_save_image(org_url,img_file_path) # 下载并保存图片\n            img.attrs[\"src\"] = \"images/\" + img_name\n        else:\n            img.attrs[\"src\"] = \"\"\n    chg_img_link(bs_html)\n    return str(bs_html)\n \n \ndef down_html(json_path,html_path):\n    if not os.path.exists(html_path):\n        os.makedirs(html_path) # 创建保存html文件的文件夹\n    local_img_path = os.path.join(html_path,\"images\")\n    if not os.path.lexists(local_img_path):\n        os.makedirs(local_img_path) # 创建保存本地图片的文件夹\n    article_list = get_article_list(json_path)\n    article_list.sort(key=lambda x:x.atc_datetime, reverse=True) # 根据文章发表时间倒序排列\n    tot_article = len(article_list) # 文章的总数量\n    i = 0 #计数用\n    for atc in article_list:\n        i+=1\n        atc_unique_name = str(atc.atc_datetime) + \"_\" + str(atc.idx_num) # 时间+序号 作为同一时间发表的文章的唯一标识\n        html_name = atc_unique_name+\".html\"\n        html_file_path = os.path.join(html_path,html_name)\n        print(i,\"of\",tot_article,atc_unique_name,atc.title)\n        if os.path.exists(html_file_path): # 支持续传\n            print(\"{} existed already!\".format(html_file_path))\n            continue\n        org_atc_html = get_html(atc.url)\n        new_atc_html = rep_image(org_atc_html,local_img_path,html_name)\n        save_file(html_file_path,new_atc_html)\n        sleep(round(random.uniform(1,3),2))\n        \"\"\"for test\n        if i>0 :\n            break\n        \"\"\"\n \ndef conv_html_pdf(html_path,pdf_path):\n    if not os.path.exists(pdf_path):\n        os.makedirs(pdf_path)\n    f_list = os.listdir(html_path)\n    for f in f_list:\n        if (not f[-5:]==\".html\") or (\"tmp\" in f): #不是html文件的不转换，含有tmp的不转换\n            continue\n        html_file_path = os.path.join(html_path,f)\n        html_tmp_file = html_file_path[:-5]+\"_tmp.html\" #生成临时文件，供转pdf用\n        html_str = read_file(html_file_path)\n        bs_html = BeautifulSoup(html_str,\"lxml\")\n        pdf_title = \"\"\n        title_tag = bs_html.find(id=\"activity-name\")\n        if title_tag is not None:\n            pdf_title = \"_\"+title_tag.get_text().replace(\" \", \"\").replace(\"  \",\"\").replace(\"\\n\",\"\")\n        print(pdf_title)\n        r_idx = html_file_path.rindex(\"/\") + 1\n        pdf_name = html_file_path[r_idx:-5]+pdf_title\n        pdf_file_path = os.path.join(pdf_path,pdf_name+\".pdf\")\n        \"\"\"\n        加快转换速度，把临时文件中的不必要的元素去掉\n        \"\"\"\n        [s.extract() for s in bs_html([\"script\",\"iframe\",\"link\"])]\n        save_file(html_tmp_file,str(bs_html))\n        call_wkhtmltopdf(html_tmp_file,pdf_file_path)\n \ndef call_wkhtmltopdf(html_file_path,pdf_file_path,skipExists=True,removehtml=True):\n    if skipExists and os.path.exists(pdf_file_path):\n        print(\"pdf_file_path already existed!\")\n        if removehtml :\n            os.remove(html_file_path)\n        return\n    exe_path = cfg['wkhtmltopdf'] #wkhtmltopdf.exe的保存路径\n    cmd_list = []\n    cmd_list.append(\" --load-error-handling ignore \")\n    cmd_list.append(\" \"+ html_file_path +\" \")\n    cmd_list.append(\" \"+ pdf_file_path +\" \")\n    cmd_str = exe_path + \"\".join(cmd_list)\n    print(cmd_str)\n    subprocess.check_call(cmd_str, shell=False)\n    if removehtml:\n        os.remove(html_file_path)\n \ndef get_config():\n    cfg_file = read_file(\"config/wechat.cfg\")\n    cfg_file = cfg_file.replace(\"\\\\\\\\\",\"/\").replace(\"\\\\\",\"/\") #防止json中有 / 导致无法识别\n    cfg_json = json.loads(cfg_file)\n    return cfg_json\n \ndef seconds_to_time(seconds):\n    taime_array = time.localtime(seconds) # 1970-01-01 00:00:00 到发表时的秒数\n    other_style_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", taime_array)\n    date_time =datetime.strptime(other_style_time, \"%Y-%m-%d %H:%M:%S\")\n    return str(date_time).replace(\"-\",\"\").replace(\":\",\"\").replace(\" \",\"\")\n \n \ncfg = get_config() # 获得配置文件的全局变量\n#get_article_list(\"./tmp/\") # for test\n#down_html(\"./tmp/\",\"./html/\")# for test\n \nif __name__ == \"__main__\":\n \n    if len(sys.argv) == 1:\n        arg = None\n    else:\n        arg = sys.argv[1]\n    if arg is None or arg == \"html\":\n        down_html(cfg['jsonDir'],cfg['htmlDir'])\n    elif arg == \"pdf\":\n        conv_html_pdf(cfg['htmlDir'],cfg['pdfDir'])\n```","slug":"python批量下载公众号历史文章（一）","published":1,"updated":"2022-07-30T15:24:28.877Z","_id":"cl680ghf3001odwq86bo2aki9","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"【老博客地址】\"><a href=\"#【老博客地址】\" class=\"headerlink\" title=\"【老博客地址】\"></a><strong>【老博客地址】</strong></h3><p>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/\">【CSDN】博客主页</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/100254510\">【纯技术交流】python批量下载公众号历史文章（一）</a><br>&emsp;&emsp;<em>(在刊载一段时间后，莫名被吞掉了,所以在这里补档)</em><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/100661899\">python批量下载公众号历史文章（二）</a></p>\n<h3 id=\"【写在前面】\"><a href=\"#【写在前面】\" class=\"headerlink\" title=\"【写在前面】\"></a><strong>【写在前面】</strong></h3><p style=\"text-indent:2em\">\n前些天和同事讨论问题，什么是人才？讨论细节就不表了，最终总结为一句话：能解决问题的人才是人才。自己爱交朋友，很多朋友都在我有困难的时候帮助过我，也希望自己能够帮助朋友，成为能帮朋友解决问题的人才，所以朋友的请求从来都是来者不拒，力所能及之事一定全力办到！\n</p>\n<p style=\"text-indent:2em\">\n基于这点，给自己挖了很多坑：前些日子写的学习强国自动学习已经完成了一个初步版本，能够自动读文章、自动学习视频、自动分享，但是还不能自动答题，朋友说已经够用了，不过还是希望有时间了完成这块儿的内容；想读黄易老爷子武侠的那位朋友的问题也解决了，虽然下载下来的文字部分章节格式上有些乱，但也满足了朋友的要求，够用就行；学习Python也是一样，因时间关系没有系统的去学习过，只是通过解决各种问题达到学以致用，够用就行。很多博客文章，写有序号，都是计划要分段完成的，希望自己有一天能把所有的坑都填完了。\n</p>\n\n<h3 id=\"【背景】\"><a href=\"#【背景】\" class=\"headerlink\" title=\"【背景】\"></a><strong>【背景】</strong></h3><p style=\"text-indent:2em\">\n昨天和朋友去野钓，路上谈起股票。今年截止到目前，他的收益是40%多。问他炒股的心得，他是数据流派，经常看财务数据，就推荐了几个公众号，同时提出了一个请求，有些公众号历史文章太多，每次翻看之前的文章都得重头刷，问我能不能把这些文章下载到本地，自己想看的时候就看。想着不难，就答应姑且一试。\n</p>\n\n<h3 id=\"【目标】\"><a href=\"#【目标】\" class=\"headerlink\" title=\"【目标】\"></a><strong>【目标】</strong></h3><p>&emsp;&emsp;第一个版本，只是为了实现下载朋友指定的公众号的历史文章，并转换成pdf方便阅读。很多需要手工配合，算是一个半自动的版本吧。<br>&emsp;&emsp;后续会陆续减少手工，并把文章存储在数据库里，支持检索等。</p>\n<h3 id=\"【思路】\"><a href=\"#【思路】\" class=\"headerlink\" title=\"【思路】\"></a><strong>【思路】</strong></h3><p>&emsp;&emsp;和从网页上爬取小说不同，微信的公众号是通过app操作进行爬取，所以不能直接用chrome查看网页源码进行解析，需要用到第三方抓包工具，网上看了下用的比较多的有fiddler和anyproxy，前者比较简单，就选择了前者，思路如下：<br>&emsp;&emsp;1、通过fiddler抓取相应公众号的包（需要手动）；<br>&emsp;&emsp;2、通过python进行解析，获取历史文章列表信息json；<br>&emsp;&emsp;3、通过python进行解析，获取所有文章信息，包括标题、链接等；<br>&emsp;&emsp;4、通过python循环将这些文章下载到本地存为html；<br>&emsp;&emsp;5、通过python将文章里面的图片都保存到本地；<br>&emsp;&emsp;6、通过python将本地html文件里面的图片链接，修改为本地存储图片的路径（因为只存文章还不行，你会发现存到本地的html文件，里面的图片都无法正常显示）；<br>&emsp;&emsp;7、通过python调用wkhtmltopdf工具，将html转换成pdf。</p>\n<h3 id=\"【工具】\"><a href=\"#【工具】\" class=\"headerlink\" title=\"【工具】\"></a><strong>【工具】</strong></h3><p>&emsp;&emsp;1、抓包工具fiddler；<br>&emsp;&emsp;2、html转pdf工具wkhtmltopdf；<br>&emsp;&emsp;3、python3.7及对应的包；<br>&emsp;&emsp;4、电脑版微信或者模拟器或者直接用手机也行（如果用手机或者模拟器，需要设置代理）；</p>\n<h3 id=\"【准备工作之抓包】\"><a href=\"#【准备工作之抓包】\" class=\"headerlink\" title=\"【准备工作之抓包】\"></a><strong>【准备工作之抓包】</strong></h3><p>&emsp;&emsp;有些公众号的包比较特殊，所以要进行不同的处理。以朋友要求的公众号为例（为了避免广告嫌疑，就不写是啥公众号了）。<br>&emsp;&emsp;1、下载fiddler软件，因为公众号里都是https的链接，需要做抓包配置。中间会弹出一些框框让确认，全部点确定就行。<br><br></p>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_setup_1.png\" class title=\"fiddle设置\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_setup_2.png\" class title=\"fiddle设置\">\n\n<p>&emsp;&emsp;2、打开电脑版微信，搜索需要的公众号，点开历史文章列表。通过fiddler查看抓到的包的特点。<br><br></p>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/analyse_pkg_1.png\" class title=\"打开公众号链接\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/analyse_pkg_2.png\" class title=\"fiddle分析包特点\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/analyse_pkg_3.png\" class title=\"fiddle分析包特点\">\n\n<p>&emsp;&emsp;3、为了避免其他链接的干扰，配置过滤规则，滤掉不需要的链接。<br><br></p>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_filters.png\" class title=\"股票清单和基本信息-网页\">\n\n\n<p>&emsp;&emsp;4、然后清空fiddler的抓取记录，重新点击历史文章，并不断下拉，直到所有链接都显示出来为止。<br><br></p>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_info_1.png\" class title=\"fiddle抓包信息\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_info_2.png\" class title=\"fiddle抓包信息\">\n\n<p>&emsp;&emsp;5、将过滤之后获得的所有的seesion，以raw的形式保存到本地。<br><br></p>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_raw_1.png\" class title=\"fiddle保持raw格式session\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_raw_2.png\" class title=\"fiddle保持raw格式session\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_raw_3.png\" class title=\"fiddle保持raw格式session\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_raw_4.png\" class title=\"fiddle保持raw格式session\">\n\n<h3 id=\"【编码】\"><a href=\"#【编码】\" class=\"headerlink\" title=\"【编码】\"></a><strong>【编码】</strong></h3><p>&emsp;&emsp;<strong>1、标准报文头和需要的包</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># _*_ coding:utf-8 _*_</span><br><span class=\"line\">import os,sys</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import json</span><br><span class=\"line\">import subprocess</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\">import time</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from datetime import datetime,timedelta</span><br><span class=\"line\">from time import sleep</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>2、定义一个文章类，保存文章的基本信息</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ArticleInfo():</span><br><span class=\"line\">    def __init__(self,url,title,idx_num): #idx_num是为了方便保存图片命名</span><br><span class=\"line\">        self.url &#x3D; url</span><br><span class=\"line\">        self.title &#x3D; title</span><br><span class=\"line\">        self.idx_num &#x3D; idx_num</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>3、定义读取文件内容的方法（通用）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def read_file(file_path):</span><br><span class=\"line\">    with open(file_path,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class=\"line\">        file_content &#x3D; f.read()</span><br><span class=\"line\">    return file_content</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>4、定义写文件内容的方法（通用）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def save_file(file_path,file_content):</span><br><span class=\"line\">    with open(file_path,&quot;w&quot;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class=\"line\">        f.write(file_content)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>5、定义下载网页html的方法（通用）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_html(url):</span><br><span class=\"line\">    headers &#x3D; &#123;</span><br><span class=\"line\">        &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class=\"line\">        &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;53.0.2785.116 Safari&#x2F;537.36 QBCore&#x2F;4.0.1219.400 QQBrowser&#x2F;9.0.2524.400 Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36 MicroMessenger&#x2F;6.5.2.501 NetType&#x2F;WIFI WindowsWechat&quot;,</span><br><span class=\"line\">        &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class=\"line\">        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.6,en;q&#x3D;0.5;q&#x3D;0.4&quot;,</span><br><span class=\"line\">        &#39;Connection&#39;:&#39;keep-alive&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response &#x3D; requests.get(url,headers &#x3D; headers,proxies&#x3D;None)</span><br><span class=\"line\">    if response.status_code &#x3D;&#x3D; 200:</span><br><span class=\"line\">        htmltxt &#x3D; response.text #返回的网页正文</span><br><span class=\"line\">        return htmltxt</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return None</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>6、定义下载并保存网页图片的方法（通用）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_save_image(url,img_file_path):</span><br><span class=\"line\">    headers &#x3D; &#123;</span><br><span class=\"line\">        &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class=\"line\">        &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;53.0.2785.116 Safari&#x2F;537.36 QBCore&#x2F;4.0.1219.400 QQBrowser&#x2F;9.0.2524.400 Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36 MicroMessenger&#x2F;6.5.2.501 NetType&#x2F;WIFI WindowsWechat&quot;,</span><br><span class=\"line\">        &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class=\"line\">        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.6,en;q&#x3D;0.5;q&#x3D;0.4&quot;,</span><br><span class=\"line\">        &#39;Connection&#39;:&#39;keep-alive&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response &#x3D; requests.get(url,headers &#x3D; headers,proxies&#x3D;None)</span><br><span class=\"line\">    with open(img_file_path,&quot;wb&quot;) as f:</span><br><span class=\"line\">        f.write(response.content)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>7、定义调用下载html和图片的方法（主函数调用此方法开始下载）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def down_html(json_path,html_path):</span><br><span class=\"line\">    if not os.path.exists(html_path):</span><br><span class=\"line\">        os.makedirs(html_path) # 创建保存html文件的文件夹</span><br><span class=\"line\">    local_img_path &#x3D; os.path.join(html_path,&quot;images&quot;)</span><br><span class=\"line\">    if not os.path.lexists(local_img_path):</span><br><span class=\"line\">        os.makedirs(local_img_path) # 创建保存本地图片的文件夹</span><br><span class=\"line\">    article_list &#x3D; get_article_list(json_path)</span><br><span class=\"line\">    article_list.sort(key&#x3D;lambda x:x.atc_datetime, reverse&#x3D;True) # 根据文章发表时间倒序排列</span><br><span class=\"line\">    tot_article &#x3D; len(article_list) # 文章的总数量</span><br><span class=\"line\">    i &#x3D; 0 #计数用</span><br><span class=\"line\">    for atc in article_list:</span><br><span class=\"line\">        i+&#x3D;1</span><br><span class=\"line\">        atc_unique_name &#x3D; str(atc.atc_datetime) + &quot;_&quot; + str(atc.idx_num) # 时间+序号 作为同一时间发表的文章的唯一标识</span><br><span class=\"line\">        html_name &#x3D; atc_unique_name+&quot;.html&quot;</span><br><span class=\"line\">        html_file_path &#x3D; os.path.join(html_path,html_name)</span><br><span class=\"line\">        print(i,&quot;of&quot;,tot_article,atc_unique_name,atc.title)</span><br><span class=\"line\">        if os.path.exists(html_file_path): # 支持续传</span><br><span class=\"line\">            print(&quot;&#123;&#125; existed already!&quot;.format(html_file_path))</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        org_atc_html &#x3D; get_html(atc.url)</span><br><span class=\"line\">        new_atc_html &#x3D; rep_image(org_atc_html,local_img_path,html_name)</span><br><span class=\"line\">        save_file(html_file_path,new_atc_html)</span><br><span class=\"line\">        sleep(round(random.uniform(1,3),2))</span><br><span class=\"line\">        &quot;&quot;&quot;for test</span><br><span class=\"line\">        if i&gt;0 :</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>8、查看fiddler保存的json文件结构，定义解析json字符串获取文章列表的方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_article_list(json_path):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    通过抓取的包的json文件，获取所有文章的信息的列表</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    file_list &#x3D; os.listdir(json_path) #jsonpath是fiddler导出的文件夹路径</span><br><span class=\"line\">    article_list &#x3D; [] # 用来保存所有文章的列表</span><br><span class=\"line\">    for file in file_list:</span><br><span class=\"line\">        file_path &#x3D; os.path.join(json_path,file)</span><br><span class=\"line\">        file_cont &#x3D; read_file(file_path)</span><br><span class=\"line\">        json_cont &#x3D; json.loads(file_cont)</span><br><span class=\"line\">        general_msg_list &#x3D; json_cont[&#39;general_msg_list&#39;]</span><br><span class=\"line\">        json_list &#x3D; json.loads(general_msg_list)</span><br><span class=\"line\">        #print(json_list[&#39;list&#39;][0][&#39;comm_msg_info&#39;][&#39;datetime&#39;])</span><br><span class=\"line\">        for lst in json_list[&#39;list&#39;]:</span><br><span class=\"line\">            atc_idx &#x3D; 0 # 每个时间可以发多篇文章 为了方便后续图片命名</span><br><span class=\"line\">            seconds_datetime &#x3D; lst[&#39;comm_msg_info&#39;][&#39;datetime&#39;]</span><br><span class=\"line\">            atc_datetime &#x3D; seconds_to_time(seconds_datetime)</span><br><span class=\"line\">            if lst[&#39;comm_msg_info&#39;][&#39;type&#39;] &#x3D;&#x3D; 49: # 49为普通的图文</span><br><span class=\"line\">                atc_idx+&#x3D;1</span><br><span class=\"line\">                url &#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;content_url&#39;]</span><br><span class=\"line\">                title &#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;title&#39;]</span><br><span class=\"line\">                atc_info &#x3D; ArticleInfo(url,title,atc_idx,atc_datetime)</span><br><span class=\"line\">                article_list.append(atc_info)</span><br><span class=\"line\">            if 1 &#x3D;&#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;is_multi&#39;]: # 一次发多篇</span><br><span class=\"line\">                multi_app_msg_item_list &#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;multi_app_msg_item_list&#39;]</span><br><span class=\"line\">                for multi in multi_app_msg_item_list:</span><br><span class=\"line\">                    atc_idx+&#x3D;1</span><br><span class=\"line\">                    url &#x3D; multi[&#39;content_url&#39;]</span><br><span class=\"line\">                    title &#x3D; multi[&#39;title&#39;]</span><br><span class=\"line\">                    mul_act_info &#x3D; ArticleInfo(url,title,atc_idx,atc_datetime)</span><br><span class=\"line\">                    article_list.append(mul_act_info)</span><br><span class=\"line\">    return article_list</span><br></pre></td></tr></table></figure>\n<br>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/raw_info.png\" class title=\"fiddle保持raw具体内容\">\n\n<p>&emsp;&emsp;<strong>9、定义替换html中图片src为本地图片的方法（不替换，html中的图片将无法显示）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def chg_img_link(bs_html):</span><br><span class=\"line\">    link_list &#x3D; bs_html.findAll(&quot;link&quot;)</span><br><span class=\"line\">    for link in link_list:</span><br><span class=\"line\">        href &#x3D; link.attrs[&quot;href&quot;]</span><br><span class=\"line\">        if href.startswith(&quot;&#x2F;&#x2F;&quot;):</span><br><span class=\"line\">            new_href &#x3D; &quot;http:&quot;+href</span><br><span class=\"line\">            link.attrs[&quot;href&quot;]&#x3D;new_href</span><br><span class=\"line\"> </span><br><span class=\"line\">def rep_image(org_html,local_img_path,html_name):</span><br><span class=\"line\">    bs_html &#x3D; BeautifulSoup(org_html,&quot;lxml&quot;)</span><br><span class=\"line\">    img_list &#x3D; bs_html.findAll(&quot;img&quot;)</span><br><span class=\"line\">    img_idx &#x3D; 0 # 计数和命名用</span><br><span class=\"line\">    for img in img_list:</span><br><span class=\"line\">        img_idx+&#x3D;1</span><br><span class=\"line\">        org_url &#x3D; &quot;&quot; # 图片的真实地址</span><br><span class=\"line\">        if &quot;data-src&quot; in img.attrs: # &lt;img  data-src&#x3D;&quot;...&quot;</span><br><span class=\"line\">            org_url &#x3D; img.attrs[&#39;data-src&#39;]</span><br><span class=\"line\">        elif &quot;src&quot; in img.attrs : # &lt;img  src&#x3D;&quot;...&quot;</span><br><span class=\"line\">            org_url &#x3D; img.attrs[&#39;src&#39;]</span><br><span class=\"line\">        if org_url.startswith(&quot;&#x2F;&#x2F;&quot;):</span><br><span class=\"line\">            org_url &#x3D; &quot;http:&quot; + org_url</span><br><span class=\"line\">        if len(org_url) &gt; 0 :</span><br><span class=\"line\">            print(&quot;download image &quot;,img_idx)</span><br><span class=\"line\">            if &quot;data-type&quot; in img.attrs:</span><br><span class=\"line\">                img_type &#x3D; img.attrs[&quot;data-type&quot;]</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                img_type &#x3D; &quot;png&quot;</span><br><span class=\"line\">            img_name &#x3D; html_name + &quot;_&quot; + str(img_idx) + &quot;.&quot; +img_type</span><br><span class=\"line\">            img_file_path &#x3D; os.path.join(local_img_path,img_name)</span><br><span class=\"line\">            get_save_image(org_url,img_file_path) # 下载并保存图片</span><br><span class=\"line\">            img.attrs[&quot;src&quot;] &#x3D; &quot;images&#x2F;&quot; + img_name</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            img.attrs[&quot;src&quot;] &#x3D; &quot;&quot;</span><br><span class=\"line\">    chg_img_link(bs_html)</span><br><span class=\"line\">    return str(bs_html)</span><br></pre></td></tr></table></figure>\n<br>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/without_img.png\" class title=\"未替换本地图片源\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/with_img.png\" class title=\"替换本地图片源\">\n\n<p>&emsp;&emsp;<strong>10、定义html转换成pdf的方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def conv_html_pdf(html_path,pdf_path):</span><br><span class=\"line\">    if not os.path.exists(pdf_path):</span><br><span class=\"line\">        os.makedirs(pdf_path)</span><br><span class=\"line\">    f_list &#x3D; os.listdir(html_path)</span><br><span class=\"line\">    for f in f_list:</span><br><span class=\"line\">        if (not f[-5:]&#x3D;&#x3D;&quot;.html&quot;) or (&quot;tmp&quot; in f): #不是html文件的不转换，含有tmp的不转换</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        html_file_path &#x3D; os.path.join(html_path,f)</span><br><span class=\"line\">        html_tmp_file &#x3D; html_file_path[:-5]+&quot;_tmp.html&quot; #生成临时文件，供转pdf用</span><br><span class=\"line\">        html_str &#x3D; read_file(html_file_path)</span><br><span class=\"line\">        bs_html &#x3D; BeautifulSoup(html_str,&quot;lxml&quot;)</span><br><span class=\"line\">        pdf_title &#x3D; &quot;&quot;</span><br><span class=\"line\">        title_tag &#x3D; bs_html.find(id&#x3D;&quot;activity-name&quot;)</span><br><span class=\"line\">        if title_tag is not None:</span><br><span class=\"line\">            pdf_title &#x3D; &quot;_&quot;+title_tag.get_text().replace(&quot; &quot;, &quot;&quot;).replace(&quot;  &quot;,&quot;&quot;).replace(&quot;\\n&quot;,&quot;&quot;)</span><br><span class=\"line\">        print(pdf_title)</span><br><span class=\"line\">        r_idx &#x3D; html_file_path.rindex(&quot;&#x2F;&quot;) + 1</span><br><span class=\"line\">        pdf_name &#x3D; html_file_path[r_idx:-5]+pdf_title</span><br><span class=\"line\">        pdf_file_path &#x3D; os.path.join(pdf_path,pdf_name+&quot;.pdf&quot;)</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        加快转换速度，把临时文件中的不必要的元素去掉</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        [s.extract() for s in bs_html([&quot;script&quot;,&quot;iframe&quot;,&quot;link&quot;])]</span><br><span class=\"line\">        save_file(html_tmp_file,str(bs_html))</span><br><span class=\"line\">        call_wkhtmltopdf(html_tmp_file,pdf_file_path)</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def call_wkhtmltopdf(html_file_path,pdf_file_path,skipExists&#x3D;True,removehtml&#x3D;True):</span><br><span class=\"line\">    if skipExists and os.path.exists(pdf_file_path):</span><br><span class=\"line\">        print(&quot;pdf_file_path already existed!&quot;)</span><br><span class=\"line\">        if removehtml :</span><br><span class=\"line\">            os.remove(html_file_path)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    exe_path &#x3D; cfg[&#39;wkhtmltopdf&#39;] #wkhtmltopdf.exe的保存路径</span><br><span class=\"line\">    cmd_list &#x3D; []</span><br><span class=\"line\">    cmd_list.append(&quot; --load-error-handling ignore &quot;)</span><br><span class=\"line\">    cmd_list.append(&quot; &quot;+ html_file_path +&quot; &quot;)</span><br><span class=\"line\">    cmd_list.append(&quot; &quot;+ pdf_file_path +&quot; &quot;)</span><br><span class=\"line\">    cmd_str &#x3D; exe_path + &quot;&quot;.join(cmd_list)</span><br><span class=\"line\">    print(cmd_str)</span><br><span class=\"line\">    subprocess.check_call(cmd_str, shell&#x3D;False)</span><br><span class=\"line\">    if removehtml:</span><br><span class=\"line\">        os.remove(html_file_path)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>11、定义读取保存各文件夹路径的配置文件的方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_config():</span><br><span class=\"line\">    cfg_file &#x3D; read_file(&quot;config&#x2F;wechat.cfg&quot;)</span><br><span class=\"line\">    cfg_file &#x3D; cfg_file.replace(&quot;\\\\\\\\&quot;,&quot;&#x2F;&quot;).replace(&quot;\\\\&quot;,&quot;&#x2F;&quot;) #防止json中有 &#x2F; 导致无法识别</span><br><span class=\"line\">    cfg_json &#x3D; json.loads(cfg_file)</span><br><span class=\"line\">    return cfg_json</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>【重要】配置文件放置在当前目录的子目录config下，名为wechat.cfg,内容如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;jsonDir&quot;: &quot;.&#x2F;download&#x2F;wechat&#x2F;fiddler-raw&#x2F;Dump-0902-14-43-38&#x2F;&quot;,</span><br><span class=\"line\">    &quot;htmlDir&quot;: &quot;.&#x2F;download&#x2F;wechat&#x2F;html&#x2F;&quot;,</span><br><span class=\"line\">    &quot;pdfDir&quot;: &quot;.&#x2F;download&#x2F;wechat&#x2F;pdf&#x2F;&quot;,</span><br><span class=\"line\">    &quot;wkhtmltopdf&quot;: &quot;.&#x2F;wkhtmltopdf.exe&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>12、定义从秒数获得时间的方法（微信公众号的datetime存放的是从1970-01-01 00:00:00到发表时的秒数）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def seconds_to_time(seconds):</span><br><span class=\"line\">    taime_array &#x3D; time.localtime(seconds) # 1970-01-01 00:00:00 到发表时的秒数</span><br><span class=\"line\">    other_style_time &#x3D; time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, taime_array)</span><br><span class=\"line\">    date_time &#x3D;datetime.strptime(other_style_time, &quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class=\"line\">    return str(date_time).replace(&quot;-&quot;,&quot;&quot;).replace(&quot;:&quot;,&quot;&quot;).replace(&quot; &quot;,&quot;&quot;)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>13、定义主函数进行调用，没有参数或者参数是html则进行下载，如果是pdf则是html转换成pdf</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg &#x3D; get_config() # 获得配置文件的全局变量</span><br><span class=\"line\">#get_article_list(&quot;.&#x2F;tmp&#x2F;&quot;) # for test</span><br><span class=\"line\">#down_html(&quot;.&#x2F;tmp&#x2F;&quot;,&quot;.&#x2F;html&#x2F;&quot;)# for test</span><br><span class=\"line\"> </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\"> </span><br><span class=\"line\">    if len(sys.argv) &#x3D;&#x3D; 1:</span><br><span class=\"line\">        arg &#x3D; None</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        arg &#x3D; sys.argv[1]</span><br><span class=\"line\">    if arg is None or arg &#x3D;&#x3D; &quot;html&quot;:</span><br><span class=\"line\">        down_html(cfg[&#39;jsonDir&#39;],cfg[&#39;htmlDir&#39;])</span><br><span class=\"line\">    elif arg &#x3D;&#x3D; &quot;pdf&quot;:</span><br><span class=\"line\">        conv_html_pdf(cfg[&#39;htmlDir&#39;],cfg[&#39;pdfDir&#39;])</span><br></pre></td></tr></table></figure>\n<h3 id=\"【运行效果】\"><a href=\"#【运行效果】\" class=\"headerlink\" title=\"【运行效果】\"></a><strong>【运行效果】</strong></h3><br>\n\n\n\n<h3 id=\"【完整代码】\"><a href=\"#【完整代码】\" class=\"headerlink\" title=\"【完整代码】\"></a><strong>【完整代码】</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># _*_ coding:utf-8 _*_</span><br><span class=\"line\">import os,sys</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import json</span><br><span class=\"line\">import subprocess</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\">import time</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from datetime import datetime,timedelta</span><br><span class=\"line\">from time import sleep</span><br><span class=\"line\"> </span><br><span class=\"line\">class ArticleInfo():</span><br><span class=\"line\">    def __init__(self,url,title,idx_num,atc_datetime): #idx_num是为了方便保存图片命名</span><br><span class=\"line\">        self.url &#x3D; url</span><br><span class=\"line\">        self.title &#x3D; title</span><br><span class=\"line\">        self.idx_num &#x3D; idx_num</span><br><span class=\"line\">        self.atc_datetime &#x3D; atc_datetime</span><br><span class=\"line\"> </span><br><span class=\"line\">def read_file(file_path):</span><br><span class=\"line\">    with open(file_path,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class=\"line\">        file_content &#x3D; f.read()</span><br><span class=\"line\">    return file_content</span><br><span class=\"line\"> </span><br><span class=\"line\">def save_file(file_path,file_content):</span><br><span class=\"line\">    with open(file_path,&quot;w&quot;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class=\"line\">        f.write(file_content)</span><br><span class=\"line\"> </span><br><span class=\"line\">def get_html(url):</span><br><span class=\"line\">    headers &#x3D; &#123;</span><br><span class=\"line\">        &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class=\"line\">        &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;53.0.2785.116 Safari&#x2F;537.36 QBCore&#x2F;4.0.1219.400 QQBrowser&#x2F;9.0.2524.400 Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36 MicroMessenger&#x2F;6.5.2.501 NetType&#x2F;WIFI WindowsWechat&quot;,</span><br><span class=\"line\">        &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class=\"line\">        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.6,en;q&#x3D;0.5;q&#x3D;0.4&quot;,</span><br><span class=\"line\">        &#39;Connection&#39;:&#39;keep-alive&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response &#x3D; requests.get(url,headers &#x3D; headers,proxies&#x3D;None)</span><br><span class=\"line\">    if response.status_code &#x3D;&#x3D; 200:</span><br><span class=\"line\">        htmltxt &#x3D; response.text #返回的网页正文</span><br><span class=\"line\">        return htmltxt</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return None</span><br><span class=\"line\"> </span><br><span class=\"line\">def get_save_image(url,img_file_path):</span><br><span class=\"line\">    headers &#x3D; &#123;</span><br><span class=\"line\">        &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class=\"line\">        &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;53.0.2785.116 Safari&#x2F;537.36 QBCore&#x2F;4.0.1219.400 QQBrowser&#x2F;9.0.2524.400 Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36 MicroMessenger&#x2F;6.5.2.501 NetType&#x2F;WIFI WindowsWechat&quot;,</span><br><span class=\"line\">        &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class=\"line\">        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.6,en;q&#x3D;0.5;q&#x3D;0.4&quot;,</span><br><span class=\"line\">        &#39;Connection&#39;:&#39;keep-alive&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response &#x3D; requests.get(url,headers &#x3D; headers,proxies&#x3D;None)</span><br><span class=\"line\">    with open(img_file_path,&quot;wb&quot;) as f:</span><br><span class=\"line\">        f.write(response.content)</span><br><span class=\"line\"> </span><br><span class=\"line\">def get_article_list(json_path):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    通过抓取的包的json文件，获取所有文章的信息的列表</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    file_list &#x3D; os.listdir(json_path) #jsonpath是fiddler导出的文件夹路径</span><br><span class=\"line\">    article_list &#x3D; [] # 用来保存所有文章的列表</span><br><span class=\"line\">    for file in file_list:</span><br><span class=\"line\">        file_path &#x3D; os.path.join(json_path,file)</span><br><span class=\"line\">        file_cont &#x3D; read_file(file_path)</span><br><span class=\"line\">        json_cont &#x3D; json.loads(file_cont)</span><br><span class=\"line\">        general_msg_list &#x3D; json_cont[&#39;general_msg_list&#39;]</span><br><span class=\"line\">        json_list &#x3D; json.loads(general_msg_list)</span><br><span class=\"line\">        #print(json_list[&#39;list&#39;][0][&#39;comm_msg_info&#39;][&#39;datetime&#39;])</span><br><span class=\"line\">        for lst in json_list[&#39;list&#39;]:</span><br><span class=\"line\">            atc_idx &#x3D; 0 # 每个时间可以发多篇文章 为了方便后续图片命名</span><br><span class=\"line\">            seconds_datetime &#x3D; lst[&#39;comm_msg_info&#39;][&#39;datetime&#39;]</span><br><span class=\"line\">            atc_datetime &#x3D; seconds_to_time(seconds_datetime)</span><br><span class=\"line\">            if lst[&#39;comm_msg_info&#39;][&#39;type&#39;] &#x3D;&#x3D; 49: # 49为普通的图文</span><br><span class=\"line\">                atc_idx+&#x3D;1</span><br><span class=\"line\">                url &#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;content_url&#39;]</span><br><span class=\"line\">                title &#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;title&#39;]</span><br><span class=\"line\">                atc_info &#x3D; ArticleInfo(url,title,atc_idx,atc_datetime)</span><br><span class=\"line\">                article_list.append(atc_info)</span><br><span class=\"line\">            if 1 &#x3D;&#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;is_multi&#39;]: # 一次发多篇</span><br><span class=\"line\">                multi_app_msg_item_list &#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;multi_app_msg_item_list&#39;]</span><br><span class=\"line\">                for multi in multi_app_msg_item_list:</span><br><span class=\"line\">                    atc_idx+&#x3D;1</span><br><span class=\"line\">                    url &#x3D; multi[&#39;content_url&#39;]</span><br><span class=\"line\">                    title &#x3D; multi[&#39;title&#39;]</span><br><span class=\"line\">                    mul_act_info &#x3D; ArticleInfo(url,title,atc_idx,atc_datetime)</span><br><span class=\"line\">                    article_list.append(mul_act_info)</span><br><span class=\"line\">    return article_list</span><br><span class=\"line\"> </span><br><span class=\"line\">def chg_img_link(bs_html):</span><br><span class=\"line\">    link_list &#x3D; bs_html.findAll(&quot;link&quot;)</span><br><span class=\"line\">    for link in link_list:</span><br><span class=\"line\">        href &#x3D; link.attrs[&quot;href&quot;]</span><br><span class=\"line\">        if href.startswith(&quot;&#x2F;&#x2F;&quot;):</span><br><span class=\"line\">            new_href &#x3D; &quot;http:&quot;+href</span><br><span class=\"line\">            link.attrs[&quot;href&quot;]&#x3D;new_href</span><br><span class=\"line\"> </span><br><span class=\"line\">def rep_image(org_html,local_img_path,html_name):</span><br><span class=\"line\">    bs_html &#x3D; BeautifulSoup(org_html,&quot;lxml&quot;)</span><br><span class=\"line\">    img_list &#x3D; bs_html.findAll(&quot;img&quot;)</span><br><span class=\"line\">    img_idx &#x3D; 0 # 计数和命名用</span><br><span class=\"line\">    for img in img_list:</span><br><span class=\"line\">        img_idx+&#x3D;1</span><br><span class=\"line\">        org_url &#x3D; &quot;&quot; # 图片的真实地址</span><br><span class=\"line\">        if &quot;data-src&quot; in img.attrs: # &lt;img  data-src&#x3D;&quot;...&quot;</span><br><span class=\"line\">            org_url &#x3D; img.attrs[&#39;data-src&#39;]</span><br><span class=\"line\">        elif &quot;src&quot; in img.attrs : # &lt;img  src&#x3D;&quot;...&quot;</span><br><span class=\"line\">            org_url &#x3D; img.attrs[&#39;src&#39;]</span><br><span class=\"line\">        if org_url.startswith(&quot;&#x2F;&#x2F;&quot;):</span><br><span class=\"line\">            org_url &#x3D; &quot;http:&quot; + org_url</span><br><span class=\"line\">        if len(org_url) &gt; 0 :</span><br><span class=\"line\">            print(&quot;download image &quot;,img_idx)</span><br><span class=\"line\">            if &quot;data-type&quot; in img.attrs:</span><br><span class=\"line\">                img_type &#x3D; img.attrs[&quot;data-type&quot;]</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                img_type &#x3D; &quot;png&quot;</span><br><span class=\"line\">            img_name &#x3D; html_name + &quot;_&quot; + str(img_idx) + &quot;.&quot; +img_type</span><br><span class=\"line\">            img_file_path &#x3D; os.path.join(local_img_path,img_name)</span><br><span class=\"line\">            get_save_image(org_url,img_file_path) # 下载并保存图片</span><br><span class=\"line\">            img.attrs[&quot;src&quot;] &#x3D; &quot;images&#x2F;&quot; + img_name</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            img.attrs[&quot;src&quot;] &#x3D; &quot;&quot;</span><br><span class=\"line\">    chg_img_link(bs_html)</span><br><span class=\"line\">    return str(bs_html)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">def down_html(json_path,html_path):</span><br><span class=\"line\">    if not os.path.exists(html_path):</span><br><span class=\"line\">        os.makedirs(html_path) # 创建保存html文件的文件夹</span><br><span class=\"line\">    local_img_path &#x3D; os.path.join(html_path,&quot;images&quot;)</span><br><span class=\"line\">    if not os.path.lexists(local_img_path):</span><br><span class=\"line\">        os.makedirs(local_img_path) # 创建保存本地图片的文件夹</span><br><span class=\"line\">    article_list &#x3D; get_article_list(json_path)</span><br><span class=\"line\">    article_list.sort(key&#x3D;lambda x:x.atc_datetime, reverse&#x3D;True) # 根据文章发表时间倒序排列</span><br><span class=\"line\">    tot_article &#x3D; len(article_list) # 文章的总数量</span><br><span class=\"line\">    i &#x3D; 0 #计数用</span><br><span class=\"line\">    for atc in article_list:</span><br><span class=\"line\">        i+&#x3D;1</span><br><span class=\"line\">        atc_unique_name &#x3D; str(atc.atc_datetime) + &quot;_&quot; + str(atc.idx_num) # 时间+序号 作为同一时间发表的文章的唯一标识</span><br><span class=\"line\">        html_name &#x3D; atc_unique_name+&quot;.html&quot;</span><br><span class=\"line\">        html_file_path &#x3D; os.path.join(html_path,html_name)</span><br><span class=\"line\">        print(i,&quot;of&quot;,tot_article,atc_unique_name,atc.title)</span><br><span class=\"line\">        if os.path.exists(html_file_path): # 支持续传</span><br><span class=\"line\">            print(&quot;&#123;&#125; existed already!&quot;.format(html_file_path))</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        org_atc_html &#x3D; get_html(atc.url)</span><br><span class=\"line\">        new_atc_html &#x3D; rep_image(org_atc_html,local_img_path,html_name)</span><br><span class=\"line\">        save_file(html_file_path,new_atc_html)</span><br><span class=\"line\">        sleep(round(random.uniform(1,3),2))</span><br><span class=\"line\">        &quot;&quot;&quot;for test</span><br><span class=\"line\">        if i&gt;0 :</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">def conv_html_pdf(html_path,pdf_path):</span><br><span class=\"line\">    if not os.path.exists(pdf_path):</span><br><span class=\"line\">        os.makedirs(pdf_path)</span><br><span class=\"line\">    f_list &#x3D; os.listdir(html_path)</span><br><span class=\"line\">    for f in f_list:</span><br><span class=\"line\">        if (not f[-5:]&#x3D;&#x3D;&quot;.html&quot;) or (&quot;tmp&quot; in f): #不是html文件的不转换，含有tmp的不转换</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        html_file_path &#x3D; os.path.join(html_path,f)</span><br><span class=\"line\">        html_tmp_file &#x3D; html_file_path[:-5]+&quot;_tmp.html&quot; #生成临时文件，供转pdf用</span><br><span class=\"line\">        html_str &#x3D; read_file(html_file_path)</span><br><span class=\"line\">        bs_html &#x3D; BeautifulSoup(html_str,&quot;lxml&quot;)</span><br><span class=\"line\">        pdf_title &#x3D; &quot;&quot;</span><br><span class=\"line\">        title_tag &#x3D; bs_html.find(id&#x3D;&quot;activity-name&quot;)</span><br><span class=\"line\">        if title_tag is not None:</span><br><span class=\"line\">            pdf_title &#x3D; &quot;_&quot;+title_tag.get_text().replace(&quot; &quot;, &quot;&quot;).replace(&quot;  &quot;,&quot;&quot;).replace(&quot;\\n&quot;,&quot;&quot;)</span><br><span class=\"line\">        print(pdf_title)</span><br><span class=\"line\">        r_idx &#x3D; html_file_path.rindex(&quot;&#x2F;&quot;) + 1</span><br><span class=\"line\">        pdf_name &#x3D; html_file_path[r_idx:-5]+pdf_title</span><br><span class=\"line\">        pdf_file_path &#x3D; os.path.join(pdf_path,pdf_name+&quot;.pdf&quot;)</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        加快转换速度，把临时文件中的不必要的元素去掉</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        [s.extract() for s in bs_html([&quot;script&quot;,&quot;iframe&quot;,&quot;link&quot;])]</span><br><span class=\"line\">        save_file(html_tmp_file,str(bs_html))</span><br><span class=\"line\">        call_wkhtmltopdf(html_tmp_file,pdf_file_path)</span><br><span class=\"line\"> </span><br><span class=\"line\">def call_wkhtmltopdf(html_file_path,pdf_file_path,skipExists&#x3D;True,removehtml&#x3D;True):</span><br><span class=\"line\">    if skipExists and os.path.exists(pdf_file_path):</span><br><span class=\"line\">        print(&quot;pdf_file_path already existed!&quot;)</span><br><span class=\"line\">        if removehtml :</span><br><span class=\"line\">            os.remove(html_file_path)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    exe_path &#x3D; cfg[&#39;wkhtmltopdf&#39;] #wkhtmltopdf.exe的保存路径</span><br><span class=\"line\">    cmd_list &#x3D; []</span><br><span class=\"line\">    cmd_list.append(&quot; --load-error-handling ignore &quot;)</span><br><span class=\"line\">    cmd_list.append(&quot; &quot;+ html_file_path +&quot; &quot;)</span><br><span class=\"line\">    cmd_list.append(&quot; &quot;+ pdf_file_path +&quot; &quot;)</span><br><span class=\"line\">    cmd_str &#x3D; exe_path + &quot;&quot;.join(cmd_list)</span><br><span class=\"line\">    print(cmd_str)</span><br><span class=\"line\">    subprocess.check_call(cmd_str, shell&#x3D;False)</span><br><span class=\"line\">    if removehtml:</span><br><span class=\"line\">        os.remove(html_file_path)</span><br><span class=\"line\"> </span><br><span class=\"line\">def get_config():</span><br><span class=\"line\">    cfg_file &#x3D; read_file(&quot;config&#x2F;wechat.cfg&quot;)</span><br><span class=\"line\">    cfg_file &#x3D; cfg_file.replace(&quot;\\\\\\\\&quot;,&quot;&#x2F;&quot;).replace(&quot;\\\\&quot;,&quot;&#x2F;&quot;) #防止json中有 &#x2F; 导致无法识别</span><br><span class=\"line\">    cfg_json &#x3D; json.loads(cfg_file)</span><br><span class=\"line\">    return cfg_json</span><br><span class=\"line\"> </span><br><span class=\"line\">def seconds_to_time(seconds):</span><br><span class=\"line\">    taime_array &#x3D; time.localtime(seconds) # 1970-01-01 00:00:00 到发表时的秒数</span><br><span class=\"line\">    other_style_time &#x3D; time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, taime_array)</span><br><span class=\"line\">    date_time &#x3D;datetime.strptime(other_style_time, &quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class=\"line\">    return str(date_time).replace(&quot;-&quot;,&quot;&quot;).replace(&quot;:&quot;,&quot;&quot;).replace(&quot; &quot;,&quot;&quot;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">cfg &#x3D; get_config() # 获得配置文件的全局变量</span><br><span class=\"line\">#get_article_list(&quot;.&#x2F;tmp&#x2F;&quot;) # for test</span><br><span class=\"line\">#down_html(&quot;.&#x2F;tmp&#x2F;&quot;,&quot;.&#x2F;html&#x2F;&quot;)# for test</span><br><span class=\"line\"> </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\"> </span><br><span class=\"line\">    if len(sys.argv) &#x3D;&#x3D; 1:</span><br><span class=\"line\">        arg &#x3D; None</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        arg &#x3D; sys.argv[1]</span><br><span class=\"line\">    if arg is None or arg &#x3D;&#x3D; &quot;html&quot;:</span><br><span class=\"line\">        down_html(cfg[&#39;jsonDir&#39;],cfg[&#39;htmlDir&#39;])</span><br><span class=\"line\">    elif arg &#x3D;&#x3D; &quot;pdf&quot;:</span><br><span class=\"line\">        conv_html_pdf(cfg[&#39;htmlDir&#39;],cfg[&#39;pdfDir&#39;])</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":"https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg","excerpt":"","more":"<h3 id=\"【老博客地址】\"><a href=\"#【老博客地址】\" class=\"headerlink\" title=\"【老博客地址】\"></a><strong>【老博客地址】</strong></h3><p>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/\">【CSDN】博客主页</a><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/100254510\">【纯技术交流】python批量下载公众号历史文章（一）</a><br>&emsp;&emsp;<em>(在刊载一段时间后，莫名被吞掉了,所以在这里补档)</em><br>&emsp;&emsp;<a href=\"https://blog.csdn.net/MissYourKiss/article/details/100661899\">python批量下载公众号历史文章（二）</a></p>\n<h3 id=\"【写在前面】\"><a href=\"#【写在前面】\" class=\"headerlink\" title=\"【写在前面】\"></a><strong>【写在前面】</strong></h3><p style=\"text-indent:2em\">\n前些天和同事讨论问题，什么是人才？讨论细节就不表了，最终总结为一句话：能解决问题的人才是人才。自己爱交朋友，很多朋友都在我有困难的时候帮助过我，也希望自己能够帮助朋友，成为能帮朋友解决问题的人才，所以朋友的请求从来都是来者不拒，力所能及之事一定全力办到！\n</p>\n<p style=\"text-indent:2em\">\n基于这点，给自己挖了很多坑：前些日子写的学习强国自动学习已经完成了一个初步版本，能够自动读文章、自动学习视频、自动分享，但是还不能自动答题，朋友说已经够用了，不过还是希望有时间了完成这块儿的内容；想读黄易老爷子武侠的那位朋友的问题也解决了，虽然下载下来的文字部分章节格式上有些乱，但也满足了朋友的要求，够用就行；学习Python也是一样，因时间关系没有系统的去学习过，只是通过解决各种问题达到学以致用，够用就行。很多博客文章，写有序号，都是计划要分段完成的，希望自己有一天能把所有的坑都填完了。\n</p>\n\n<h3 id=\"【背景】\"><a href=\"#【背景】\" class=\"headerlink\" title=\"【背景】\"></a><strong>【背景】</strong></h3><p style=\"text-indent:2em\">\n昨天和朋友去野钓，路上谈起股票。今年截止到目前，他的收益是40%多。问他炒股的心得，他是数据流派，经常看财务数据，就推荐了几个公众号，同时提出了一个请求，有些公众号历史文章太多，每次翻看之前的文章都得重头刷，问我能不能把这些文章下载到本地，自己想看的时候就看。想着不难，就答应姑且一试。\n</p>\n\n<h3 id=\"【目标】\"><a href=\"#【目标】\" class=\"headerlink\" title=\"【目标】\"></a><strong>【目标】</strong></h3><p>&emsp;&emsp;第一个版本，只是为了实现下载朋友指定的公众号的历史文章，并转换成pdf方便阅读。很多需要手工配合，算是一个半自动的版本吧。<br>&emsp;&emsp;后续会陆续减少手工，并把文章存储在数据库里，支持检索等。</p>\n<h3 id=\"【思路】\"><a href=\"#【思路】\" class=\"headerlink\" title=\"【思路】\"></a><strong>【思路】</strong></h3><p>&emsp;&emsp;和从网页上爬取小说不同，微信的公众号是通过app操作进行爬取，所以不能直接用chrome查看网页源码进行解析，需要用到第三方抓包工具，网上看了下用的比较多的有fiddler和anyproxy，前者比较简单，就选择了前者，思路如下：<br>&emsp;&emsp;1、通过fiddler抓取相应公众号的包（需要手动）；<br>&emsp;&emsp;2、通过python进行解析，获取历史文章列表信息json；<br>&emsp;&emsp;3、通过python进行解析，获取所有文章信息，包括标题、链接等；<br>&emsp;&emsp;4、通过python循环将这些文章下载到本地存为html；<br>&emsp;&emsp;5、通过python将文章里面的图片都保存到本地；<br>&emsp;&emsp;6、通过python将本地html文件里面的图片链接，修改为本地存储图片的路径（因为只存文章还不行，你会发现存到本地的html文件，里面的图片都无法正常显示）；<br>&emsp;&emsp;7、通过python调用wkhtmltopdf工具，将html转换成pdf。</p>\n<h3 id=\"【工具】\"><a href=\"#【工具】\" class=\"headerlink\" title=\"【工具】\"></a><strong>【工具】</strong></h3><p>&emsp;&emsp;1、抓包工具fiddler；<br>&emsp;&emsp;2、html转pdf工具wkhtmltopdf；<br>&emsp;&emsp;3、python3.7及对应的包；<br>&emsp;&emsp;4、电脑版微信或者模拟器或者直接用手机也行（如果用手机或者模拟器，需要设置代理）；</p>\n<h3 id=\"【准备工作之抓包】\"><a href=\"#【准备工作之抓包】\" class=\"headerlink\" title=\"【准备工作之抓包】\"></a><strong>【准备工作之抓包】</strong></h3><p>&emsp;&emsp;有些公众号的包比较特殊，所以要进行不同的处理。以朋友要求的公众号为例（为了避免广告嫌疑，就不写是啥公众号了）。<br>&emsp;&emsp;1、下载fiddler软件，因为公众号里都是https的链接，需要做抓包配置。中间会弹出一些框框让确认，全部点确定就行。<br><br></p>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_setup_1.png\" class title=\"fiddle设置\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_setup_2.png\" class title=\"fiddle设置\">\n\n<p>&emsp;&emsp;2、打开电脑版微信，搜索需要的公众号，点开历史文章列表。通过fiddler查看抓到的包的特点。<br><br></p>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/analyse_pkg_1.png\" class title=\"打开公众号链接\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/analyse_pkg_2.png\" class title=\"fiddle分析包特点\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/analyse_pkg_3.png\" class title=\"fiddle分析包特点\">\n\n<p>&emsp;&emsp;3、为了避免其他链接的干扰，配置过滤规则，滤掉不需要的链接。<br><br></p>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_filters.png\" class title=\"股票清单和基本信息-网页\">\n\n\n<p>&emsp;&emsp;4、然后清空fiddler的抓取记录，重新点击历史文章，并不断下拉，直到所有链接都显示出来为止。<br><br></p>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_info_1.png\" class title=\"fiddle抓包信息\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_info_2.png\" class title=\"fiddle抓包信息\">\n\n<p>&emsp;&emsp;5、将过滤之后获得的所有的seesion，以raw的形式保存到本地。<br><br></p>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_raw_1.png\" class title=\"fiddle保持raw格式session\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_raw_2.png\" class title=\"fiddle保持raw格式session\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_raw_3.png\" class title=\"fiddle保持raw格式session\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/fiddle_raw_4.png\" class title=\"fiddle保持raw格式session\">\n\n<h3 id=\"【编码】\"><a href=\"#【编码】\" class=\"headerlink\" title=\"【编码】\"></a><strong>【编码】</strong></h3><p>&emsp;&emsp;<strong>1、标准报文头和需要的包</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># _*_ coding:utf-8 _*_</span><br><span class=\"line\">import os,sys</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import json</span><br><span class=\"line\">import subprocess</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\">import time</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from datetime import datetime,timedelta</span><br><span class=\"line\">from time import sleep</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>2、定义一个文章类，保存文章的基本信息</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ArticleInfo():</span><br><span class=\"line\">    def __init__(self,url,title,idx_num): #idx_num是为了方便保存图片命名</span><br><span class=\"line\">        self.url &#x3D; url</span><br><span class=\"line\">        self.title &#x3D; title</span><br><span class=\"line\">        self.idx_num &#x3D; idx_num</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>3、定义读取文件内容的方法（通用）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def read_file(file_path):</span><br><span class=\"line\">    with open(file_path,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class=\"line\">        file_content &#x3D; f.read()</span><br><span class=\"line\">    return file_content</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>4、定义写文件内容的方法（通用）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def save_file(file_path,file_content):</span><br><span class=\"line\">    with open(file_path,&quot;w&quot;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class=\"line\">        f.write(file_content)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>5、定义下载网页html的方法（通用）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_html(url):</span><br><span class=\"line\">    headers &#x3D; &#123;</span><br><span class=\"line\">        &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class=\"line\">        &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;53.0.2785.116 Safari&#x2F;537.36 QBCore&#x2F;4.0.1219.400 QQBrowser&#x2F;9.0.2524.400 Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36 MicroMessenger&#x2F;6.5.2.501 NetType&#x2F;WIFI WindowsWechat&quot;,</span><br><span class=\"line\">        &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class=\"line\">        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.6,en;q&#x3D;0.5;q&#x3D;0.4&quot;,</span><br><span class=\"line\">        &#39;Connection&#39;:&#39;keep-alive&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response &#x3D; requests.get(url,headers &#x3D; headers,proxies&#x3D;None)</span><br><span class=\"line\">    if response.status_code &#x3D;&#x3D; 200:</span><br><span class=\"line\">        htmltxt &#x3D; response.text #返回的网页正文</span><br><span class=\"line\">        return htmltxt</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return None</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>6、定义下载并保存网页图片的方法（通用）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_save_image(url,img_file_path):</span><br><span class=\"line\">    headers &#x3D; &#123;</span><br><span class=\"line\">        &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class=\"line\">        &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;53.0.2785.116 Safari&#x2F;537.36 QBCore&#x2F;4.0.1219.400 QQBrowser&#x2F;9.0.2524.400 Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36 MicroMessenger&#x2F;6.5.2.501 NetType&#x2F;WIFI WindowsWechat&quot;,</span><br><span class=\"line\">        &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class=\"line\">        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.6,en;q&#x3D;0.5;q&#x3D;0.4&quot;,</span><br><span class=\"line\">        &#39;Connection&#39;:&#39;keep-alive&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response &#x3D; requests.get(url,headers &#x3D; headers,proxies&#x3D;None)</span><br><span class=\"line\">    with open(img_file_path,&quot;wb&quot;) as f:</span><br><span class=\"line\">        f.write(response.content)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>7、定义调用下载html和图片的方法（主函数调用此方法开始下载）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def down_html(json_path,html_path):</span><br><span class=\"line\">    if not os.path.exists(html_path):</span><br><span class=\"line\">        os.makedirs(html_path) # 创建保存html文件的文件夹</span><br><span class=\"line\">    local_img_path &#x3D; os.path.join(html_path,&quot;images&quot;)</span><br><span class=\"line\">    if not os.path.lexists(local_img_path):</span><br><span class=\"line\">        os.makedirs(local_img_path) # 创建保存本地图片的文件夹</span><br><span class=\"line\">    article_list &#x3D; get_article_list(json_path)</span><br><span class=\"line\">    article_list.sort(key&#x3D;lambda x:x.atc_datetime, reverse&#x3D;True) # 根据文章发表时间倒序排列</span><br><span class=\"line\">    tot_article &#x3D; len(article_list) # 文章的总数量</span><br><span class=\"line\">    i &#x3D; 0 #计数用</span><br><span class=\"line\">    for atc in article_list:</span><br><span class=\"line\">        i+&#x3D;1</span><br><span class=\"line\">        atc_unique_name &#x3D; str(atc.atc_datetime) + &quot;_&quot; + str(atc.idx_num) # 时间+序号 作为同一时间发表的文章的唯一标识</span><br><span class=\"line\">        html_name &#x3D; atc_unique_name+&quot;.html&quot;</span><br><span class=\"line\">        html_file_path &#x3D; os.path.join(html_path,html_name)</span><br><span class=\"line\">        print(i,&quot;of&quot;,tot_article,atc_unique_name,atc.title)</span><br><span class=\"line\">        if os.path.exists(html_file_path): # 支持续传</span><br><span class=\"line\">            print(&quot;&#123;&#125; existed already!&quot;.format(html_file_path))</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        org_atc_html &#x3D; get_html(atc.url)</span><br><span class=\"line\">        new_atc_html &#x3D; rep_image(org_atc_html,local_img_path,html_name)</span><br><span class=\"line\">        save_file(html_file_path,new_atc_html)</span><br><span class=\"line\">        sleep(round(random.uniform(1,3),2))</span><br><span class=\"line\">        &quot;&quot;&quot;for test</span><br><span class=\"line\">        if i&gt;0 :</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>8、查看fiddler保存的json文件结构，定义解析json字符串获取文章列表的方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_article_list(json_path):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    通过抓取的包的json文件，获取所有文章的信息的列表</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    file_list &#x3D; os.listdir(json_path) #jsonpath是fiddler导出的文件夹路径</span><br><span class=\"line\">    article_list &#x3D; [] # 用来保存所有文章的列表</span><br><span class=\"line\">    for file in file_list:</span><br><span class=\"line\">        file_path &#x3D; os.path.join(json_path,file)</span><br><span class=\"line\">        file_cont &#x3D; read_file(file_path)</span><br><span class=\"line\">        json_cont &#x3D; json.loads(file_cont)</span><br><span class=\"line\">        general_msg_list &#x3D; json_cont[&#39;general_msg_list&#39;]</span><br><span class=\"line\">        json_list &#x3D; json.loads(general_msg_list)</span><br><span class=\"line\">        #print(json_list[&#39;list&#39;][0][&#39;comm_msg_info&#39;][&#39;datetime&#39;])</span><br><span class=\"line\">        for lst in json_list[&#39;list&#39;]:</span><br><span class=\"line\">            atc_idx &#x3D; 0 # 每个时间可以发多篇文章 为了方便后续图片命名</span><br><span class=\"line\">            seconds_datetime &#x3D; lst[&#39;comm_msg_info&#39;][&#39;datetime&#39;]</span><br><span class=\"line\">            atc_datetime &#x3D; seconds_to_time(seconds_datetime)</span><br><span class=\"line\">            if lst[&#39;comm_msg_info&#39;][&#39;type&#39;] &#x3D;&#x3D; 49: # 49为普通的图文</span><br><span class=\"line\">                atc_idx+&#x3D;1</span><br><span class=\"line\">                url &#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;content_url&#39;]</span><br><span class=\"line\">                title &#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;title&#39;]</span><br><span class=\"line\">                atc_info &#x3D; ArticleInfo(url,title,atc_idx,atc_datetime)</span><br><span class=\"line\">                article_list.append(atc_info)</span><br><span class=\"line\">            if 1 &#x3D;&#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;is_multi&#39;]: # 一次发多篇</span><br><span class=\"line\">                multi_app_msg_item_list &#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;multi_app_msg_item_list&#39;]</span><br><span class=\"line\">                for multi in multi_app_msg_item_list:</span><br><span class=\"line\">                    atc_idx+&#x3D;1</span><br><span class=\"line\">                    url &#x3D; multi[&#39;content_url&#39;]</span><br><span class=\"line\">                    title &#x3D; multi[&#39;title&#39;]</span><br><span class=\"line\">                    mul_act_info &#x3D; ArticleInfo(url,title,atc_idx,atc_datetime)</span><br><span class=\"line\">                    article_list.append(mul_act_info)</span><br><span class=\"line\">    return article_list</span><br></pre></td></tr></table></figure>\n<br>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/raw_info.png\" class title=\"fiddle保持raw具体内容\">\n\n<p>&emsp;&emsp;<strong>9、定义替换html中图片src为本地图片的方法（不替换，html中的图片将无法显示）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def chg_img_link(bs_html):</span><br><span class=\"line\">    link_list &#x3D; bs_html.findAll(&quot;link&quot;)</span><br><span class=\"line\">    for link in link_list:</span><br><span class=\"line\">        href &#x3D; link.attrs[&quot;href&quot;]</span><br><span class=\"line\">        if href.startswith(&quot;&#x2F;&#x2F;&quot;):</span><br><span class=\"line\">            new_href &#x3D; &quot;http:&quot;+href</span><br><span class=\"line\">            link.attrs[&quot;href&quot;]&#x3D;new_href</span><br><span class=\"line\"> </span><br><span class=\"line\">def rep_image(org_html,local_img_path,html_name):</span><br><span class=\"line\">    bs_html &#x3D; BeautifulSoup(org_html,&quot;lxml&quot;)</span><br><span class=\"line\">    img_list &#x3D; bs_html.findAll(&quot;img&quot;)</span><br><span class=\"line\">    img_idx &#x3D; 0 # 计数和命名用</span><br><span class=\"line\">    for img in img_list:</span><br><span class=\"line\">        img_idx+&#x3D;1</span><br><span class=\"line\">        org_url &#x3D; &quot;&quot; # 图片的真实地址</span><br><span class=\"line\">        if &quot;data-src&quot; in img.attrs: # &lt;img  data-src&#x3D;&quot;...&quot;</span><br><span class=\"line\">            org_url &#x3D; img.attrs[&#39;data-src&#39;]</span><br><span class=\"line\">        elif &quot;src&quot; in img.attrs : # &lt;img  src&#x3D;&quot;...&quot;</span><br><span class=\"line\">            org_url &#x3D; img.attrs[&#39;src&#39;]</span><br><span class=\"line\">        if org_url.startswith(&quot;&#x2F;&#x2F;&quot;):</span><br><span class=\"line\">            org_url &#x3D; &quot;http:&quot; + org_url</span><br><span class=\"line\">        if len(org_url) &gt; 0 :</span><br><span class=\"line\">            print(&quot;download image &quot;,img_idx)</span><br><span class=\"line\">            if &quot;data-type&quot; in img.attrs:</span><br><span class=\"line\">                img_type &#x3D; img.attrs[&quot;data-type&quot;]</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                img_type &#x3D; &quot;png&quot;</span><br><span class=\"line\">            img_name &#x3D; html_name + &quot;_&quot; + str(img_idx) + &quot;.&quot; +img_type</span><br><span class=\"line\">            img_file_path &#x3D; os.path.join(local_img_path,img_name)</span><br><span class=\"line\">            get_save_image(org_url,img_file_path) # 下载并保存图片</span><br><span class=\"line\">            img.attrs[&quot;src&quot;] &#x3D; &quot;images&#x2F;&quot; + img_name</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            img.attrs[&quot;src&quot;] &#x3D; &quot;&quot;</span><br><span class=\"line\">    chg_img_link(bs_html)</span><br><span class=\"line\">    return str(bs_html)</span><br></pre></td></tr></table></figure>\n<br>\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/without_img.png\" class title=\"未替换本地图片源\">\n<img src=\"/rabbitBear/2022/07/27/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8E%86%E5%8F%B2%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/with_img.png\" class title=\"替换本地图片源\">\n\n<p>&emsp;&emsp;<strong>10、定义html转换成pdf的方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def conv_html_pdf(html_path,pdf_path):</span><br><span class=\"line\">    if not os.path.exists(pdf_path):</span><br><span class=\"line\">        os.makedirs(pdf_path)</span><br><span class=\"line\">    f_list &#x3D; os.listdir(html_path)</span><br><span class=\"line\">    for f in f_list:</span><br><span class=\"line\">        if (not f[-5:]&#x3D;&#x3D;&quot;.html&quot;) or (&quot;tmp&quot; in f): #不是html文件的不转换，含有tmp的不转换</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        html_file_path &#x3D; os.path.join(html_path,f)</span><br><span class=\"line\">        html_tmp_file &#x3D; html_file_path[:-5]+&quot;_tmp.html&quot; #生成临时文件，供转pdf用</span><br><span class=\"line\">        html_str &#x3D; read_file(html_file_path)</span><br><span class=\"line\">        bs_html &#x3D; BeautifulSoup(html_str,&quot;lxml&quot;)</span><br><span class=\"line\">        pdf_title &#x3D; &quot;&quot;</span><br><span class=\"line\">        title_tag &#x3D; bs_html.find(id&#x3D;&quot;activity-name&quot;)</span><br><span class=\"line\">        if title_tag is not None:</span><br><span class=\"line\">            pdf_title &#x3D; &quot;_&quot;+title_tag.get_text().replace(&quot; &quot;, &quot;&quot;).replace(&quot;  &quot;,&quot;&quot;).replace(&quot;\\n&quot;,&quot;&quot;)</span><br><span class=\"line\">        print(pdf_title)</span><br><span class=\"line\">        r_idx &#x3D; html_file_path.rindex(&quot;&#x2F;&quot;) + 1</span><br><span class=\"line\">        pdf_name &#x3D; html_file_path[r_idx:-5]+pdf_title</span><br><span class=\"line\">        pdf_file_path &#x3D; os.path.join(pdf_path,pdf_name+&quot;.pdf&quot;)</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        加快转换速度，把临时文件中的不必要的元素去掉</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        [s.extract() for s in bs_html([&quot;script&quot;,&quot;iframe&quot;,&quot;link&quot;])]</span><br><span class=\"line\">        save_file(html_tmp_file,str(bs_html))</span><br><span class=\"line\">        call_wkhtmltopdf(html_tmp_file,pdf_file_path)</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def call_wkhtmltopdf(html_file_path,pdf_file_path,skipExists&#x3D;True,removehtml&#x3D;True):</span><br><span class=\"line\">    if skipExists and os.path.exists(pdf_file_path):</span><br><span class=\"line\">        print(&quot;pdf_file_path already existed!&quot;)</span><br><span class=\"line\">        if removehtml :</span><br><span class=\"line\">            os.remove(html_file_path)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    exe_path &#x3D; cfg[&#39;wkhtmltopdf&#39;] #wkhtmltopdf.exe的保存路径</span><br><span class=\"line\">    cmd_list &#x3D; []</span><br><span class=\"line\">    cmd_list.append(&quot; --load-error-handling ignore &quot;)</span><br><span class=\"line\">    cmd_list.append(&quot; &quot;+ html_file_path +&quot; &quot;)</span><br><span class=\"line\">    cmd_list.append(&quot; &quot;+ pdf_file_path +&quot; &quot;)</span><br><span class=\"line\">    cmd_str &#x3D; exe_path + &quot;&quot;.join(cmd_list)</span><br><span class=\"line\">    print(cmd_str)</span><br><span class=\"line\">    subprocess.check_call(cmd_str, shell&#x3D;False)</span><br><span class=\"line\">    if removehtml:</span><br><span class=\"line\">        os.remove(html_file_path)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>11、定义读取保存各文件夹路径的配置文件的方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_config():</span><br><span class=\"line\">    cfg_file &#x3D; read_file(&quot;config&#x2F;wechat.cfg&quot;)</span><br><span class=\"line\">    cfg_file &#x3D; cfg_file.replace(&quot;\\\\\\\\&quot;,&quot;&#x2F;&quot;).replace(&quot;\\\\&quot;,&quot;&#x2F;&quot;) #防止json中有 &#x2F; 导致无法识别</span><br><span class=\"line\">    cfg_json &#x3D; json.loads(cfg_file)</span><br><span class=\"line\">    return cfg_json</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>【重要】配置文件放置在当前目录的子目录config下，名为wechat.cfg,内容如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;jsonDir&quot;: &quot;.&#x2F;download&#x2F;wechat&#x2F;fiddler-raw&#x2F;Dump-0902-14-43-38&#x2F;&quot;,</span><br><span class=\"line\">    &quot;htmlDir&quot;: &quot;.&#x2F;download&#x2F;wechat&#x2F;html&#x2F;&quot;,</span><br><span class=\"line\">    &quot;pdfDir&quot;: &quot;.&#x2F;download&#x2F;wechat&#x2F;pdf&#x2F;&quot;,</span><br><span class=\"line\">    &quot;wkhtmltopdf&quot;: &quot;.&#x2F;wkhtmltopdf.exe&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>12、定义从秒数获得时间的方法（微信公众号的datetime存放的是从1970-01-01 00:00:00到发表时的秒数）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def seconds_to_time(seconds):</span><br><span class=\"line\">    taime_array &#x3D; time.localtime(seconds) # 1970-01-01 00:00:00 到发表时的秒数</span><br><span class=\"line\">    other_style_time &#x3D; time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, taime_array)</span><br><span class=\"line\">    date_time &#x3D;datetime.strptime(other_style_time, &quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class=\"line\">    return str(date_time).replace(&quot;-&quot;,&quot;&quot;).replace(&quot;:&quot;,&quot;&quot;).replace(&quot; &quot;,&quot;&quot;)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;<strong>13、定义主函数进行调用，没有参数或者参数是html则进行下载，如果是pdf则是html转换成pdf</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg &#x3D; get_config() # 获得配置文件的全局变量</span><br><span class=\"line\">#get_article_list(&quot;.&#x2F;tmp&#x2F;&quot;) # for test</span><br><span class=\"line\">#down_html(&quot;.&#x2F;tmp&#x2F;&quot;,&quot;.&#x2F;html&#x2F;&quot;)# for test</span><br><span class=\"line\"> </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\"> </span><br><span class=\"line\">    if len(sys.argv) &#x3D;&#x3D; 1:</span><br><span class=\"line\">        arg &#x3D; None</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        arg &#x3D; sys.argv[1]</span><br><span class=\"line\">    if arg is None or arg &#x3D;&#x3D; &quot;html&quot;:</span><br><span class=\"line\">        down_html(cfg[&#39;jsonDir&#39;],cfg[&#39;htmlDir&#39;])</span><br><span class=\"line\">    elif arg &#x3D;&#x3D; &quot;pdf&quot;:</span><br><span class=\"line\">        conv_html_pdf(cfg[&#39;htmlDir&#39;],cfg[&#39;pdfDir&#39;])</span><br></pre></td></tr></table></figure>\n<h3 id=\"【运行效果】\"><a href=\"#【运行效果】\" class=\"headerlink\" title=\"【运行效果】\"></a><strong>【运行效果】</strong></h3><br>\n\n\n\n<h3 id=\"【完整代码】\"><a href=\"#【完整代码】\" class=\"headerlink\" title=\"【完整代码】\"></a><strong>【完整代码】</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># _*_ coding:utf-8 _*_</span><br><span class=\"line\">import os,sys</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import json</span><br><span class=\"line\">import subprocess</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\">import time</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from datetime import datetime,timedelta</span><br><span class=\"line\">from time import sleep</span><br><span class=\"line\"> </span><br><span class=\"line\">class ArticleInfo():</span><br><span class=\"line\">    def __init__(self,url,title,idx_num,atc_datetime): #idx_num是为了方便保存图片命名</span><br><span class=\"line\">        self.url &#x3D; url</span><br><span class=\"line\">        self.title &#x3D; title</span><br><span class=\"line\">        self.idx_num &#x3D; idx_num</span><br><span class=\"line\">        self.atc_datetime &#x3D; atc_datetime</span><br><span class=\"line\"> </span><br><span class=\"line\">def read_file(file_path):</span><br><span class=\"line\">    with open(file_path,&quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class=\"line\">        file_content &#x3D; f.read()</span><br><span class=\"line\">    return file_content</span><br><span class=\"line\"> </span><br><span class=\"line\">def save_file(file_path,file_content):</span><br><span class=\"line\">    with open(file_path,&quot;w&quot;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class=\"line\">        f.write(file_content)</span><br><span class=\"line\"> </span><br><span class=\"line\">def get_html(url):</span><br><span class=\"line\">    headers &#x3D; &#123;</span><br><span class=\"line\">        &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class=\"line\">        &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;53.0.2785.116 Safari&#x2F;537.36 QBCore&#x2F;4.0.1219.400 QQBrowser&#x2F;9.0.2524.400 Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36 MicroMessenger&#x2F;6.5.2.501 NetType&#x2F;WIFI WindowsWechat&quot;,</span><br><span class=\"line\">        &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class=\"line\">        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.6,en;q&#x3D;0.5;q&#x3D;0.4&quot;,</span><br><span class=\"line\">        &#39;Connection&#39;:&#39;keep-alive&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response &#x3D; requests.get(url,headers &#x3D; headers,proxies&#x3D;None)</span><br><span class=\"line\">    if response.status_code &#x3D;&#x3D; 200:</span><br><span class=\"line\">        htmltxt &#x3D; response.text #返回的网页正文</span><br><span class=\"line\">        return htmltxt</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return None</span><br><span class=\"line\"> </span><br><span class=\"line\">def get_save_image(url,img_file_path):</span><br><span class=\"line\">    headers &#x3D; &#123;</span><br><span class=\"line\">        &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class=\"line\">        &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;53.0.2785.116 Safari&#x2F;537.36 QBCore&#x2F;4.0.1219.400 QQBrowser&#x2F;9.0.2524.400 Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;39.0.2171.95 Safari&#x2F;537.36 MicroMessenger&#x2F;6.5.2.501 NetType&#x2F;WIFI WindowsWechat&quot;,</span><br><span class=\"line\">        &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class=\"line\">        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.6,en;q&#x3D;0.5;q&#x3D;0.4&quot;,</span><br><span class=\"line\">        &#39;Connection&#39;:&#39;keep-alive&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response &#x3D; requests.get(url,headers &#x3D; headers,proxies&#x3D;None)</span><br><span class=\"line\">    with open(img_file_path,&quot;wb&quot;) as f:</span><br><span class=\"line\">        f.write(response.content)</span><br><span class=\"line\"> </span><br><span class=\"line\">def get_article_list(json_path):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    通过抓取的包的json文件，获取所有文章的信息的列表</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    file_list &#x3D; os.listdir(json_path) #jsonpath是fiddler导出的文件夹路径</span><br><span class=\"line\">    article_list &#x3D; [] # 用来保存所有文章的列表</span><br><span class=\"line\">    for file in file_list:</span><br><span class=\"line\">        file_path &#x3D; os.path.join(json_path,file)</span><br><span class=\"line\">        file_cont &#x3D; read_file(file_path)</span><br><span class=\"line\">        json_cont &#x3D; json.loads(file_cont)</span><br><span class=\"line\">        general_msg_list &#x3D; json_cont[&#39;general_msg_list&#39;]</span><br><span class=\"line\">        json_list &#x3D; json.loads(general_msg_list)</span><br><span class=\"line\">        #print(json_list[&#39;list&#39;][0][&#39;comm_msg_info&#39;][&#39;datetime&#39;])</span><br><span class=\"line\">        for lst in json_list[&#39;list&#39;]:</span><br><span class=\"line\">            atc_idx &#x3D; 0 # 每个时间可以发多篇文章 为了方便后续图片命名</span><br><span class=\"line\">            seconds_datetime &#x3D; lst[&#39;comm_msg_info&#39;][&#39;datetime&#39;]</span><br><span class=\"line\">            atc_datetime &#x3D; seconds_to_time(seconds_datetime)</span><br><span class=\"line\">            if lst[&#39;comm_msg_info&#39;][&#39;type&#39;] &#x3D;&#x3D; 49: # 49为普通的图文</span><br><span class=\"line\">                atc_idx+&#x3D;1</span><br><span class=\"line\">                url &#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;content_url&#39;]</span><br><span class=\"line\">                title &#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;title&#39;]</span><br><span class=\"line\">                atc_info &#x3D; ArticleInfo(url,title,atc_idx,atc_datetime)</span><br><span class=\"line\">                article_list.append(atc_info)</span><br><span class=\"line\">            if 1 &#x3D;&#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;is_multi&#39;]: # 一次发多篇</span><br><span class=\"line\">                multi_app_msg_item_list &#x3D; lst[&#39;app_msg_ext_info&#39;][&#39;multi_app_msg_item_list&#39;]</span><br><span class=\"line\">                for multi in multi_app_msg_item_list:</span><br><span class=\"line\">                    atc_idx+&#x3D;1</span><br><span class=\"line\">                    url &#x3D; multi[&#39;content_url&#39;]</span><br><span class=\"line\">                    title &#x3D; multi[&#39;title&#39;]</span><br><span class=\"line\">                    mul_act_info &#x3D; ArticleInfo(url,title,atc_idx,atc_datetime)</span><br><span class=\"line\">                    article_list.append(mul_act_info)</span><br><span class=\"line\">    return article_list</span><br><span class=\"line\"> </span><br><span class=\"line\">def chg_img_link(bs_html):</span><br><span class=\"line\">    link_list &#x3D; bs_html.findAll(&quot;link&quot;)</span><br><span class=\"line\">    for link in link_list:</span><br><span class=\"line\">        href &#x3D; link.attrs[&quot;href&quot;]</span><br><span class=\"line\">        if href.startswith(&quot;&#x2F;&#x2F;&quot;):</span><br><span class=\"line\">            new_href &#x3D; &quot;http:&quot;+href</span><br><span class=\"line\">            link.attrs[&quot;href&quot;]&#x3D;new_href</span><br><span class=\"line\"> </span><br><span class=\"line\">def rep_image(org_html,local_img_path,html_name):</span><br><span class=\"line\">    bs_html &#x3D; BeautifulSoup(org_html,&quot;lxml&quot;)</span><br><span class=\"line\">    img_list &#x3D; bs_html.findAll(&quot;img&quot;)</span><br><span class=\"line\">    img_idx &#x3D; 0 # 计数和命名用</span><br><span class=\"line\">    for img in img_list:</span><br><span class=\"line\">        img_idx+&#x3D;1</span><br><span class=\"line\">        org_url &#x3D; &quot;&quot; # 图片的真实地址</span><br><span class=\"line\">        if &quot;data-src&quot; in img.attrs: # &lt;img  data-src&#x3D;&quot;...&quot;</span><br><span class=\"line\">            org_url &#x3D; img.attrs[&#39;data-src&#39;]</span><br><span class=\"line\">        elif &quot;src&quot; in img.attrs : # &lt;img  src&#x3D;&quot;...&quot;</span><br><span class=\"line\">            org_url &#x3D; img.attrs[&#39;src&#39;]</span><br><span class=\"line\">        if org_url.startswith(&quot;&#x2F;&#x2F;&quot;):</span><br><span class=\"line\">            org_url &#x3D; &quot;http:&quot; + org_url</span><br><span class=\"line\">        if len(org_url) &gt; 0 :</span><br><span class=\"line\">            print(&quot;download image &quot;,img_idx)</span><br><span class=\"line\">            if &quot;data-type&quot; in img.attrs:</span><br><span class=\"line\">                img_type &#x3D; img.attrs[&quot;data-type&quot;]</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                img_type &#x3D; &quot;png&quot;</span><br><span class=\"line\">            img_name &#x3D; html_name + &quot;_&quot; + str(img_idx) + &quot;.&quot; +img_type</span><br><span class=\"line\">            img_file_path &#x3D; os.path.join(local_img_path,img_name)</span><br><span class=\"line\">            get_save_image(org_url,img_file_path) # 下载并保存图片</span><br><span class=\"line\">            img.attrs[&quot;src&quot;] &#x3D; &quot;images&#x2F;&quot; + img_name</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            img.attrs[&quot;src&quot;] &#x3D; &quot;&quot;</span><br><span class=\"line\">    chg_img_link(bs_html)</span><br><span class=\"line\">    return str(bs_html)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">def down_html(json_path,html_path):</span><br><span class=\"line\">    if not os.path.exists(html_path):</span><br><span class=\"line\">        os.makedirs(html_path) # 创建保存html文件的文件夹</span><br><span class=\"line\">    local_img_path &#x3D; os.path.join(html_path,&quot;images&quot;)</span><br><span class=\"line\">    if not os.path.lexists(local_img_path):</span><br><span class=\"line\">        os.makedirs(local_img_path) # 创建保存本地图片的文件夹</span><br><span class=\"line\">    article_list &#x3D; get_article_list(json_path)</span><br><span class=\"line\">    article_list.sort(key&#x3D;lambda x:x.atc_datetime, reverse&#x3D;True) # 根据文章发表时间倒序排列</span><br><span class=\"line\">    tot_article &#x3D; len(article_list) # 文章的总数量</span><br><span class=\"line\">    i &#x3D; 0 #计数用</span><br><span class=\"line\">    for atc in article_list:</span><br><span class=\"line\">        i+&#x3D;1</span><br><span class=\"line\">        atc_unique_name &#x3D; str(atc.atc_datetime) + &quot;_&quot; + str(atc.idx_num) # 时间+序号 作为同一时间发表的文章的唯一标识</span><br><span class=\"line\">        html_name &#x3D; atc_unique_name+&quot;.html&quot;</span><br><span class=\"line\">        html_file_path &#x3D; os.path.join(html_path,html_name)</span><br><span class=\"line\">        print(i,&quot;of&quot;,tot_article,atc_unique_name,atc.title)</span><br><span class=\"line\">        if os.path.exists(html_file_path): # 支持续传</span><br><span class=\"line\">            print(&quot;&#123;&#125; existed already!&quot;.format(html_file_path))</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        org_atc_html &#x3D; get_html(atc.url)</span><br><span class=\"line\">        new_atc_html &#x3D; rep_image(org_atc_html,local_img_path,html_name)</span><br><span class=\"line\">        save_file(html_file_path,new_atc_html)</span><br><span class=\"line\">        sleep(round(random.uniform(1,3),2))</span><br><span class=\"line\">        &quot;&quot;&quot;for test</span><br><span class=\"line\">        if i&gt;0 :</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">def conv_html_pdf(html_path,pdf_path):</span><br><span class=\"line\">    if not os.path.exists(pdf_path):</span><br><span class=\"line\">        os.makedirs(pdf_path)</span><br><span class=\"line\">    f_list &#x3D; os.listdir(html_path)</span><br><span class=\"line\">    for f in f_list:</span><br><span class=\"line\">        if (not f[-5:]&#x3D;&#x3D;&quot;.html&quot;) or (&quot;tmp&quot; in f): #不是html文件的不转换，含有tmp的不转换</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        html_file_path &#x3D; os.path.join(html_path,f)</span><br><span class=\"line\">        html_tmp_file &#x3D; html_file_path[:-5]+&quot;_tmp.html&quot; #生成临时文件，供转pdf用</span><br><span class=\"line\">        html_str &#x3D; read_file(html_file_path)</span><br><span class=\"line\">        bs_html &#x3D; BeautifulSoup(html_str,&quot;lxml&quot;)</span><br><span class=\"line\">        pdf_title &#x3D; &quot;&quot;</span><br><span class=\"line\">        title_tag &#x3D; bs_html.find(id&#x3D;&quot;activity-name&quot;)</span><br><span class=\"line\">        if title_tag is not None:</span><br><span class=\"line\">            pdf_title &#x3D; &quot;_&quot;+title_tag.get_text().replace(&quot; &quot;, &quot;&quot;).replace(&quot;  &quot;,&quot;&quot;).replace(&quot;\\n&quot;,&quot;&quot;)</span><br><span class=\"line\">        print(pdf_title)</span><br><span class=\"line\">        r_idx &#x3D; html_file_path.rindex(&quot;&#x2F;&quot;) + 1</span><br><span class=\"line\">        pdf_name &#x3D; html_file_path[r_idx:-5]+pdf_title</span><br><span class=\"line\">        pdf_file_path &#x3D; os.path.join(pdf_path,pdf_name+&quot;.pdf&quot;)</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        加快转换速度，把临时文件中的不必要的元素去掉</span><br><span class=\"line\">        &quot;&quot;&quot;</span><br><span class=\"line\">        [s.extract() for s in bs_html([&quot;script&quot;,&quot;iframe&quot;,&quot;link&quot;])]</span><br><span class=\"line\">        save_file(html_tmp_file,str(bs_html))</span><br><span class=\"line\">        call_wkhtmltopdf(html_tmp_file,pdf_file_path)</span><br><span class=\"line\"> </span><br><span class=\"line\">def call_wkhtmltopdf(html_file_path,pdf_file_path,skipExists&#x3D;True,removehtml&#x3D;True):</span><br><span class=\"line\">    if skipExists and os.path.exists(pdf_file_path):</span><br><span class=\"line\">        print(&quot;pdf_file_path already existed!&quot;)</span><br><span class=\"line\">        if removehtml :</span><br><span class=\"line\">            os.remove(html_file_path)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    exe_path &#x3D; cfg[&#39;wkhtmltopdf&#39;] #wkhtmltopdf.exe的保存路径</span><br><span class=\"line\">    cmd_list &#x3D; []</span><br><span class=\"line\">    cmd_list.append(&quot; --load-error-handling ignore &quot;)</span><br><span class=\"line\">    cmd_list.append(&quot; &quot;+ html_file_path +&quot; &quot;)</span><br><span class=\"line\">    cmd_list.append(&quot; &quot;+ pdf_file_path +&quot; &quot;)</span><br><span class=\"line\">    cmd_str &#x3D; exe_path + &quot;&quot;.join(cmd_list)</span><br><span class=\"line\">    print(cmd_str)</span><br><span class=\"line\">    subprocess.check_call(cmd_str, shell&#x3D;False)</span><br><span class=\"line\">    if removehtml:</span><br><span class=\"line\">        os.remove(html_file_path)</span><br><span class=\"line\"> </span><br><span class=\"line\">def get_config():</span><br><span class=\"line\">    cfg_file &#x3D; read_file(&quot;config&#x2F;wechat.cfg&quot;)</span><br><span class=\"line\">    cfg_file &#x3D; cfg_file.replace(&quot;\\\\\\\\&quot;,&quot;&#x2F;&quot;).replace(&quot;\\\\&quot;,&quot;&#x2F;&quot;) #防止json中有 &#x2F; 导致无法识别</span><br><span class=\"line\">    cfg_json &#x3D; json.loads(cfg_file)</span><br><span class=\"line\">    return cfg_json</span><br><span class=\"line\"> </span><br><span class=\"line\">def seconds_to_time(seconds):</span><br><span class=\"line\">    taime_array &#x3D; time.localtime(seconds) # 1970-01-01 00:00:00 到发表时的秒数</span><br><span class=\"line\">    other_style_time &#x3D; time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, taime_array)</span><br><span class=\"line\">    date_time &#x3D;datetime.strptime(other_style_time, &quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class=\"line\">    return str(date_time).replace(&quot;-&quot;,&quot;&quot;).replace(&quot;:&quot;,&quot;&quot;).replace(&quot; &quot;,&quot;&quot;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">cfg &#x3D; get_config() # 获得配置文件的全局变量</span><br><span class=\"line\">#get_article_list(&quot;.&#x2F;tmp&#x2F;&quot;) # for test</span><br><span class=\"line\">#down_html(&quot;.&#x2F;tmp&#x2F;&quot;,&quot;.&#x2F;html&#x2F;&quot;)# for test</span><br><span class=\"line\"> </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\"> </span><br><span class=\"line\">    if len(sys.argv) &#x3D;&#x3D; 1:</span><br><span class=\"line\">        arg &#x3D; None</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        arg &#x3D; sys.argv[1]</span><br><span class=\"line\">    if arg is None or arg &#x3D;&#x3D; &quot;html&quot;:</span><br><span class=\"line\">        down_html(cfg[&#39;jsonDir&#39;],cfg[&#39;htmlDir&#39;])</span><br><span class=\"line\">    elif arg &#x3D;&#x3D; &quot;pdf&quot;:</span><br><span class=\"line\">        conv_html_pdf(cfg[&#39;htmlDir&#39;],cfg[&#39;pdfDir&#39;])</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/2021-02-01-量化投资4/get_sl_real_url.png","slug":"get_sl_real_url.png","post":"cl680ghdu0001dwq8e3zbbkhr","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-01-量化投资4/sl_real_url_req.png","slug":"sl_real_url_req.png","post":"cl680ghdu0001dwq8e3zbbkhr","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-01-量化投资4/sl_real_url_rsp.png","slug":"sl_real_url_rsp.png","post":"cl680ghdu0001dwq8e3zbbkhr","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-01-量化投资4/stock_info_csv.png","slug":"stock_info_csv.png","post":"cl680ghdu0001dwq8e3zbbkhr","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-01-量化投资4/stock_info_web.png","slug":"stock_info_web.png","post":"cl680ghdu0001dwq8e3zbbkhr","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-01-量化投资4/stock_list_csv.png","slug":"stock_list_csv.png","post":"cl680ghdu0001dwq8e3zbbkhr","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-01-量化投资4/stock_list_web.png","slug":"stock_list_web.png","post":"cl680ghdu0001dwq8e3zbbkhr","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-03-量化投资5/ts_stock_basics.png","slug":"ts_stock_basics.png","post":"cl680ghed000ndwq8dhglg3un","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-04-个人进化论01/wo.png","slug":"wo.png","post":"cl680ghej000rdwq80f1r9m4s","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/butterfly.png","slug":"butterfly.png","post":"cl680ghf1001ndwq85qkz540k","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_new.png","slug":"github_new.png","post":"cl680ghf1001ndwq85qkz540k","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_new_config.png","slug":"github_new_config.png","post":"cl680ghf1001ndwq85qkz540k","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_new_pub.png","slug":"github_new_pub.png","post":"cl680ghf1001ndwq85qkz540k","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_pub_page.png","slug":"github_pub_page.png","post":"cl680ghf1001ndwq85qkz540k","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_setting.png","slug":"github_setting.png","post":"cl680ghf1001ndwq85qkz540k","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_ssh.png","slug":"github_ssh.png","post":"cl680ghf1001ndwq85qkz540k","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_ssh_new.png","slug":"github_ssh_new.png","post":"cl680ghf1001ndwq85qkz540k","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/github_ssh_newdetail.png","slug":"github_ssh_newdetail.png","post":"cl680ghf1001ndwq85qkz540k","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/git_ssh.png","slug":"git_ssh.png","post":"cl680ghf1001ndwq85qkz540k","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/hexo-hello.png","slug":"hexo-hello.png","post":"cl680ghf1001ndwq85qkz540k","modified":0,"renderable":0},{"_id":"source/_posts/2021-02-07-hexo博客基础环境搭建/ssh_suc.png","slug":"ssh_suc.png","post":"cl680ghf1001ndwq85qkz540k","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/analyse_pkg_1.png","slug":"analyse_pkg_1.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/analyse_pkg_2.png","slug":"analyse_pkg_2.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/analyse_pkg_3.png","slug":"analyse_pkg_3.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_filters.png","slug":"fiddle_filters.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_info_1.png","slug":"fiddle_info_1.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_info_2.png","slug":"fiddle_info_2.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_raw_1.png","slug":"fiddle_raw_1.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_raw_2.png","slug":"fiddle_raw_2.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_raw_3.png","slug":"fiddle_raw_3.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_raw_4.png","slug":"fiddle_raw_4.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_setup_1.png","slug":"fiddle_setup_1.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/fiddle_setup_2.png","slug":"fiddle_setup_2.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/last_html.png.crdownload","slug":"last_html.png.crdownload","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/last_pdf.png.crdownload","slug":"last_pdf.png.crdownload","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/raw_info.png","slug":"raw_info.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/without_img.png","slug":"without_img.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0},{"_id":"source/_posts/2022-07-27-python批量下载公众号历史文章（一）/with_img.png","slug":"with_img.png","post":"cl680ghf3001odwq86bo2aki9","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl680ghdu0001dwq8e3zbbkhr","category_id":"cl680ghe30004dwq86768bcp1","_id":"cl680ghea000hdwq833hc7x1p"},{"post_id":"cl680ghdu0001dwq8e3zbbkhr","category_id":"cl680ghe50006dwq8dhyqfkhm","_id":"cl680ghea000idwq88z4z75qf"},{"post_id":"cl680ghdu0001dwq8e3zbbkhr","category_id":"cl680ghe60008dwq89x0meq35","_id":"cl680ghea000jdwq8fvbw0wur"},{"post_id":"cl680ghdu0001dwq8e3zbbkhr","category_id":"cl680ghe8000bdwq8dnlf7gak","_id":"cl680ghea000kdwq89huo8ath"},{"post_id":"cl680ghdu0001dwq8e3zbbkhr","category_id":"cl680ghe9000fdwq80oc9aap5","_id":"cl680ghea000ldwq8axbcdxdl"},{"post_id":"cl680ghdu0001dwq8e3zbbkhr","category_id":"cl680ghe9000gdwq89xioewnb","_id":"cl680ghea000mdwq8egwqd9r9"},{"post_id":"cl680ghed000ndwq8dhglg3un","category_id":"cl680ghe30004dwq86768bcp1","_id":"cl680ghen000xdwq8eje6fkgp"},{"post_id":"cl680ghed000ndwq8dhglg3un","category_id":"cl680ghe50006dwq8dhyqfkhm","_id":"cl680ghen0010dwq8ddwtaz4p"},{"post_id":"cl680ghed000ndwq8dhglg3un","category_id":"cl680ghe60008dwq89x0meq35","_id":"cl680ghet0013dwq87sp3aczl"},{"post_id":"cl680ghed000ndwq8dhglg3un","category_id":"cl680ghe8000bdwq8dnlf7gak","_id":"cl680gheu0016dwq885pgbvwk"},{"post_id":"cl680ghed000ndwq8dhglg3un","category_id":"cl680ghe9000fdwq80oc9aap5","_id":"cl680ghew0019dwq86vhp2tz9"},{"post_id":"cl680ghed000ndwq8dhglg3un","category_id":"cl680ghe9000gdwq89xioewnb","_id":"cl680ghew001bdwq85rdme63i"},{"post_id":"cl680ghee000odwq895124kvr","category_id":"cl680ghek000sdwq81d0caydz","_id":"cl680ghey001hdwq8bcqmd2yl"},{"post_id":"cl680ghee000odwq895124kvr","category_id":"cl680ghev0017dwq82h589oqj","_id":"cl680ghey001idwq82zsw9dbj"},{"post_id":"cl680gheg000qdwq83u9c9fxq","category_id":"cl680ghel000vdwq88ozx9ilx","_id":"cl680ghey001jdwq8cqfs6fce"},{"post_id":"cl680gheg000qdwq83u9c9fxq","category_id":"cl680ghex001ddwq8f4sq6fgk","_id":"cl680ghey001kdwq86f6232n4"},{"post_id":"cl680ghej000rdwq80f1r9m4s","category_id":"cl680gheo0011dwq8g0vob3p0","_id":"cl680ghez001ldwq8azrlgvyg"},{"post_id":"cl680ghej000rdwq80f1r9m4s","category_id":"cl680ghex001gdwq8ffu2clch","_id":"cl680ghez001mdwq86gf1dt4b"},{"post_id":"cl680ghf1001ndwq85qkz540k","category_id":"cl680ghe9000fdwq80oc9aap5","_id":"cl680ghf7001udwq8cll9aisd"},{"post_id":"cl680ghf1001ndwq85qkz540k","category_id":"cl680ghf5001qdwq8aeu55u9d","_id":"cl680ghf7001wdwq8fpg0clug"},{"post_id":"cl680ghf3001odwq86bo2aki9","category_id":"cl680ghf6001sdwq8gxvma5dj","_id":"cl680ghfc002adwq8f3wf0hog"},{"post_id":"cl680ghf3001odwq86bo2aki9","category_id":"cl680ghf7001vdwq87oqufa1v","_id":"cl680ghfc002bdwq8c5td71dz"},{"post_id":"cl680ghf3001odwq86bo2aki9","category_id":"cl680ghf90021dwq81t93f0hp","_id":"cl680ghfc002cdwq8a5gs9bf9"},{"post_id":"cl680ghf3001odwq86bo2aki9","category_id":"cl680ghfa0025dwq86weu26ec","_id":"cl680ghfc002ddwq8hbp0973p"},{"post_id":"cl680ghf3001odwq86bo2aki9","category_id":"cl680ghfb0028dwq85hpvh0mh","_id":"cl680ghfc002edwq81qoy02yu"},{"post_id":"cl680ghf3001odwq86bo2aki9","category_id":"cl680ghfb0029dwq85o4k8ouh","_id":"cl680ghfc002fdwq831rt7wr6"}],"PostTag":[{"post_id":"cl680ghdu0001dwq8e3zbbkhr","tag_id":"cl680ghe10003dwq8gzooehlm","_id":"cl680ghe8000adwq82lwecosj"},{"post_id":"cl680ghdu0001dwq8e3zbbkhr","tag_id":"cl680ghe40005dwq84kz97uc4","_id":"cl680ghe8000cdwq88wjj9r7t"},{"post_id":"cl680ghdu0001dwq8e3zbbkhr","tag_id":"cl680ghe50007dwq8dydjfclh","_id":"cl680ghe8000ddwq886cucdx3"},{"post_id":"cl680ghdu0001dwq8e3zbbkhr","tag_id":"cl680ghe60009dwq818n5a8yj","_id":"cl680ghe9000edwq8byxme62w"},{"post_id":"cl680ghed000ndwq8dhglg3un","tag_id":"cl680ghe10003dwq8gzooehlm","_id":"cl680ghel000udwq8ghki8g3d"},{"post_id":"cl680ghed000ndwq8dhglg3un","tag_id":"cl680ghe40005dwq84kz97uc4","_id":"cl680ghem000wdwq89nob8r9g"},{"post_id":"cl680ghed000ndwq8dhglg3un","tag_id":"cl680ghe50007dwq8dydjfclh","_id":"cl680ghen000zdwq8hit84401"},{"post_id":"cl680ghed000ndwq8dhglg3un","tag_id":"cl680ghe60009dwq818n5a8yj","_id":"cl680ghet0012dwq85uafb644"},{"post_id":"cl680ghed000ndwq8dhglg3un","tag_id":"cl680gheg000pdwq8fdve1mdo","_id":"cl680gheu0015dwq8axcr0dtp"},{"post_id":"cl680ghee000odwq895124kvr","tag_id":"cl680ghel000tdwq85hrh93ri","_id":"cl680ghev0018dwq8b5zv4tsz"},{"post_id":"cl680gheg000qdwq83u9c9fxq","tag_id":"cl680ghen000ydwq8fd4tens1","_id":"cl680ghex001cdwq830uac69v"},{"post_id":"cl680gheg000qdwq83u9c9fxq","tag_id":"cl680gheu0014dwq8cmi4czr3","_id":"cl680ghex001edwq810ydcsun"},{"post_id":"cl680ghej000rdwq80f1r9m4s","tag_id":"cl680ghew001adwq8fn69fla9","_id":"cl680ghex001fdwq8cuzh27vv"},{"post_id":"cl680ghf1001ndwq85qkz540k","tag_id":"cl680ghf4001pdwq88qfvf3mx","_id":"cl680ghf8001ydwq803mq1r9m"},{"post_id":"cl680ghf1001ndwq85qkz540k","tag_id":"cl680ghf5001rdwq876jqdaa7","_id":"cl680ghf8001zdwq8byf37cc5"},{"post_id":"cl680ghf1001ndwq85qkz540k","tag_id":"cl680ghf6001tdwq85pej388n","_id":"cl680ghf90022dwq8dvgkdmsx"},{"post_id":"cl680ghf3001odwq86bo2aki9","tag_id":"cl680ghf7001xdwq83u9s28i0","_id":"cl680ghfa0023dwq85xwv0s1v"},{"post_id":"cl680ghf3001odwq86bo2aki9","tag_id":"cl680ghf80020dwq85eozd8iy","_id":"cl680ghfa0024dwq85ezs7iq0"},{"post_id":"cl680ghf3001odwq86bo2aki9","tag_id":"cl680ghe50007dwq8dydjfclh","_id":"cl680ghfa0026dwq8docvc4wr"},{"post_id":"cl680ghf3001odwq86bo2aki9","tag_id":"cl680ghe60009dwq818n5a8yj","_id":"cl680ghfa0027dwq874w3gzmu"}],"Tag":[{"name":"量化投资","_id":"cl680ghe10003dwq8gzooehlm"},{"name":"数据获取","_id":"cl680ghe40005dwq84kz97uc4"},{"name":"技术","_id":"cl680ghe50007dwq8dydjfclh"},{"name":"python","_id":"cl680ghe60009dwq818n5a8yj"},{"name":"mysql","_id":"cl680gheg000pdwq8fdve1mdo"},{"name":"资治通鉴","_id":"cl680ghel000tdwq85hrh93ri"},{"name":"工程清单","_id":"cl680ghen000ydwq8fd4tens1"},{"name":"目录","_id":"cl680gheu0014dwq8cmi4czr3"},{"name":"听陈海贤自我进化课","_id":"cl680ghew001adwq8fn69fla9"},{"name":"hexo","_id":"cl680ghf4001pdwq88qfvf3mx"},{"name":"github","_id":"cl680ghf5001rdwq876jqdaa7"},{"name":"博客","_id":"cl680ghf6001tdwq85pej388n"},{"name":"爬虫","_id":"cl680ghf7001xdwq83u9s28i0"},{"name":"公众号","_id":"cl680ghf80020dwq85eozd8iy"}]}}